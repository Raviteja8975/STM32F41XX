
stm32f103_baremetal_ac_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007838  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d34  08007968  08007968  00017968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800869c  0800869c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800869c  0800869c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800869c  0800869c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080086a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  200001e8  08008888  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08008888  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a151  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec1  00000000  00000000  0002a35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001331c  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bc4  00000000  00000000  00040174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bd79  00000000  00000000  00046d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  000a2b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e8 	.word	0x200001e8
 800014c:	00000000 	.word	0x00000000
 8000150:	08007950 	.word	0x08007950

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001ec 	.word	0x200001ec
 800016c:	08007950 	.word	0x08007950

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	460c      	mov	r4, r1
 8001174:	4605      	mov	r5, r0
 8001176:	4621      	mov	r1, r4
 8001178:	4628      	mov	r0, r5
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	f7ff fc2d 	bl	80009dc <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f9a3 	bl	80004f8 <__aeabi_dmul>
 80011b2:	f7ff fc79 	bl	8000aa8 <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f924 	bl	8000404 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f99a 	bl	80004f8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffdc 	bl	8000188 <__aeabi_dsub>
 80011d0:	f7ff fc6a 	bl	8000aa8 <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0e      	blt.n	8001210 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <__NVIC_GetActive+0x3c>)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	3380      	adds	r3, #128	; 0x80
 80011fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	e000      	b.n	8001212 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8001210:	2300      	movs	r3, #0
  }
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <USART2_IRQHandler>:
	_Bool gb_RX_Buffer_Overflow_UART2; // This flag is set on USART Receiver // buffer overflow
	char gb_rx_byte;
	char gb_RX_DATA_UART2[gb_RX_BUFFER_SIZE_UART2];

void USART2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	//  GB_UART_TxChar2('k');
	  if((__NVIC_GetActive(USART2_IRQn)) == 1)
 8001224:	2026      	movs	r0, #38	; 0x26
 8001226:	f7ff ffdb 	bl	80011e0 <__NVIC_GetActive>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d121      	bne.n	8001274 <USART2_IRQHandler+0x54>
    //check if we are here because of RXNE interrupt
         if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <USART2_IRQHandler+0x58>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01b      	beq.n	8001274 <USART2_IRQHandler+0x54>
                {
                      gb_rx_byte = USART2->DR; //fetch the data received
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <USART2_IRQHandler+0x58>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <USART2_IRQHandler+0x5c>)
 8001244:	701a      	strb	r2, [r3, #0]
                      gb_Rx_Buffer_UART2[gb_RX_Wr_Index_UART2]= gb_rx_byte;   /* put received char in buffer */
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <USART2_IRQHandler+0x60>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <USART2_IRQHandler+0x5c>)
 800124e:	7819      	ldrb	r1, [r3, #0]
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <USART2_IRQHandler+0x64>)
 8001252:	5499      	strb	r1, [r3, r2]
  		              if(++gb_RX_Wr_Index_UART2 > gb_RX_BUFFER_SIZE_UART2)
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <USART2_IRQHandler+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <USART2_IRQHandler+0x60>)
 800125e:	701a      	strb	r2, [r3, #0]
  		              gb_RX_Wr_Index_UART2 = 0;
  		              if(++gb_RX_Counter_UART2 > gb_RX_BUFFER_SIZE_UART2) /* keep a character count */
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <USART2_IRQHandler+0x68>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <USART2_IRQHandler+0x68>)
 800126a:	701a      	strb	r2, [r3, #0]
  		                   {
  			                    /* overflow check.. */
  			                    gb_RX_Counter_UART2 = gb_RX_BUFFER_SIZE_UART2; /* if too many chars came */
  			                  //  gb_RX_Buffer_Overflow_UART2 = 1;            /* in before they could be used */
  			                }                                          /* that could cause an error!! */
  			          gb_RX_No_of_byte_UART2=gb_RX_Counter_UART2 ;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <USART2_IRQHandler+0x68>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <USART2_IRQHandler+0x6c>)
 8001272:	701a      	strb	r2, [r3, #0]

  			          //printf("%d",gb_rx_byte);

                 }

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	2000085f 	.word	0x2000085f
 8001280:	20000204 	.word	0x20000204
 8001284:	20000760 	.word	0x20000760
 8001288:	20000206 	.word	0x20000206
 800128c:	20000207 	.word	0x20000207

08001290 <GB_getchar_UART2>:


/***********Niche Ring Buffer Functions *****/
/****reading from Interrupted Ring Buffer*/
char  GB_getchar_UART2()             // <--->   Serial.read()
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
	char gb_c;
	gb_c = gb_Rx_Buffer_UART2[gb_RX_Rd_Index_UART2]; /* get one from the buffer..*/
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <GB_getchar_UART2+0x40>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <GB_getchar_UART2+0x44>)
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	71fb      	strb	r3, [r7, #7]
	if(++gb_RX_Rd_Index_UART2 > gb_RX_BUFFER_SIZE_UART2) /* wrap the pointer */
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <GB_getchar_UART2+0x40>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <GB_getchar_UART2+0x40>)
 80012ac:	701a      	strb	r2, [r3, #0]
	gb_RX_Rd_Index_UART2 = 0;
	if(gb_RX_Counter_UART2)
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <GB_getchar_UART2+0x48>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <GB_getchar_UART2+0x32>
	gb_RX_Counter_UART2--; /* keep a count (buffer size) */
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <GB_getchar_UART2+0x48>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <GB_getchar_UART2+0x48>)
 80012c0:	701a      	strb	r2, [r3, #0]
	//GB_UART_TxChar1(gb_c);
	return gb_c ;//return char *
 80012c2:	79fb      	ldrb	r3, [r7, #7]
	//printString0("n \n ");
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000205 	.word	0x20000205
 80012d4:	20000760 	.word	0x20000760
 80012d8:	20000206 	.word	0x20000206

080012dc <GB_search_buffer>:

}


char* GB_search_buffer(const char* gb_search)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	char* gb_p;
	int gb_bufferlen = strlen((const char * )gb_RX_DATA_UART2);
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <GB_search_buffer+0x2c>)
 80012e6:	f7fe ff43 	bl	8000170 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	60bb      	str	r3, [r7, #8]
	if(gb_bufferlen < gb_RX_BUFFER_SIZE_UART2)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2bfe      	cmp	r3, #254	; 0xfe
 80012f2:	dc04      	bgt.n	80012fe <GB_search_buffer+0x22>
	gb_p= strstr ((const char *)gb_RX_DATA_UART2,gb_search);
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <GB_search_buffer+0x2c>)
 80012f8:	f002 fdb0 	bl	8003e5c <strstr>
 80012fc:	60f8      	str	r0, [r7, #12]
	//printString0(p);
	return (gb_p);
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000660 	.word	0x20000660

0800130c <GB_send_command>:
void GB_send_command(const char * gb_command)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	GB_printString2(gb_command);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fc05 	bl	8001b24 <GB_printString2>

}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <GB_RFR_UART2>:

int GB_RFR_UART2(const char * gb_rsp,unsigned int gb_timeout)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	unsigned long gb_timeIn = GB_millis();	// Timestamp coming into function
 800132e:	f000 facf 	bl	80018d0 <GB_millis>
 8001332:	60b8      	str	r0, [r7, #8]
	uint8_t gb_received = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 8001338:	22ff      	movs	r2, #255	; 0xff
 800133a:	2100      	movs	r1, #0
 800133c:	4815      	ldr	r0, [pc, #84]	; (8001394 <GB_RFR_UART2+0x70>)
 800133e:	f001 fecf 	bl	80030e0 <memset>
	//printString0(" Number of characters received : ");
	//decimel0(RX_No_of_byte_UART1);
	//printString0("\n");

	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 8001342:	e015      	b.n	8001370 <GB_RFR_UART2+0x4c>
	{
		//printString0("k\n");
		if(gb_RX_Counter_UART2)
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <GB_RFR_UART2+0x74>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d011      	beq.n	8001370 <GB_RFR_UART2+0x4c>
		{
			gb_RX_DATA_UART2[gb_received]= GB_getchar_UART2();
 800134c:	7bfc      	ldrb	r4, [r7, #15]
 800134e:	f7ff ff9f 	bl	8001290 <GB_getchar_UART2>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <GB_RFR_UART2+0x70>)
 8001358:	551a      	strb	r2, [r3, r4]
			//decimel0(received);
			//printString0(" ");
			//UART_TxChar0(RX_DATA_UART1[received]);
			//printString0("\n");
			gb_received++;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
			if(GB_search_buffer(gb_rsp)) return 1;
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffbb 	bl	80012dc <GB_search_buffer>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <GB_RFR_UART2+0x4c>
 800136c:	2301      	movs	r3, #1
 800136e:	e00d      	b.n	800138c <GB_RFR_UART2+0x68>
	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 8001370:	f000 faae 	bl	80018d0 <GB_millis>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8e1      	bhi.n	8001344 <GB_RFR_UART2+0x20>

		}
	}

	//printString0(RX_DATA_UART1);
	if (gb_received > 0) // If we received any characters
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <GB_RFR_UART2+0x66>
	return 0; // Return unkown response error code
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <GB_RFR_UART2+0x68>
	else // If we haven't received any characters
	return 2; // Return the timeout error code
 800138a:	2302      	movs	r3, #2

}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000660 	.word	0x20000660
 8001398:	20000206 	.word	0x20000206

0800139c <GB_esp8266_getmode>:
//Command ESP initialise functions in both client and webserver

int gb_CWMODE=0;

void GB_esp8266_getmode()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
	GB_send_command("AT+CWMODE?\r\n");
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <GB_esp8266_getmode+0x70>)
 80013a4:	f7ff ffb2 	bl	800130c <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 80013a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <GB_esp8266_getmode+0x74>)
 80013ae:	f7ff ffb9 	bl	8001324 <GB_RFR_UART2>
 80013b2:	60f8      	str	r0, [r7, #12]
	//printString0(RX_DATA_UART1);
	if(gb_rsp==1)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d123      	bne.n	8001402 <GB_esp8266_getmode+0x66>
	{
		//printString0(RX_DATA_UART1);
		//printString0("command is successfully send\n");
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 80013ba:	213a      	movs	r1, #58	; 0x3a
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <GB_esp8266_getmode+0x78>)
 80013be:	f002 fd2d 	bl	8003e1c <strchr>
 80013c2:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01b      	beq.n	8001402 <GB_esp8266_getmode+0x66>
		{
			char gb_mode = *(gb_p+1);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	71fb      	strb	r3, [r7, #7]
			gb_CWMODE= gb_mode-48;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3b30      	subs	r3, #48	; 0x30
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <GB_esp8266_getmode+0x7c>)
 80013d6:	6013      	str	r3, [r2, #0]
			if(gb_CWMODE==1) GB_printString1("Station mode selected\n");
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <GB_esp8266_getmode+0x7c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <GB_esp8266_getmode+0x4a>
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <GB_esp8266_getmode+0x80>)
 80013e2:	f000 fb0b 	bl	80019fc <GB_printString1>
			if(gb_CWMODE==2) GB_printString1("SoftAP mode selected\n");
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <GB_esp8266_getmode+0x7c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d102      	bne.n	80013f4 <GB_esp8266_getmode+0x58>
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <GB_esp8266_getmode+0x84>)
 80013f0:	f000 fb04 	bl	80019fc <GB_printString1>
			if(gb_CWMODE==3) GB_printString1("SoftAP+Station mode selected\n");
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <GB_esp8266_getmode+0x7c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d102      	bne.n	8001402 <GB_esp8266_getmode+0x66>
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <GB_esp8266_getmode+0x88>)
 80013fe:	f000 fafd 	bl	80019fc <GB_printString1>
	{
		//printString0("Error in receiving command (check the command) or timeout has happened\n");
		//esp8266_rst();
		//GB_printString1(gb_RX_DATA_UART2);
	}
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08007990 	.word	0x08007990
 8001410:	080079a0 	.word	0x080079a0
 8001414:	20000660 	.word	0x20000660
 8001418:	20000208 	.word	0x20000208
 800141c:	080079a4 	.word	0x080079a4
 8001420:	080079bc 	.word	0x080079bc
 8001424:	080079d4 	.word	0x080079d4

08001428 <GB_esp8266_connectiontype>:
void GB_esp8266_connectiontype()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
	GB_send_command("AT+CIPMUX?\r\n");
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <GB_esp8266_connectiontype+0x64>)
 8001430:	f7ff ff6c 	bl	800130c <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 8001434:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <GB_esp8266_connectiontype+0x68>)
 800143a:	f7ff ff73 	bl	8001324 <GB_RFR_UART2>
 800143e:	60f8      	str	r0, [r7, #12]
	if(gb_rsp==1)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <GB_esp8266_connectiontype+0x54>
	{
		// printString0("command is successfully send\n");
		char * gb_p = strchr(gb_RX_DATA_UART2, ':');
 8001446:	213a      	movs	r1, #58	; 0x3a
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <GB_esp8266_connectiontype+0x6c>)
 800144a:	f002 fce7 	bl	8003e1c <strchr>
 800144e:	60b8      	str	r0, [r7, #8]
		if(gb_p!=NULL)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d015      	beq.n	8001482 <GB_esp8266_connectiontype+0x5a>
		{
			char gb_mode = *(gb_p+1);
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	71fb      	strb	r3, [r7, #7]
			int gb_num = gb_mode-48;
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3b30      	subs	r3, #48	; 0x30
 8001460:	603b      	str	r3, [r7, #0]
			if(gb_num==0) GB_printString1("Single connection - configured as client\n");
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <GB_esp8266_connectiontype+0x46>
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <GB_esp8266_connectiontype+0x70>)
 800146a:	f000 fac7 	bl	80019fc <GB_printString1>
			if(gb_num==1) GB_printString1("multiple connection - configured as server\n");
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <GB_esp8266_connectiontype+0x5a>
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <GB_esp8266_connectiontype+0x74>)
 8001476:	f000 fac1 	bl	80019fc <GB_printString1>
	else
	{
		// printString0("Error in receiving response (check the command) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}
}
 800147a:	e002      	b.n	8001482 <GB_esp8266_connectiontype+0x5a>
		GB_printString1(gb_RX_DATA_UART2);
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <GB_esp8266_connectiontype+0x6c>)
 800147e:	f000 fabd 	bl	80019fc <GB_printString1>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	080079f4 	.word	0x080079f4
 8001490:	080079a0 	.word	0x080079a0
 8001494:	20000660 	.word	0x20000660
 8001498:	08007a04 	.word	0x08007a04
 800149c:	08007a30 	.word	0x08007a30

080014a0 <GB_esp8266_getAP>:
void GB_esp8266_getAP()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
	char gb_ssid[20];
	GB_send_command("AT+CWJAP?\r\n");
 80014a6:	4820      	ldr	r0, [pc, #128]	; (8001528 <GB_esp8266_getAP+0x88>)
 80014a8:	f7ff ff30 	bl	800130c <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK", 1000);
 80014ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <GB_esp8266_getAP+0x8c>)
 80014b2:	f7ff ff37 	bl	8001324 <GB_RFR_UART2>
 80014b6:	61f8      	str	r0, [r7, #28]
	if(gb_rsp==1)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d12d      	bne.n	800151a <GB_esp8266_getAP+0x7a>
	{

		if (strstr(gb_RX_DATA_UART2, "No AP") != NULL)   GB_printString1("No AP is connected\n");
 80014be:	491c      	ldr	r1, [pc, #112]	; (8001530 <GB_esp8266_getAP+0x90>)
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <GB_esp8266_getAP+0x94>)
 80014c2:	f002 fccb 	bl	8003e5c <strstr>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <GB_esp8266_getAP+0x32>
 80014cc:	481a      	ldr	r0, [pc, #104]	; (8001538 <GB_esp8266_getAP+0x98>)
 80014ce:	f000 fa95 	bl	80019fc <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 80014d2:	491a      	ldr	r1, [pc, #104]	; (800153c <GB_esp8266_getAP+0x9c>)
 80014d4:	4817      	ldr	r0, [pc, #92]	; (8001534 <GB_esp8266_getAP+0x94>)
 80014d6:	f002 fcc1 	bl	8003e5c <strstr>
 80014da:	61b8      	str	r0, [r7, #24]
		if(gb_p!=NULL)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01e      	beq.n	8001520 <GB_esp8266_getAP+0x80>
		{
			gb_p +=  strlen("+CWJAP") +2;
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	3308      	adds	r3, #8
 80014e6:	61bb      	str	r3, [r7, #24]
			char * gb_q=strchr(gb_p,'"');
 80014e8:	2122      	movs	r1, #34	; 0x22
 80014ea:	69b8      	ldr	r0, [r7, #24]
 80014ec:	f002 fc96 	bl	8003e1c <strchr>
 80014f0:	6178      	str	r0, [r7, #20]
			strncpy(gb_ssid,gb_p,gb_q-gb_p);
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	463b      	mov	r3, r7
 80014fc:	69b9      	ldr	r1, [r7, #24]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fc99 	bl	8003e36 <strncpy>
			GB_printString1("Connected to Wifi:");
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <GB_esp8266_getAP+0xa0>)
 8001506:	f000 fa79 	bl	80019fc <GB_printString1>
			GB_printString1(gb_ssid);
 800150a:	463b      	mov	r3, r7
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fa75 	bl	80019fc <GB_printString1>
			GB_printString1("\n");
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <GB_esp8266_getAP+0xa4>)
 8001514:	f000 fa72 	bl	80019fc <GB_printString1>
	{
		//printString0("Error in receiving response (check the command ) or timeout has happened\n");
		GB_printString1(gb_RX_DATA_UART2);
	}

}
 8001518:	e002      	b.n	8001520 <GB_esp8266_getAP+0x80>
		GB_printString1(gb_RX_DATA_UART2);
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <GB_esp8266_getAP+0x94>)
 800151c:	f000 fa6e 	bl	80019fc <GB_printString1>
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08007a5c 	.word	0x08007a5c
 800152c:	080079a0 	.word	0x080079a0
 8001530:	08007a68 	.word	0x08007a68
 8001534:	20000660 	.word	0x20000660
 8001538:	08007a70 	.word	0x08007a70
 800153c:	08007a84 	.word	0x08007a84
 8001540:	08007a8c 	.word	0x08007a8c
 8001544:	0800798c 	.word	0x0800798c

08001548 <GB_esp8266_setAP>:
void GB_esp8266_setAP(const char * gb_ssid, const char * gb_pass)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	char gb_setAP[40];
	sprintf(gb_setAP,"AT+CWJAP=\"%s\",\"%s\"\r\n",gb_ssid,gb_pass);
 8001552:	f107 0008 	add.w	r0, r7, #8
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4929      	ldr	r1, [pc, #164]	; (8001600 <GB_esp8266_setAP+0xb8>)
 800155c:	f002 fc3e 	bl	8003ddc <siprintf>


	GB_send_command(gb_setAP);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fed1 	bl	800130c <GB_send_command>
	int gb_rsp = GB_RFR_UART2("OK",16000);
 800156a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800156e:	4825      	ldr	r0, [pc, #148]	; (8001604 <GB_esp8266_setAP+0xbc>)
 8001570:	f7ff fed8 	bl	8001324 <GB_RFR_UART2>
 8001574:	63f8      	str	r0, [r7, #60]	; 0x3c


	if(gb_rsp==1)
 8001576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001578:	2b01      	cmp	r3, #1
 800157a:	d109      	bne.n	8001590 <GB_esp8266_setAP+0x48>
	{

		GB_printString1("WiFi is  connected to :");
 800157c:	4822      	ldr	r0, [pc, #136]	; (8001608 <GB_esp8266_setAP+0xc0>)
 800157e:	f000 fa3d 	bl	80019fc <GB_printString1>
		GB_printString1(gb_ssid);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fa3a 	bl	80019fc <GB_printString1>
		GB_printString1("\n");
 8001588:	4820      	ldr	r0, [pc, #128]	; (800160c <GB_esp8266_setAP+0xc4>)
 800158a:	f000 fa37 	bl	80019fc <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
			if(gb_num==4) GB_printString1("connection failed \n");
		}
	}
}
 800158e:	e033      	b.n	80015f8 <GB_esp8266_setAP+0xb0>
		GB_printString1("Error in connecting to :");
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <GB_esp8266_setAP+0xc8>)
 8001592:	f000 fa33 	bl	80019fc <GB_printString1>
		GB_printString1(gb_ssid);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fa30 	bl	80019fc <GB_printString1>
		GB_printString1("\n");
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <GB_esp8266_setAP+0xc4>)
 800159e:	f000 fa2d 	bl	80019fc <GB_printString1>
		char * gb_p = strstr(gb_RX_DATA_UART2,"+CWJAP:");
 80015a2:	491c      	ldr	r1, [pc, #112]	; (8001614 <GB_esp8266_setAP+0xcc>)
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <GB_esp8266_setAP+0xd0>)
 80015a6:	f002 fc59 	bl	8003e5c <strstr>
 80015aa:	63b8      	str	r0, [r7, #56]	; 0x38
		if(gb_p!=NULL)
 80015ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d022      	beq.n	80015f8 <GB_esp8266_setAP+0xb0>
			gb_p+= strlen("+CWJAP:");
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	3307      	adds	r3, #7
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
			char gb_error_code = *gb_p;
 80015b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			int gb_num = gb_error_code-48;
 80015c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015c4:	3b30      	subs	r3, #48	; 0x30
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
			if(gb_num==1) GB_printString1("Connection timeout \n");
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d102      	bne.n	80015d4 <GB_esp8266_setAP+0x8c>
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <GB_esp8266_setAP+0xd4>)
 80015d0:	f000 fa14 	bl	80019fc <GB_printString1>
			if(gb_num==2) GB_printString1("Wrong password \n");
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d102      	bne.n	80015e0 <GB_esp8266_setAP+0x98>
 80015da:	4811      	ldr	r0, [pc, #68]	; (8001620 <GB_esp8266_setAP+0xd8>)
 80015dc:	f000 fa0e 	bl	80019fc <GB_printString1>
			if(gb_num==3) GB_printString1("cannot find the target AP\n");
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d102      	bne.n	80015ec <GB_esp8266_setAP+0xa4>
 80015e6:	480f      	ldr	r0, [pc, #60]	; (8001624 <GB_esp8266_setAP+0xdc>)
 80015e8:	f000 fa08 	bl	80019fc <GB_printString1>
			if(gb_num==4) GB_printString1("connection failed \n");
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d102      	bne.n	80015f8 <GB_esp8266_setAP+0xb0>
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <GB_esp8266_setAP+0xe0>)
 80015f4:	f000 fa02 	bl	80019fc <GB_printString1>
}
 80015f8:	bf00      	nop
 80015fa:	3740      	adds	r7, #64	; 0x40
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08007aa0 	.word	0x08007aa0
 8001604:	080079a0 	.word	0x080079a0
 8001608:	08007ab8 	.word	0x08007ab8
 800160c:	0800798c 	.word	0x0800798c
 8001610:	08007ad0 	.word	0x08007ad0
 8001614:	08007a84 	.word	0x08007a84
 8001618:	20000660 	.word	0x20000660
 800161c:	08007aec 	.word	0x08007aec
 8001620:	08007b04 	.word	0x08007b04
 8001624:	08007b18 	.word	0x08007b18
 8001628:	08007b34 	.word	0x08007b34

0800162c <GB_esp8266_initialise_client>:
	int gb_rsp = GB_RFR_UART2("OK",4000);
	if(gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
}

void GB_esp8266_initialise_client()
	{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

		GB_esp8266_getmode();
 8001630:	f7ff feb4 	bl	800139c <GB_esp8266_getmode>
		GB_esp8266_connectiontype();
 8001634:	f7ff fef8 	bl	8001428 <GB_esp8266_connectiontype>
		GB_esp8266_setAP("JioFiber 2.4ghz","Mansi5481");
 8001638:	4905      	ldr	r1, [pc, #20]	; (8001650 <GB_esp8266_initialise_client+0x24>)
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <GB_esp8266_initialise_client+0x28>)
 800163c:	f7ff ff84 	bl	8001548 <GB_esp8266_setAP>
		GB_esp8266_getAP();
 8001640:	f7ff ff2e 	bl	80014a0 <GB_esp8266_getAP>

		GB_printString1("\nSETAP Command\n");
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <GB_esp8266_initialise_client+0x2c>)
 8001646:	f000 f9d9 	bl	80019fc <GB_printString1>
		// esp8266_setAP("KG","12345678");
		//esp8266_disconnect();
		//esp8266_listAP();
		//esp8266_IPadress();
		//esp8266_rst();
	}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	08007cdc 	.word	0x08007cdc
 8001654:	08007ce8 	.word	0x08007ce8
 8001658:	08007cf8 	.word	0x08007cf8

0800165c <GB_esp8266_connectTCPserver>:
//		//esp8266_rst();
//	}

		//AT+CIPSTART
		void GB_esp8266_connectTCPserver(const char * gb_url,int gb_port)
		{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09c      	sub	sp, #112	; 0x70
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
			char gb_buff[100];
			sprintf(gb_buff,"AT+CIPSTART=\"TCP\",\"%s\",%u\r\n",gb_url,gb_port);
 8001666:	f107 0008 	add.w	r0, r7, #8
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <GB_esp8266_connectTCPserver+0x50>)
 8001670:	f002 fbb4 	bl	8003ddc <siprintf>
			GB_send_command(gb_buff);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe47 	bl	800130c <GB_send_command>
			int gb_rsp = GB_RFR_UART2("OK", 2000);
 800167e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <GB_esp8266_connectTCPserver+0x54>)
 8001684:	f7ff fe4e 	bl	8001324 <GB_RFR_UART2>
 8001688:	66f8      	str	r0, [r7, #108]	; 0x6c
			if(gb_rsp==1) GB_printString1("\n Successfully connected to server \n");
 800168a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800168c:	2b01      	cmp	r3, #1
 800168e:	d102      	bne.n	8001696 <GB_esp8266_connectTCPserver+0x3a>
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <GB_esp8266_connectTCPserver+0x58>)
 8001692:	f000 f9b3 	bl	80019fc <GB_printString1>
			if(gb_rsp==0) GB_printString1("\n Already connected to server \n");
 8001696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <GB_esp8266_connectTCPserver+0x46>
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <GB_esp8266_connectTCPserver+0x5c>)
 800169e:	f000 f9ad 	bl	80019fc <GB_printString1>
		}
 80016a2:	bf00      	nop
 80016a4:	3770      	adds	r7, #112	; 0x70
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08007d08 	.word	0x08007d08
 80016b0:	08007d24 	.word	0x08007d24
 80016b4:	08007d28 	.word	0x08007d28
 80016b8:	08007d50 	.word	0x08007d50

080016bc <GB_esp8266_commandfloat>:
			GB_printString1(gb_get_command);
			GB_printString1("\n");
			return (char * )gb_get_command;
		}
		const char * GB_esp8266_commandfloat(const char * gb_urlpath, float gb_val)
			{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
				//char get_command[100];
				memset(gb_get_command, '\0',sizeof(gb_get_command));
 80016c6:	2264      	movs	r2, #100	; 0x64
 80016c8:	2100      	movs	r1, #0
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <GB_esp8266_commandfloat+0x44>)
 80016cc:	f001 fd08 	bl	80030e0 <memset>
				sprintf(gb_get_command,"GET %s=%.2f\r\n",gb_urlpath,gb_val);
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7fe feb9 	bl	8000448 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9cd 2300 	strd	r2, r3, [sp]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4908      	ldr	r1, [pc, #32]	; (8001704 <GB_esp8266_commandfloat+0x48>)
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <GB_esp8266_commandfloat+0x44>)
 80016e4:	f002 fb7a 	bl	8003ddc <siprintf>
				GB_printString1(gb_get_command);
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <GB_esp8266_commandfloat+0x44>)
 80016ea:	f000 f987 	bl	80019fc <GB_printString1>
				GB_printString1("\n");
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <GB_esp8266_commandfloat+0x4c>)
 80016f0:	f000 f984 	bl	80019fc <GB_printString1>
				return (char * )gb_get_command;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <GB_esp8266_commandfloat+0x44>)
			}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000860 	.word	0x20000860
 8001704:	08007d8c 	.word	0x08007d8c
 8001708:	08007d88 	.word	0x08007d88

0800170c <GB_esp8266_cipsendfloat>:
			GB_printString1( gb_RX_DATA_UART2);

		}

		void GB_esp8266_cipsendfloat(float  gb_val, const char *  gb_urlpath)
		{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]

			char  gb_send[15];
			int  gb_get_command_length = strlen(GB_esp8266_commandfloat( gb_urlpath,gb_val));
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7ff ffcf 	bl	80016bc <GB_esp8266_commandfloat>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd25 	bl	8000170 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	61fb      	str	r3, [r7, #28]
			//decimel0(strlen(esp8266_command(urlpath,senseval)));
			//printString0("\n");
			//printString0(esp8266_command(urlpath));
			//printString0("\n");
			sprintf(gb_send,"AT+CIPSEND=%u\r\n",gb_get_command_length);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <GB_esp8266_cipsendfloat+0x44>)
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fb52 	bl	8003ddc <siprintf>
			GB_send_command(gb_send);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fde5 	bl	800130c <GB_send_command>
			//printString0(send);
		//	int gb_rsp = GB_RFR_UART2(">",2000);
			//if (rsp==1) printString0(RX_DATA_UART1);
			GB_printString1(gb_RX_DATA_UART2);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <GB_esp8266_cipsendfloat+0x48>)
 8001744:	f000 f95a 	bl	80019fc <GB_printString1>

		}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08007da8 	.word	0x08007da8
 8001754:	20000660 	.word	0x20000660

08001758 <GB_esp8266_tcpgetcommandfloat>:
			GB_printString1("\n");
			delay_ms(100);
			GB_printString1(gb_RX_DATA_UART2);
		}//GET COMMAND
		void GB_esp8266_tcpgetcommandfloat(const char * gb_urlpath, float gb_val)   //when field has to be updated like updating the sendor value.
				{    char gb_buff[100];
 8001758:	b580      	push	{r7, lr}
 800175a:	b09e      	sub	sp, #120	; 0x78
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
					memset(gb_buff, '\0',sizeof(gb_buff));
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fcb8 	bl	80030e0 <memset>
					sprintf(gb_buff,"GET %s=%.2f\r\n",gb_urlpath,gb_val);
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7fe fe69 	bl	8000448 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	f107 000c 	add.w	r0, r7, #12
 800177e:	e9cd 2300 	strd	r2, r3, [sp]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	490f      	ldr	r1, [pc, #60]	; (80017c4 <GB_esp8266_tcpgetcommandfloat+0x6c>)
 8001786:	f002 fb29 	bl	8003ddc <siprintf>
					GB_printString1(gb_buff);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f934 	bl	80019fc <GB_printString1>
					GB_send_command(gb_buff);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fdb7 	bl	800130c <GB_send_command>
					GB_RFR_UART2("CLOSE", 2000);
 800179e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <GB_esp8266_tcpgetcommandfloat+0x70>)
 80017a4:	f7ff fdbe 	bl	8001324 <GB_RFR_UART2>
					GB_printString1("\n");
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <GB_esp8266_tcpgetcommandfloat+0x74>)
 80017aa:	f000 f927 	bl	80019fc <GB_printString1>
					delay_ms(100);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f000 fcde 	bl	8002170 <delay_ms>
					GB_printString1(gb_RX_DATA_UART2);
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <GB_esp8266_tcpgetcommandfloat+0x78>)
 80017b6:	f000 f921 	bl	80019fc <GB_printString1>
				}
 80017ba:	bf00      	nop
 80017bc:	3770      	adds	r7, #112	; 0x70
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	08007d8c 	.word	0x08007d8c
 80017c8:	08007db8 	.word	0x08007db8
 80017cc:	08007d88 	.word	0x08007d88
 80017d0:	20000660 	.word	0x20000660

080017d4 <__NVIC_SetPriorityGrouping>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f7ff ffc2 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <SysTick_Handler>:
//variable for millis counter
volatile uint32_t GB_counter;


void SysTick_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	//GB_printString1("gup\n");
  GB_counter++;    // equivalent to HAL_IncTick(void)
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Handler+0x18>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <SysTick_Handler+0x18>)
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200008c4 	.word	0x200008c4

080018d0 <GB_millis>:


//equivalent to  HAL_GetTick(void)
uint32_t GB_millis()
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	//GB_printString1("kun\n");
  return GB_counter;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <GB_millis+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	200008c4 	.word	0x200008c4

080018e4 <systick_millis>:

void systick_millis(uint32_t clk_val)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <systick_millis+0x34>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a09      	ldr	r2, [pc, #36]	; (8001918 <systick_millis+0x34>)
 80018f2:	f043 0312 	orr.w	r3, r3, #18
 80018f6:	6013      	str	r3, [r2, #0]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f7ff ff6b 	bl	80017d4 <__NVIC_SetPriorityGrouping>
	SysTick_Config(clk_val);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb6 	bl	8001870 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,0);
 8001904:	2100      	movs	r1, #0
 8001906:	f04f 30ff 	mov.w	r0, #4294967295
 800190a:	f7ff ff87 	bl	800181c <__NVIC_SetPriority>

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000

0800191c <GB_uart_pin_conf1>:
#include <string.h>
#include "stdio.h"
/**************STM32 UART1 ******************/
//PA10- RX, PA9-TX
void GB_uart_pin_conf1()
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <GB_uart_pin_conf1+0x48>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <GB_uart_pin_conf1+0x48>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192a:	6193      	str	r3, [r2, #24]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <GB_uart_pin_conf1+0x48>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <GB_uart_pin_conf1+0x48>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA9 as output*/
	 GPIOA->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 800193e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001942:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH |= (GPIO_CRH_CNF9_1);
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 800194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194e:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH &= ~(GPIO_CRH_CNF9_0);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <GB_uart_pin_conf1+0x4c>)
 8001956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800195a:	6053      	str	r3, [r2, #4]
	 /*
	   * PIN PA10 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800

0800196c <GB_uart_boud_rate1>:

void GB_uart_boud_rate1()
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	//DIV_Fraction = 0.36*16 = 0d5.76 = 0d6 (Nearest Whole number) = 0x6
	//DIV_Mantissa = 0d17 = 0x11
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
    // USART1->BRR = 0x116;
	USART1->BRR = 0xd05;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <GB_uart_boud_rate1+0x14>)
 8001972:	f640 5205 	movw	r2, #3333	; 0xd05
 8001976:	609a      	str	r2, [r3, #8]

}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40013800 	.word	0x40013800

08001984 <GB_uart_init1>:
void GB_uart_init1()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0

	GB_uart_pin_conf1();
 8001988:	f7ff ffc8 	bl	800191c <GB_uart_pin_conf1>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART1->CR1 = 0x0000;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <GB_uart_init1+0x48>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART1->CR1 |= USART_CR1_UE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <GB_uart_init1+0x48>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <GB_uart_init1+0x48>)
 8001998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199c:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_M;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <GB_uart_init1+0x48>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <GB_uart_init1+0x48>)
 80019a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a8:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	//USART1->CR1 |= USART_CR1_RXNEIE;

	//enable transmitter
	USART1->CR1 |= USART_CR1_TE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <GB_uart_init1+0x48>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <GB_uart_init1+0x48>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART1->CR1 |= USART_CR1_RE;
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <GB_uart_init1+0x48>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <GB_uart_init1+0x48>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate1();
 80019c2:	f7ff ffd3 	bl	800196c <GB_uart_boud_rate1>


}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40013800 	.word	0x40013800

080019d0 <GB_UART_TxChar1>:
void GB_UART_TxChar1(uint32_t gb_byte)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	while(!(USART1->SR & USART_SR_TXE));
 80019d8:	bf00      	nop
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <GB_UART_TxChar1+0x28>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f9      	beq.n	80019da <GB_UART_TxChar1+0xa>
	USART1->DR = gb_byte;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <GB_UART_TxChar1+0x28>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6053      	str	r3, [r2, #4]

}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40013800 	.word	0x40013800

080019fc <GB_printString1>:
{
	while(!(USART2->SR & USART_SR_RXNE));
	return USART2->DR;
}
void GB_printString1(const char *gb_myString)      /////to print any string
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 8001a04:	e006      	b.n	8001a14 <GB_printString1+0x18>
	GB_UART_TxChar1(*gb_myString++);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffde 	bl	80019d0 <GB_UART_TxChar1>
	while (*gb_myString)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f4      	bne.n	8001a06 <GB_printString1+0xa>
	while(!(USART1->SR & USART_SR_TC));
 8001a1c:	bf00      	nop
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <GB_printString1+0x38>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f9      	beq.n	8001a1e <GB_printString1+0x22>

}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800

08001a38 <GB_uart_pin_conf2>:


//************************STM32- UART2 functions*******************//
//PA3- RX, PA2-TX
void GB_uart_pin_conf2()
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <GB_uart_pin_conf2+0x48>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <GB_uart_pin_conf2+0x48>)
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	61d3      	str	r3, [r2, #28]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <GB_uart_pin_conf2+0x48>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <GB_uart_pin_conf2+0x48>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA2 as output*/
	 GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a5e:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL |= (GPIO_CRL_CNF2_1);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6a:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <GB_uart_pin_conf2+0x4c>)
 8001a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
	 /*
	   * PIN PA3 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010800 	.word	0x40010800

08001a88 <GB_uart_boud_rate2>:

void GB_uart_boud_rate2()
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	//usartdiv = 0d208.33
	//DIV_Fraction = 0.33*16 = 0d5.28 = 0d5(Nearest whole number) = 0x5
	//DIV_Mantissa = 0d208 = 0xd0
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
     USART2->BRR = 0x116;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <GB_uart_boud_rate2+0x14>)
 8001a8e:	f44f 728b 	mov.w	r2, #278	; 0x116
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <GB_uart_init2>:
void GB_uart_init2()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

	GB_uart_pin_conf2();
 8001aa4:	f7ff ffc8 	bl	8001a38 <GB_uart_pin_conf2>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART2->CR1 = 0x0000;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <GB_uart_init2+0x54>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART2->CR1 |= USART_CR1_UE;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <GB_uart_init2+0x54>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <GB_uart_init2+0x54>)
 8001ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab8:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~USART_CR1_M;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <GB_uart_init2+0x54>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <GB_uart_init2+0x54>)
 8001ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac4:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	USART2->CR1 |= USART_CR1_RXNEIE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <GB_uart_init2+0x54>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <GB_uart_init2+0x54>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	60d3      	str	r3, [r2, #12]

	//enable transmitter
	USART2->CR1 |= USART_CR1_TE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <GB_uart_init2+0x54>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <GB_uart_init2+0x54>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART2->CR1 |= USART_CR1_RE;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <GB_uart_init2+0x54>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <GB_uart_init2+0x54>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate2();
 8001aea:	f7ff ffcd 	bl	8001a88 <GB_uart_boud_rate2>


}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40004400 	.word	0x40004400

08001af8 <GB_UART_TxChar2>:
void GB_UART_TxChar2(uint32_t gb_byte)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & USART_SR_TXE));
 8001b00:	bf00      	nop
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <GB_UART_TxChar2+0x28>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f9      	beq.n	8001b02 <GB_UART_TxChar2+0xa>
	USART2->DR = gb_byte;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <GB_UART_TxChar2+0x28>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6053      	str	r3, [r2, #4]

}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40004400 	.word	0x40004400

08001b24 <GB_printString2>:

void GB_printString2(const char *gb_myString)      /////to print any string
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 8001b2c:	e006      	b.n	8001b3c <GB_printString2+0x18>
	GB_UART_TxChar2(*gb_myString++);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ffde 	bl	8001af8 <GB_UART_TxChar2>
	while (*gb_myString)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f4      	bne.n	8001b2e <GB_printString2+0xa>
	while(!(USART2->SR & USART_SR_TC));
 8001b44:	bf00      	nop
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <GB_printString2+0x38>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <GB_printString2+0x22>

}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40004400 	.word	0x40004400

08001b60 <gb_i2c2_pin_config>:
#include <gb_i2c.h>
#include "stm32f1xx.h"
#include "stdio.h"
//PB10-SCL,PB11-SDA
void gb_i2c2_pin_config()
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0


	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <gb_i2c2_pin_config+0x54>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <gb_i2c2_pin_config+0x54>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <gb_i2c2_pin_config+0x54>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <gb_i2c2_pin_config+0x54>)
 8001b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b7a:	61d3      	str	r3, [r2, #28]


	//PB10 SCL will be set as alternate function open drain
	GPIOB->CRH |= GPIO_CRH_MODE10_0 | GPIO_CRH_MODE10_1;      //Output Mode
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b86:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF10_1 | GPIO_CRH_CNF10_0;         //Alternate Function
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b8e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001b92:	6053      	str	r3, [r2, #4]

 //PB11 SDA will be set as alternate function open drain
	GPIOB->CRH |= GPIO_CRH_MODE11_0 | GPIO_CRH_MODE11_1;     //Output Mode
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001b9a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001b9e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF11_1 | GPIO_CRH_CNF11_0;         //Alternate Function
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <gb_i2c2_pin_config+0x58>)
 8001ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001baa:	6053      	str	r3, [r2, #4]

}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <gb_i2c2_master_init>:
uint32_t gb_read_reg =0;
void gb_i2c2_master_init()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	gb_i2c2_pin_config();
 8001bc0:	f7ff ffce 	bl	8001b60 <gb_i2c2_pin_config>

	// configure i2c_cr2 register for peripheral input clock: FREQ[] bits //
I2C2->CR2 = 0x20; //we have to set FREQ according to the frequency of our core
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	605a      	str	r2, [r3, #4]
                  //that is 32MHZ in our case 0x20 = 32

//configure i2c_clock control register i2c_ccr
I2C2->CCR = 0x140;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001bcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bd0:	61da      	str	r2, [r3, #28]

	//configure i2c_trise register(i2c_trise)
I2C2->TRISE = 0x21;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001bd4:	2221      	movs	r2, #33	; 0x21
 8001bd6:	621a      	str	r2, [r3, #32]
	//program the i2c_cr1 register to enable the peripheral

	I2C2->CR1 |= I2C_CR1_PE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

	if((I2C2->SR2 & I2C_SR2_BUSY) == 1)
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <gb_i2c2_master_init+0x3c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <gb_i2c2_master_init+0x38>
		gb_i2c2_master_stop_generation();
 8001bf0:	f000 f860 	bl	8001cb4 <gb_i2c2_master_stop_generation>


}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005800 	.word	0x40005800

08001bfc <gb_i2c2_start_condition_w>:
//when system  generates start signal , interface automatically switches to master mode
//MSL bit will tell whether entered in master mode or not
//SB bit to be in while loop for successful transmission of start bit

void gb_i2c2_start_condition_w() //EV5
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
	//generate the start condition for starting the communication
		I2C2->CR1 |= I2C_CR1_START;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <gb_i2c2_start_condition_w+0x30>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <gb_i2c2_start_condition_w+0x30>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
		while(!(I2C2->SR1 & I2C_SR1_SB));  // wait to get transfered to master mode
 8001c0c:	bf00      	nop
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <gb_i2c2_start_condition_w+0x30>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f9      	beq.n	8001c0e <gb_i2c2_start_condition_w+0x12>
		gb_read_reg = I2C2->SR1;
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <gb_i2c2_start_condition_w+0x30>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <gb_i2c2_start_condition_w+0x34>)
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40005800 	.word	0x40005800
 8001c30:	2000020c 	.word	0x2000020c

08001c34 <gb_i2c2_address_send_w>:
 * In 7-bit addressing mode,
– To enter Transmitter mode, a master sends the slave address with LSB reset.
– To enter Receiver mode, a master sends the slave address with LSB set.
 * */
void gb_i2c2_address_send_w(uint8_t gb_slave_address)//EV6
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]


	I2C2->DR = gb_slave_address;//Write slave address on I2C data bus
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <gb_i2c2_address_send_w+0x48>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	6113      	str	r3, [r2, #16]
	while(!(I2C2->SR1 & I2C_SR1_TXE));
 8001c44:	bf00      	nop
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <gb_i2c2_address_send_w+0x48>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f9      	beq.n	8001c46 <gb_i2c2_address_send_w+0x12>
	while(!(I2C2->SR1 & I2C_SR1_ADDR));  // Wait till address byte is being transmitted: ADDR bit set on succesful transmission of address
 8001c52:	bf00      	nop
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <gb_i2c2_address_send_w+0x48>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f9      	beq.n	8001c54 <gb_i2c2_address_send_w+0x20>

	//Clearing the ADDR bit
	gb_read_reg = I2C2->SR1;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <gb_i2c2_address_send_w+0x48>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <gb_i2c2_address_send_w+0x4c>)
 8001c66:	6013      	str	r3, [r2, #0]
	gb_read_reg = I2C2->SR2;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <gb_i2c2_address_send_w+0x48>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <gb_i2c2_address_send_w+0x4c>)
 8001c6e:	6013      	str	r3, [r2, #0]

	//while(!(I2C2->SR1 & I2C_SR1_TXE)); //(EV8_1)wait for data register to get empty on transmission of data
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40005800 	.word	0x40005800
 8001c80:	2000020c 	.word	0x2000020c

08001c84 <gb_i2c2_master_send_byte>:
void gb_i2c2_master_send_byte(uint8_t gb_data)//EV8
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	I2C2->DR = gb_data; // send data byte on data register
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <gb_i2c2_master_send_byte+0x2c>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	6113      	str	r3, [r2, #16]
	while(!(I2C2->SR1 & I2C_SR1_TXE));  //wait for data register to get empty on transmission of data
 8001c94:	bf00      	nop
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <gb_i2c2_master_send_byte+0x2c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f9      	beq.n	8001c96 <gb_i2c2_master_send_byte+0x12>
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40005800 	.word	0x40005800

08001cb4 <gb_i2c2_master_stop_generation>:

	return data;
}

void gb_i2c2_master_stop_generation()
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	I2C2->CR1 |= I2C_CR1_STOP;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <gb_i2c2_master_stop_generation+0x18>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <gb_i2c2_master_stop_generation+0x18>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6013      	str	r3, [r2, #0]

}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40005800 	.word	0x40005800

08001cd0 <MCO_pin_conf>:
 * 5) Enable the PLL source and wait for it to become stable
 * 6) Enable the Clock source and wait for it to be set
 */

void MCO_pin_conf()
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <MCO_pin_conf+0x3c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <MCO_pin_conf+0x3c>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6193      	str	r3, [r2, #24]
				 GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MCO_pin_conf+0x40>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <MCO_pin_conf+0x40>)
 8001ce6:	f023 030f 	bic.w	r3, r3, #15
 8001cea:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
				 GPIOA->CRH |= ( GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MCO_pin_conf+0x40>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <MCO_pin_conf+0x40>)
 8001cf2:	f043 0303 	orr.w	r3, r3, #3
 8001cf6:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO OUTPUT MODE AS alternate function push-pull
				 GPIOA->CRH |= ((GPIO_CRH_CNF8_1) | ~(GPIO_CRH_CNF8_0));
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <MCO_pin_conf+0x40>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <MCO_pin_conf+0x40>)
 8001cfe:	f063 0304 	orn	r3, r3, #4
 8001d02:	6053      	str	r3, [r2, #4]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <system_clk>:

void system_clk()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	//ENABLE HSE & WAIT FOR HSE TO BECOME READY
	RCC->CR |= RCC_CR_HSEON ;   // HSE IS 8MHZ
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <system_clk+0x9c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <system_clk+0x9c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY))
 8001d24:	bf00      	nop
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <system_clk+0x9c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f9      	beq.n	8001d26 <system_clk+0x12>
		 ;
	//configure flash prefetch and the latency related
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <system_clk+0xa0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <system_clk+0xa0>)
 8001d38:	f043 0312 	orr.w	r3, r3, #18
 8001d3c:	6013      	str	r3, [r2, #0]
	// CONFIGURE PLL AND Buses(AHB,APB1,APB2)
	//PLL SOURCE: HERE  HSE IS USED AS SOURCE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <system_clk+0x9c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <system_clk+0x9c>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6053      	str	r3, [r2, #4]
	//HSE DEVIDER FOR PLL(IF HSE IS USED AS SOURCE FOR PLL) : NOT DIVIDING CLOCK
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;  // SO INPUT TO PLL IS 8MHZ
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <system_clk+0x9c>)
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <system_clk+0x9c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	6053      	str	r3, [r2, #4]
	//PLL MULTIPLIER: HERE I AM MULTIPLYING HSE OUTPUT WITH 4
	RCC->CFGR |= RCC_CFGR_PLLMULL4; //SO OUTPUT FROM PLL IS 32MHZ
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <system_clk+0x9c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <system_clk+0x9c>)
 8001d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d5c:	6053      	str	r3, [r2, #4]
	//BUS CLOCK CONFIGURE(APB1,APB2,AHB): NOT DIVIDING
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);  // all buses runs at 32MHZ
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <system_clk+0x9c>)
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <system_clk+0x9c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	6053      	str	r3, [r2, #4]
	//ENABLE THE PLL
	RCC->CR |= RCC_CR_PLLON;
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <system_clk+0x9c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <system_clk+0x9c>)
 8001d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d70:	6013      	str	r3, [r2, #0]
	//WAIT FOR PLL TO SET
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8001d72:	bf00      	nop
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <system_clk+0x9c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f9      	beq.n	8001d74 <system_clk+0x60>
			;

	 //ENABLE SYSTEMCLK AND WAIT
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <system_clk+0x9c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <system_clk+0x9c>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6053      	str	r3, [r2, #4]
	 while(!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 8001d8c:	bf00      	nop
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <system_clk+0x9c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f9      	beq.n	8001d8e <system_clk+0x7a>
	 		 ;

	 MCO_pin_conf();
 8001d9a:	f7ff ff99 	bl	8001cd0 <MCO_pin_conf>
	 //CLOCK OUTPUT ON MCO PIN
	 RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <system_clk+0x9c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <system_clk+0x9c>)
 8001da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001da8:	6053      	str	r3, [r2, #4]
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40022000 	.word	0x40022000

08001db8 <ssd1306_init>:

/* Private variable */
static GB_SSD1306_t GB_SSD1306;

void ssd1306_init()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

	gb_i2c2_master_init();
 8001dbc:	f7ff fefe 	bl	8001bbc <gb_i2c2_master_init>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFF); //0xAE
 8001dc0:	20ae      	movs	r0, #174	; 0xae
 8001dc2:	f000 f855 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_CLOCK_DIV); //0xD5
 8001dc6:	20d5      	movs	r0, #213	; 0xd5
 8001dc8:	f000 f852 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x80);// A[7:4] = 1000, A[3:0] = 0000(clock divide ratio = 1)
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	f000 f84f 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_MULTIPLEX_RATIO); //0xA8
 8001dd2:	20a8      	movs	r0, #168	; 0xa8
 8001dd4:	f000 f84c 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x3F);
 8001dd8:	203f      	movs	r0, #63	; 0x3f
 8001dda:	f000 f849 	bl	8001e70 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_DISPLAY_OFFSET); //0xD3
 8001dde:	20d3      	movs	r0, #211	; 0xd3
 8001de0:	f000 f846 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x00); //Display start line starts from COM0 only, that is from ROW0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 f843 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40 | 0x00); //Display Start line: starting address of display RAM, by selecting a value from 0 to 63.
 8001dea:	2040      	movs	r0, #64	; 0x40
 8001dec:	f000 f840 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CHARGEUP);//0x8D We use internal charge pump
 8001df0:	208d      	movs	r0, #141	; 0x8d
 8001df2:	f000 f83d 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x14);
 8001df6:	2014      	movs	r0, #20
 8001df8:	f000 f83a 	bl	8001e70 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_SET_MEMORY_ADDRESSING_COMMAND); //0x20
 8001dfc:	2020      	movs	r0, #32
 8001dfe:	f000 f837 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_HORIZONTAL_ADDRESSING); //0x00
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f834 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_SEGMENT_REMAPPING_COM127_SEG0); //0xA0
 8001e08:	20a1      	movs	r0, #161	; 0xa1
 8001e0a:	f000 f831 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_SCAN_DIRECTION_REMAPPED_MODE); //0xC8
 8001e0e:	20c8      	movs	r0, #200	; 0xc8
 8001e10:	f000 f82e 	bl	8001e70 <ssd1306_sendcommand>


	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_COMMAND); //0xDA
 8001e14:	20da      	movs	r0, #218	; 0xda
 8001e16:	f000 f82b 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COM_HARDWARE_CONFIG_ALTERNATE_DISABLE_REMAP);//0x02
 8001e1a:	2012      	movs	r0, #18
 8001e1c:	f000 f828 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_CONTRAST); //0x81
 8001e20:	2081      	movs	r0, #129	; 0x81
 8001e22:	f000 f825 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xCF);
 8001e26:	20cf      	movs	r0, #207	; 0xcf
 8001e28:	f000 f822 	bl	8001e70 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PRECHARGE);//0xD9
 8001e2c:	20d9      	movs	r0, #217	; 0xd9
 8001e2e:	f000 f81f 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0xF1);
 8001e32:	20f1      	movs	r0, #241	; 0xf1
 8001e34:	f000 f81c 	bl	8001e70 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_VCOMH_SELECT_COMMAND);
 8001e38:	20db      	movs	r0, #219	; 0xdb
 8001e3a:	f000 f819 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(0x40); // to be checked
 8001e3e:	2040      	movs	r0, #64	; 0x40
 8001e40:	f000 f816 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_RESUME);//0xA4
 8001e44:	20a4      	movs	r0, #164	; 0xa4
 8001e46:	f000 f813 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_NORMAL_DISPLAY); //0xA6
 8001e4a:	20a6      	movs	r0, #166	; 0xa6
 8001e4c:	f000 f810 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_DISPLAY_ON);
 8001e50:	20af      	movs	r0, #175	; 0xaf
 8001e52:	f000 f80d 	bl	8001e70 <ssd1306_sendcommand>
	gb_i2c2_master_stop_generation(); // STOP Condition is generated
	delay_ms(100);
	*/

	/* Set default values */
		GB_SSD1306.CurrentX = 0;
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <ssd1306_init+0xb4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]
		GB_SSD1306.CurrentY = 0;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <ssd1306_init+0xb4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	GB_SSD1306.Initialized = 1;
 8001e62:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <ssd1306_init+0xb4>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	715a      	strb	r2, [r3, #5]

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000610 	.word	0x20000610

08001e70 <ssd1306_sendcommand>:

void ssd1306_sendcommand(uint8_t command)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
	gb_i2c2_start_condition_w(); // Start Condition For Writing
 8001e7a:	f7ff febf 	bl	8001bfc <gb_i2c2_start_condition_w>
	gb_i2c2_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
 8001e7e:	2078      	movs	r0, #120	; 0x78
 8001e80:	f7ff fed8 	bl	8001c34 <gb_i2c2_address_send_w>
	gb_i2c2_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_COMMAND); //0x00
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fefd 	bl	8001c84 <gb_i2c2_master_send_byte>
	gb_i2c2_master_send_byte(command);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fef9 	bl	8001c84 <gb_i2c2_master_send_byte>
	gb_i2c2_master_stop_generation(); // STOP Condition is generated
 8001e92:	f7ff ff0f 	bl	8001cb4 <gb_i2c2_master_stop_generation>

}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <ssd1306_update_data>:
	gb_i2c2_master_send_byte(data);
	gb_i2c2_master_stop_generation(); // STOP Condition is generated

}
void ssd1306_update_data()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
	ssd1306_sendcommand(GB_SSD1306_SET_COLUMN_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8001ea6:	2021      	movs	r0, #33	; 0x21
 8001ea8:	f7ff ffe2 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_START_ADDRESS_HV_ADDRESSING_MODE);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff ffdf 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_COLUMN_END_ADDRESS_HV_ADDRESSING_MODE);
 8001eb2:	207f      	movs	r0, #127	; 0x7f
 8001eb4:	f7ff ffdc 	bl	8001e70 <ssd1306_sendcommand>

	ssd1306_sendcommand(GB_SSD1306_PAGE_ADDRESS_HV_ADDRESSING_MODE_COMMAND);
 8001eb8:	2022      	movs	r0, #34	; 0x22
 8001eba:	f7ff ffd9 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_START_ADDRESS_HV_ADDRESSING_MODE);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff ffd6 	bl	8001e70 <ssd1306_sendcommand>
	ssd1306_sendcommand(GB_SSD1306_PAGE_END_ADDRESS_HV_ADDRESSING_MODE);
 8001ec4:	207d      	movs	r0, #125	; 0x7d
 8001ec6:	f7ff ffd3 	bl	8001e70 <ssd1306_sendcommand>

	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	e01c      	b.n	8001f0a <ssd1306_update_data+0x6a>
		  gb_i2c2_start_condition_w(); // Start Condition For Writing
 8001ed0:	f7ff fe94 	bl	8001bfc <gb_i2c2_start_condition_w>
		  gb_i2c2_address_send_w(SSD1306_WA); // INA219 I2C address is sent with Write bit
 8001ed4:	2078      	movs	r0, #120	; 0x78
 8001ed6:	f7ff fead 	bl	8001c34 <gb_i2c2_address_send_w>
		  gb_i2c2_master_send_byte(GB_SSD1306_CONTROL_BYTE_FOR_DATA);
 8001eda:	2040      	movs	r0, #64	; 0x40
 8001edc:	f7ff fed2 	bl	8001c84 <gb_i2c2_master_send_byte>
	        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71bb      	strb	r3, [r7, #6]
 8001ee4:	e00b      	b.n	8001efe <ssd1306_update_data+0x5e>
	        	gb_i2c2_master_send_byte(GB_SSD1306_Buffer[packet*16+packet_byte]);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	011a      	lsls	r2, r3, #4
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <ssd1306_update_data+0x7c>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fec6 	bl	8001c84 <gb_i2c2_master_send_byte>
	        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	3301      	adds	r3, #1
 8001efc:	71bb      	strb	r3, [r7, #6]
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d9f0      	bls.n	8001ee6 <ssd1306_update_data+0x46>
	  for (uint8_t packet = 0; packet < GB_SSD1306_HEIGHT; packet++) {
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	3301      	adds	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f0e:	d9df      	bls.n	8001ed0 <ssd1306_update_data+0x30>
	        }
	  }
	        gb_i2c2_master_stop_generation(); // STOP Condition is generated
 8001f10:	f7ff fed0 	bl	8001cb4 <gb_i2c2_master_stop_generation>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000210 	.word	0x20000210

08001f20 <ssd1306_GotoXY>:
/*
 * x is column[0-127]
 * y is row[0-63]
 */
void ssd1306_GotoXY( uint16_t x,uint16_t y)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
		GB_SSD1306.CurrentX = x;
 8001f30:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <ssd1306_GotoXY+0x28>)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	8013      	strh	r3, [r2, #0]
		GB_SSD1306.CurrentY = y;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <ssd1306_GotoXY+0x28>)
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	8053      	strh	r3, [r2, #2]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000610 	.word	0x20000610

08001f4c <ssd1306_clear>:
}
/*
 *  Fills entire LCD with desired color
 */
void ssd1306_clear(GB_SSD1306_COLOR_t color)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	memset(GB_SSD1306_Buffer, (color == GB_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(GB_SSD1306_Buffer));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <ssd1306_clear+0x14>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <ssd1306_clear+0x16>
 8001f60:	23ff      	movs	r3, #255	; 0xff
 8001f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f66:	4619      	mov	r1, r3
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <ssd1306_clear+0x2c>)
 8001f6a:	f001 f8b9 	bl	80030e0 <memset>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000210 	.word	0x20000210

08001f7c <ssd1306_print_char>:
 * 5 is no of columns: font width // x is width : CurrentX :0-127
 * 8 is no of rows: font height   //y is height : CurrentY : 0-63
 *
 */
char ssd1306_print_char(char ch, GB_SSD1306_COLOR_t color)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	460a      	mov	r2, r1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	71bb      	strb	r3, [r7, #6]

	uint32_t Font_byte_value;

	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e034      	b.n	8001ffc <ssd1306_print_char+0x80>
	{
			Font_byte_value = SSD1306_font5x8[(ch - 32)][i]; //mapping the vales of bits for rinting the character ch
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f1a3 0220 	sub.w	r2, r3, #32
 8001f98:	491d      	ldr	r1, [pc, #116]	; (8002010 <ssd1306_print_char+0x94>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	18ca      	adds	r2, r1, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]

			if (color == GB_SSD1306_COLOR_WHITE)
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10d      	bne.n	8001fcc <ssd1306_print_char+0x50>
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = Font_byte_value;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <ssd1306_print_char+0x98>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <ssd1306_print_char+0x98>)
 8001fb8:	885b      	ldrh	r3, [r3, #2]
 8001fba:	08db      	lsrs	r3, r3, #3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	4413      	add	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	b2d1      	uxtb	r1, r2
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <ssd1306_print_char+0x9c>)
 8001fc8:	54d1      	strb	r1, [r2, r3]
 8001fca:	e00e      	b.n	8001fea <ssd1306_print_char+0x6e>
			}else
			{
				GB_SSD1306_Buffer[GB_SSD1306.CurrentX + (GB_SSD1306.CurrentY / 8) * GB_SSD1306_WIDTH] = ~Font_byte_value;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <ssd1306_print_char+0x98>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <ssd1306_print_char+0x98>)
 8001fd8:	885b      	ldrh	r3, [r3, #2]
 8001fda:	08db      	lsrs	r3, r3, #3
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	440b      	add	r3, r1
 8001fe2:	43d2      	mvns	r2, r2
 8001fe4:	b2d1      	uxtb	r1, r2
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <ssd1306_print_char+0x9c>)
 8001fe8:	54d1      	strb	r1, [r2, r3]
			}

		  GB_SSD1306.CurrentX ++;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <ssd1306_print_char+0x98>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <ssd1306_print_char+0x98>)
 8001ff4:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < 5 ; i++) // Font Width
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d9c7      	bls.n	8001f92 <ssd1306_print_char+0x16>
		}

	/* Return character written */
		return ch;
 8002002:	79fb      	ldrb	r3, [r7, #7]

}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	08007edc 	.word	0x08007edc
 8002014:	20000610 	.word	0x20000610
 8002018:	20000210 	.word	0x20000210

0800201c <ssd1306_print_string>:

char ssd1306_print_string(char* str, GB_SSD1306_COLOR_t color)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
	while (*str)
 8002028:	e008      	b.n	800203c <ssd1306_print_string+0x20>
	{
		ssd1306_print_char(*str++, (GB_SSD1306_COLOR_t) color);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ffa0 	bl	8001f7c <ssd1306_print_char>
	while (*str)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f2      	bne.n	800202a <ssd1306_print_string+0xe>
	}
	/* Everything OK, zero should be returned */
		return *str;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	781b      	ldrb	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ssd1306_float>:
		ssd1306_print_char(gb_buf[gb_ptr], (GB_SSD1306_COLOR_t) color);
	}
}

void ssd1306_float(float gb_value, GB_SSD1306_COLOR_t color)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
	char gb_float_buff[10];
	sprintf(gb_float_buff,"%.2f",gb_value);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7fe f9f3 	bl	8000448 <__aeabi_f2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	f107 000c 	add.w	r0, r7, #12
 800206a:	4907      	ldr	r1, [pc, #28]	; (8002088 <ssd1306_float+0x38>)
 800206c:	f001 feb6 	bl	8003ddc <siprintf>
	ssd1306_print_string(gb_float_buff,(GB_SSD1306_COLOR_t) color );
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ffcf 	bl	800201c <ssd1306_print_string>

}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	08007dc0 	.word	0x08007dc0

0800208c <timer_initialise>:
 * 1 us = 1 count
 * 1ms = 1000us
 * 1 sec = 1000ms
 */
 void timer_initialise()
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8002090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 80020a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6113      	str	r3, [r2, #16]

	//RESET THE TIMER2 BUS
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <timer_initialise+0xa4>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <timer_initialise+0xa4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <timer_initialise+0xa4>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <timer_initialise+0xa4>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6113      	str	r3, [r2, #16]


	//Enable Timer2 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <timer_initialise+0xa4>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <timer_initialise+0xa4>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	61d3      	str	r3, [r2, #28]


    TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
 80020d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	6013      	str	r3, [r2, #0]
/**********************for example 1*******************************/
    //Timer prescaler value
    TIM2->PSC = 32;
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	2220      	movs	r2, #32
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM2->PSC = 0;
    //Timer Auto reload register value
    TIM2->ARR = 0xffff;
 80020ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
    //65535
    //TIM2->ARR = 32;

    TIM2-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 80020f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002100:	f023 0302 	bic.w	r3, r3, #2
 8002104:	6013      	str	r3, [r2, #0]

   //Enable the update generation for updating the shadow register with preload register contents with new values
   TIM2->EGR |= TIM_EGR_UG;
 8002106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6153      	str	r3, [r2, #20]
   //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of my register
   TIM2->SR &= ~(TIM_SR_UIF);
 8002116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6113      	str	r3, [r2, #16]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <delay_us>:
void delay_us(uint16_t us)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
	TIM2->CR1 |= TIM_CR1_CEN;
 800213e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6013      	str	r3, [r2, #0]
	//TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
	//TIM2->EGR |= TIM_EGR_UG; // SET UG bit to reinitailse the counter register with 0
	TIM2->CNT=0; // initialise counter register
 800214e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
	//while(!(TIM2->SR & (1<<TIM_SR_UIF)));
	//TIM2->SR &= ~(TIM_SR_UIF); //clear the update interrupt flag as this is set when CNT is reinitialsed with 0
	while(TIM2->CNT < us)
 8002156:	bf00      	nop
 8002158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3f9      	bcc.n	8002158 <delay_us+0x24>
	{	//uart_tran_dec(TIM2->CNT);
	}
	//TIM2->CR1 &= ~TIM_CR1_CEN;

}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <delay_ms>:
void delay_ms(uint16_t ms)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	e006      	b.n	800218e <delay_ms+0x1e>
	delay_us(1000);
 8002180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002184:	f7ff ffd6 	bl	8002134 <delay_us>
	for (uint16_t i=0; i<ms; i++)
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	3301      	adds	r3, #1
 800218c:	81fb      	strh	r3, [r7, #14]
 800218e:	89fa      	ldrh	r2, [r7, #14]
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3f4      	bcc.n	8002180 <delay_ms+0x10>
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <T4C1_pin_conf>:
#include "stm32f1xx.h"
#include "gb_timer_input_capture.h"
int gb_a;
//PB6
void T4C1_pin_conf()
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <T4C1_pin_conf+0x3c>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <T4C1_pin_conf+0x3c>)
 80021aa:	f043 0308 	orr.w	r3, r3, #8
 80021ae:	6193      	str	r3, [r2, #24]
	 //Configures GPIO PIN PB6 as Input
	 GPIOB->CRL &= ~(GPIO_CRL_MODE6);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80021ba:	6013      	str	r3, [r2, #0]
	 //CONFIGURE GPIO PIN PB6 as floating input
	 GPIOB->CRL |= (GPIO_CRL_CNF6_0);
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021c6:	6013      	str	r3, [r2, #0]
	 GPIOB->CRL &= ~(GPIO_CRL_CNF6_1);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <T4C1_pin_conf+0x40>)
 80021ce:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <tim4_ch1_capture_config>:

void tim4_ch1_capture_config()
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
	   TIM4->DIER |= TIM_DIER_CC1IE; //capture interrupt enable
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	60d3      	str	r3, [r2, #12]
	   TIM4->CCER |= TIM_CCER_CC1E; // timer 4 channel1 configured for capture enabled
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6213      	str	r3, [r2, #32]
	   TIM4->CCER |= TIM_CCER_CC2E;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 8002206:	f043 0310 	orr.w	r3, r3, #16
 800220a:	6213      	str	r3, [r2, #32]
	   TIM4->CR1 |= TIM_CR1_CEN; //enable the timer
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <tim4_ch1_capture_config+0x3c>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40000800 	.word	0x40000800

08002224 <tim4_ch1_capture_unconfig>:

void tim4_ch1_capture_unconfig()
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
		   TIM4->DIER &= ~TIM_DIER_CC1IE; //capture interrupt enable
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 800222e:	f023 0302 	bic.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
		   TIM4->CCER &= ~TIM_CCER_CC1E; // timer 4 channel1 configured for capture enabled
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a09      	ldr	r2, [pc, #36]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
		   TIM4->CCER &= ~TIM_CCER_CC2E;
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a06      	ldr	r2, [pc, #24]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	6213      	str	r3, [r2, #32]
		   TIM4->CR1 &= ~TIM_CR1_CEN; //enable the timer
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <tim4_ch1_capture_unconfig+0x3c>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40000800 	.word	0x40000800

08002264 <gb_t4_input_capture>:
void gb_t4_input_capture()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
			TIM4->CR1 &= ~(TIM_CR1_CEN);
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <gb_t4_input_capture+0x1a8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a67      	ldr	r2, [pc, #412]	; (800240c <gb_t4_input_capture+0x1a8>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]
			TIM4->SR &= ~(TIM_SR_UIF);
 8002274:	4b65      	ldr	r3, [pc, #404]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4a64      	ldr	r2, [pc, #400]	; (800240c <gb_t4_input_capture+0x1a8>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6113      	str	r3, [r2, #16]

			//RESET THE TIMER4 BUS
			RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM4RST);
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <gb_t4_input_capture+0x1ac>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a62      	ldr	r2, [pc, #392]	; (8002410 <gb_t4_input_capture+0x1ac>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6113      	str	r3, [r2, #16]
			RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM4RST);
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <gb_t4_input_capture+0x1ac>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <gb_t4_input_capture+0x1ac>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6113      	str	r3, [r2, #16]

			//Enable Timer4 peripheral clock
			RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002298:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <gb_t4_input_capture+0x1ac>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <gb_t4_input_capture+0x1ac>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	61d3      	str	r3, [r2, #28]

			//enable Timer4channel 1 gpio periperial
			T4C1_pin_conf();
 80022a4:	f7ff ff7c 	bl	80021a0 <T4C1_pin_conf>
//			__NVIC_SetPriority (TIM4_IRQn, 0);
//
//			__NVIC_EnableIRQ(TIM4_IRQn);

			//***********Timer base configuration******************
		    TIM4->CR1 |= TIM_CR1_ARPE; //enable the preload fpr arr register
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b2:	6013      	str	r3, [r2, #0]


		    //Timer prescaler value
		     TIM4->PSC = 640;
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
		     //Timer Auto reload register value - this decides the frequency of my signal
		     TIM4->ARR = 0xffff;
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c

		     TIM4-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a50      	ldr	r2, [pc, #320]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022ca:	f023 0302 	bic.w	r3, r3, #2
 80022ce:	6013      	str	r3, [r2, #0]
		     //Enable the update generation for updating the shadow register with preload register contents with new values
		     TIM4->EGR |= TIM_EGR_UG;
 80022d0:	4b4e      	ldr	r3, [pc, #312]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6153      	str	r3, [r2, #20]
//		     //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of  register
//		   TIM4->SR &= ~(TIM_SR_UIF);


		   //********************************** TIMER Clock configuration ***************
		   TIM4->SMCR &= ~ (TIM_SMCR_SMS |TIM_SMCR_TS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ea:	6093      	str	r3, [r2, #8]

		   //***********Timer base configuration******************
		    TIM4->CR1 |= TIM_CR1_ARPE; //enable the preload fpr arr register
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a46      	ldr	r2, [pc, #280]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	6013      	str	r3, [r2, #0]
		    //Timer prescaler value
			TIM4->PSC = 640;
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <gb_t4_input_capture+0x1a8>)
 80022fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
			//Timer Auto reload register value - this decides the frequency of my signal
			TIM4->ARR = 0xfffffff;
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002302:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <gb_t4_input_capture+0x1a8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <gb_t4_input_capture+0x1a8>)
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	6013      	str	r3, [r2, #0]
			//Enable the update generation for updating the shadow register with preload register contents with new values
			 TIM4->EGR |= TIM_EGR_UG;
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4a3c      	ldr	r2, [pc, #240]	; (800240c <gb_t4_input_capture+0x1a8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6153      	str	r3, [r2, #20]
			 //When UIF bit is set to 1, it means registers are updated and update interrupt is pending.
			 while(!(TIM4->SR & TIM_SR_UIF));
 8002320:	bf00      	nop
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f9      	beq.n	8002322 <gb_t4_input_capture+0xbe>
			// TIM4->SR &= ~(TIM_SR_UIF);



			 //**********************Timer Slave configuration*****************
		     TIM4-> SMCR = 0x00;// reset the slave mode register
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
		     TIM4->SMCR |= TIM_SMCR_SMS_2; //slave mode selection: Reset Mode.
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <gb_t4_input_capture+0x1a8>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6093      	str	r3, [r2, #8]
		     TIM4->SMCR |= (TIM_SMCR_TS_2 | TIM_SMCR_TS_0); //slave mode: trigger selection
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002346:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800234a:	6093      	str	r3, [r2, #8]
		     /* Configure the trigger prescaler, filter, and polarity */


		     TIM4->DIER &= ~TIM_DIER_TIE; //trigger interrupt enable: triggered if UIF flag is set to 1
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <gb_t4_input_capture+0x1a8>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a2e      	ldr	r2, [pc, #184]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002356:	60d3      	str	r3, [r2, #12]
		     TIM4->DIER &= ~TIM_DIER_TDE; // trigger dma request disabled
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <gb_t4_input_capture+0x1a8>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a2b      	ldr	r2, [pc, #172]	; (800240c <gb_t4_input_capture+0x1a8>)
 800235e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002362:	60d3      	str	r3, [r2, #12]

		    //IC1 capture disabled
		    TIM4->CCER &= ~TIM_CCER_CC1E;
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <gb_t4_input_capture+0x1a8>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
		    //CC1 channel is configures as input, IC1 is mapped tp TI1
            TIM4->CCMR1 &= ~TIM_CCMR1_CC1S_1;
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002376:	f023 0302 	bic.w	r3, r3, #2
 800237a:	6193      	str	r3, [r2, #24]
            TIM4->CCMR1 |= TIM_CCMR1_CC1S_0;
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <gb_t4_input_capture+0x1a8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a22      	ldr	r2, [pc, #136]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6193      	str	r3, [r2, #24]
            //IC1 capture polarity non-inverted: capture is done on rising edge of IC1.
            TIM4->CCER &= ~TIM_CCER_CC1P;
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <gb_t4_input_capture+0x1a8>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <gb_t4_input_capture+0x1a8>)
 800238e:	f023 0302 	bic.w	r3, r3, #2
 8002392:	6213      	str	r3, [r2, #32]
            TIM4->CCMR1 &= ~TIM_CCMR1_IC1PSC; // No prescaler, capture is done each time an edge is detected.
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <gb_t4_input_capture+0x1a8>)
 800239a:	f023 030c 	bic.w	r3, r3, #12
 800239e:	6193      	str	r3, [r2, #24]
            TIM4->CCMR1 &= ~TIM_CCMR1_IC1F; // No input filter is needed, as input signal is stable so at each event capture can be done
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023aa:	6193      	str	r3, [r2, #24]


            //IC2 capture disabled
           	 TIM4->CCER &= ~TIM_CCER_CC2E;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023b2:	f023 0310 	bic.w	r3, r3, #16
 80023b6:	6213      	str	r3, [r2, #32]
            //IC2 channel is configures as input, IC2 is mapped tp TI1
             TIM4->CCMR1 &= ~TIM_CCMR1_CC2S_0;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a13      	ldr	r2, [pc, #76]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c2:	6193      	str	r3, [r2, #24]
             TIM4->CCMR1 |= TIM_CCMR1_CC2S_1;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6193      	str	r3, [r2, #24]
             //IC2 capture polarity inverted: capture is done on falling edge of IC2.
             TIM4->CCER |= TIM_CCER_CC2P;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	6213      	str	r3, [r2, #32]
             TIM4->CCMR1 &= ~TIM_CCMR1_IC2PSC; // No prescaler, capture is done each time an edge is detected.
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023e6:	6193      	str	r3, [r2, #24]
             TIM4->CCMR1 &= ~TIM_CCMR1_IC2F; // No input filter is needed, as input signal is stable so at each event capture can be done
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a07      	ldr	r2, [pc, #28]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023f2:	6193      	str	r3, [r2, #24]


             //Master configuration
             TIM4->CR2 &= ~TIM_CR2_MMS; //reset the master mode selection
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <gb_t4_input_capture+0x1a8>)
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	6053      	str	r3, [r2, #4]
             TIM4->CR2 = 0x00;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <gb_t4_input_capture+0x1a8>)
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
             //TIM4->CR1 |= TIM_CR1_CEN; //enable the timer

             //Timer4_channel2 configuration
        //  TIM4->CCER |= TIM_CCER_CC2E;
       //   TIM4->CR1 |= TIM_CR1_CEN; //enable the timer
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40000800 	.word	0x40000800
 8002410:	40021000 	.word	0x40021000

08002414 <TIM4_IRQHandler>:
float Period = 0;
float Width = 0;
float Period_Current = 0;

void TIM4_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	if(TIM4->SR & TIM_SR_CC1IF) //capture comapre event 1
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <TIM4_IRQHandler+0xa4>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d047      	beq.n	80024b4 <TIM4_IRQHandler+0xa0>
	{
		if(TIM4->DIER & TIM_DIER_CC1IE) //cross check that which source of interrupt is configured
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <TIM4_IRQHandler+0xa4>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d041      	beq.n	80024b4 <TIM4_IRQHandler+0xa0>
		{
			if((TIM4->CCMR1 & TIM_CCMR1_CC1S) != 0) //cross check if input capture interrupt is thier if input capture event is their
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <TIM4_IRQHandler+0xa4>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03b      	beq.n	80024b4 <TIM4_IRQHandler+0xa0>
			{
				IC1Value = TIM4->CCR1;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <TIM4_IRQHandler+0xa4>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <TIM4_IRQHandler+0xa8>)
 8002442:	6013      	str	r3, [r2, #0]
				if(IC1Value !=0)
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <TIM4_IRQHandler+0xa8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d033      	beq.n	80024b4 <TIM4_IRQHandler+0xa0>
				{
					IC2Value = TIM4->CCR2;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <TIM4_IRQHandler+0xa4>)
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <TIM4_IRQHandler+0xac>)
 8002452:	6013      	str	r3, [r2, #0]
					Duty = (IC2Value*100)/IC1Value;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <TIM4_IRQHandler+0xac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2264      	movs	r2, #100	; 0x64
 800245a:	fb02 f203 	mul.w	r2, r2, r3
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <TIM4_IRQHandler+0xa8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc44 	bl	8000cf4 <__aeabi_ui2f>
 800246c:	4603      	mov	r3, r0
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <TIM4_IRQHandler+0xb0>)
 8002470:	6013      	str	r3, [r2, #0]
					Frequency = 50000/IC1Value; //  ( in herts)
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <TIM4_IRQHandler+0xa8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f24c 3250 	movw	r2, #50000	; 0xc350
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fc38 	bl	8000cf4 <__aeabi_ui2f>
 8002484:	4603      	mov	r3, r0
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <TIM4_IRQHandler+0xb4>)
 8002488:	6013      	str	r3, [r2, #0]
					//Frequency = 1/IC1Value;
					Period = 1000000/Frequency;//(Perid is in microseconds)
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <TIM4_IRQHandler+0xb4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	480e      	ldr	r0, [pc, #56]	; (80024cc <TIM4_IRQHandler+0xb8>)
 8002492:	f7fe fd3b 	bl	8000f0c <__aeabi_fdiv>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <TIM4_IRQHandler+0xbc>)
 800249c:	601a      	str	r2, [r3, #0]
				Width = Period/2;  //(in microseconds)
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <TIM4_IRQHandler+0xbc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fd30 	bl	8000f0c <__aeabi_fdiv>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <TIM4_IRQHandler+0xc0>)
 80024b2:	601a      	str	r2, [r3, #0]

				}
			}
		}
	}
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40000800 	.word	0x40000800
 80024bc:	20000618 	.word	0x20000618
 80024c0:	2000061c 	.word	0x2000061c
 80024c4:	20000624 	.word	0x20000624
 80024c8:	20000620 	.word	0x20000620
 80024cc:	49742400 	.word	0x49742400
 80024d0:	20000628 	.word	0x20000628
 80024d4:	2000062c 	.word	0x2000062c

080024d8 <getPeriod>:


float getPeriod()
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
	return Period;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <getPeriod+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000628 	.word	0x20000628

080024ec <setPeriod>:
	return Frequency;

}

void setPeriod(uint32_t value)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	Period = value;
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe fbfd 	bl	8000cf4 <__aeabi_ui2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a02      	ldr	r2, [pc, #8]	; (8002508 <setPeriod+0x1c>)
 80024fe:	6013      	str	r3, [r2, #0]

}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000628 	.word	0x20000628

0800250c <hlw8012_sel_high_current>:
double hlw8012_getpower_multiplier() { return _power_multiplier; };



void hlw8012_sel_high_current()
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (GPIO_ODR_ODR12);
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <hlw8012_sel_high_current+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a03      	ldr	r2, [pc, #12]	; (8002524 <hlw8012_sel_high_current+0x18>)
 8002516:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251a:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR |= (GPIO_ODR_ODR13);
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40010c00 	.word	0x40010c00

08002528 <hlw8012_sel_low_volatge>:
void hlw8012_sel_low_volatge()
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_ODR12);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <hlw8012_sel_low_volatge+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <hlw8012_sel_low_volatge+0x18>)
 8002532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002536:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR &= ~(GPIO_ODR_ODR13);
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40010c00 	.word	0x40010c00

08002544 <hlw8012_pins_config>:
/*SEL = PB12 --> Output
 *CF1 = Current/Voltage = PB7 --> floating input
 * CF = power = PB6 ==> Floating Input
 */
void hlw8012_pins_config()
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <hlw8012_pins_config+0x84>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <hlw8012_pins_config+0x84>)
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	6193      	str	r3, [r2, #24]

	 //Configures GPIO PIN PB6 as Input
	 GPIOB->CRL &= ~(GPIO_CRL_MODE6);
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <hlw8012_pins_config+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <hlw8012_pins_config+0x88>)
 800255a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800255e:	6013      	str	r3, [r2, #0]
	 //CONFIGURE GPIO PIN PB6 as floating input
	 GPIOB->CRL |= (GPIO_CRL_CNF6_0);
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <hlw8012_pins_config+0x88>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <hlw8012_pins_config+0x88>)
 8002566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800256a:	6013      	str	r3, [r2, #0]
	 GPIOB->CRL &= ~(GPIO_CRL_CNF6_1);
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <hlw8012_pins_config+0x88>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <hlw8012_pins_config+0x88>)
 8002572:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002576:	6013      	str	r3, [r2, #0]

	 //Configures GPIO PIN PB7 as Input
	 GPIOB->CRL &= ~(GPIO_CRL_MODE7);
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <hlw8012_pins_config+0x88>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <hlw8012_pins_config+0x88>)
 800257e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002582:	6013      	str	r3, [r2, #0]
	 //CONFIGURE GPIO PIN PB7 as floating input
	 GPIOB->CRL |= (GPIO_CRL_CNF7_0);
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <hlw8012_pins_config+0x88>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a10      	ldr	r2, [pc, #64]	; (80025cc <hlw8012_pins_config+0x88>)
 800258a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800258e:	6013      	str	r3, [r2, #0]
	 GPIOB->CRL &= ~(GPIO_CRL_CNF7_1);
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <hlw8012_pins_config+0x88>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <hlw8012_pins_config+0x88>)
 8002596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800259a:	6013      	str	r3, [r2, #0]

	 //PB12
	 RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <hlw8012_pins_config+0x84>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <hlw8012_pins_config+0x84>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6193      	str	r3, [r2, #24]
			 GPIOB->CRH |= (GPIO_CRH_MODE12_0 | GPIO_CRH_MODE12_1);
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <hlw8012_pins_config+0x88>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <hlw8012_pins_config+0x88>)
 80025ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80025b2:	6053      	str	r3, [r2, #4]
			 GPIOB->CRH &= ~(GPIO_CRH_CNF12_0 | GPIO_CRH_CNF12_1);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <hlw8012_pins_config+0x88>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <hlw8012_pins_config+0x88>)
 80025ba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80025be:	6053      	str	r3, [r2, #4]

}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010c00 	.word	0x40010c00

080025d0 <hlw8012_config>:


void hlw8012_config()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	hlw8012_pins_config();
 80025d4:	f7ff ffb6 	bl	8002544 <hlw8012_pins_config>

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <gb_unblockingDelay>:
void gb_unblockingDelay(uint32_t mseconds)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	unsigned long gb_timeIn = GB_millis();	// Timestamp coming into function
 80025e4:	f7ff f974 	bl	80018d0 <GB_millis>
 80025e8:	60f8      	str	r0, [r7, #12]
	while (GB_millis() - gb_timeIn < mseconds) delay_ms(1); // While we haven't timed out
 80025ea:	e002      	b.n	80025f2 <gb_unblockingDelay+0x16>
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fdbf 	bl	8002170 <delay_ms>
 80025f2:	f7ff f96d 	bl	80018d0 <GB_millis>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d8f4      	bhi.n	80025ec <gb_unblockingDelay+0x10>
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <hlw8012_getcurrent>:

float hlw8012_getcurrent()
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	af00      	add	r7, sp, #0
	//if(_power == 0){
	//     _current_pulse_width = 0;
	//}
	//else
	{
	hlw8012_sel_high_current();
 8002610:	f7ff ff7c 	bl	800250c <hlw8012_sel_high_current>
	_current_pulse_width = pulseIN_current();
 8002614:	f000 f830 	bl	8002678 <pulseIN_current>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd88 	bl	8001130 <__aeabi_f2uiz>
 8002620:	4603      	mov	r3, r0
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <hlw8012_getcurrent+0x60>)
 8002624:	6013      	str	r3, [r2, #0]
	_current = (_current_pulse_width > 0) ? _current_multiplier / _current_pulse_width: 0;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <hlw8012_getcurrent+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <hlw8012_getcurrent+0x4e>
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <hlw8012_getcurrent+0x64>)
 8002630:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <hlw8012_getcurrent+0x60>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fee3 	bl	8000404 <__aeabi_ui2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4620      	mov	r0, r4
 8002644:	4629      	mov	r1, r5
 8002646:	f7fe f881 	bl	800074c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe fa49 	bl	8000ae8 <__aeabi_d2f>
 8002656:	4603      	mov	r3, r0
 8002658:	e001      	b.n	800265e <hlw8012_getcurrent+0x52>
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <hlw8012_getcurrent+0x68>)
 8002660:	6013      	str	r3, [r2, #0]
	//return _current;
	}
	return _current;
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <hlw8012_getcurrent+0x68>)
 8002664:	681b      	ldr	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	bdb0      	pop	{r4, r5, r7, pc}
 800266a:	bf00      	nop
 800266c:	20000634 	.word	0x20000634
 8002670:	200008c8 	.word	0x200008c8
 8002674:	2000063c 	.word	0x2000063c

08002678 <pulseIN_current>:
/*
 * Period is taken from TIM4_IRQ
 *
 */
float pulseIN_current()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
unsigned long gb_pulse_current = GB_millis();	// Timestamp coming into function
 800267e:	f7ff f927 	bl	80018d0 <GB_millis>
 8002682:	6078      	str	r0, [r7, #4]
	while (GB_millis() - gb_pulse_current < 2000 )
 8002684:	e006      	b.n	8002694 <pulseIN_current+0x1c>
	{
	tim4_ch1_capture_config();
 8002686:	f7ff fdad 	bl	80021e4 <tim4_ch1_capture_config>
	Current_Period = getPeriod();
 800268a:	f7ff ff25 	bl	80024d8 <getPeriod>
 800268e:	4603      	mov	r3, r0
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <pulseIN_current+0x44>)
 8002692:	6013      	str	r3, [r2, #0]
	while (GB_millis() - gb_pulse_current < 2000 )
 8002694:	f7ff f91c 	bl	80018d0 <GB_millis>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026a2:	d3f0      	bcc.n	8002686 <pulseIN_current+0xe>
	}

	tim4_ch1_capture_unconfig();
 80026a4:	f7ff fdbe 	bl	8002224 <tim4_ch1_capture_unconfig>

	//reinitialise Period to 0
	setPeriod(0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff ff1f 	bl	80024ec <setPeriod>
	//}
	return Current_Period;
 80026ae:	4b03      	ldr	r3, [pc, #12]	; (80026bc <pulseIN_current+0x44>)
 80026b0:	681b      	ldr	r3, [r3, #0]

}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000648 	.word	0x20000648

080026c0 <hlw8012_getvoltage>:
float hlw8012_getvoltage()
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	hlw8012_sel_low_volatge();
 80026c4:	f7ff ff30 	bl	8002528 <hlw8012_sel_low_volatge>
	_voltage_pulse_width = pulseIN_voltage();
 80026c8:	f000 f83a 	bl	8002740 <pulseIN_voltage>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fd2e 	bl	8001130 <__aeabi_f2uiz>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <hlw8012_getvoltage+0x74>)
 80026d8:	6013      	str	r3, [r2, #0]
	_voltage = (_voltage_pulse_width > 0) ? _voltage_multiplier / _voltage_pulse_width/2: 0;
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <hlw8012_getvoltage+0x74>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01f      	beq.n	8002722 <hlw8012_getvoltage+0x62>
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <hlw8012_getvoltage+0x78>)
 80026e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <hlw8012_getvoltage+0x74>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fe89 	bl	8000404 <__aeabi_ui2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fe f827 	bl	800074c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800270e:	f7fe f81d 	bl	800074c <__aeabi_ddiv>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fe f9e5 	bl	8000ae8 <__aeabi_d2f>
 800271e:	4603      	mov	r3, r0
 8002720:	e001      	b.n	8002726 <hlw8012_getvoltage+0x66>
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <hlw8012_getvoltage+0x7c>)
 8002728:	6013      	str	r3, [r2, #0]
	return _voltage;
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <hlw8012_getvoltage+0x7c>)
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
 8002732:	bf00      	nop
 8002734:	20000630 	.word	0x20000630
 8002738:	200008d8 	.word	0x200008d8
 800273c:	20000640 	.word	0x20000640

08002740 <pulseIN_voltage>:
float voltage_Period = 0;
float pulseIN_voltage()
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
	unsigned long gb_pulse_voltage = GB_millis();	// Timestamp coming into function
 8002746:	f7ff f8c3 	bl	80018d0 <GB_millis>
 800274a:	6078      	str	r0, [r7, #4]
		while (GB_millis() - gb_pulse_voltage < 2000 )
 800274c:	e006      	b.n	800275c <pulseIN_voltage+0x1c>
		{
	tim4_ch1_capture_config();
 800274e:	f7ff fd49 	bl	80021e4 <tim4_ch1_capture_config>
	voltage_Period = getPeriod();
 8002752:	f7ff fec1 	bl	80024d8 <getPeriod>
 8002756:	4603      	mov	r3, r0
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <pulseIN_voltage+0x44>)
 800275a:	6013      	str	r3, [r2, #0]
		while (GB_millis() - gb_pulse_voltage < 2000 )
 800275c:	f7ff f8b8 	bl	80018d0 <GB_millis>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800276a:	d3f0      	bcc.n	800274e <pulseIN_voltage+0xe>
		}
	tim4_ch1_capture_unconfig();
 800276c:	f7ff fd5a 	bl	8002224 <tim4_ch1_capture_unconfig>

	//reinitilise Period to 0
	setPeriod(0);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff febb 	bl	80024ec <setPeriod>
	return voltage_Period;
 8002776:	4b03      	ldr	r3, [pc, #12]	; (8002784 <pulseIN_voltage+0x44>)
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000064c 	.word	0x2000064c

08002788 <pulseIN_power>:
float Power_Period = 0;
float pulseIN_power()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	tim4_ch1_capture_config();
 800278c:	f7ff fd2a 	bl	80021e4 <tim4_ch1_capture_config>
	Power_Period = getPeriod();
 8002790:	f7ff fea2 	bl	80024d8 <getPeriod>
 8002794:	4603      	mov	r3, r0
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <pulseIN_power+0x24>)
 8002798:	6013      	str	r3, [r2, #0]
	tim4_ch1_capture_unconfig();
 800279a:	f7ff fd43 	bl	8002224 <tim4_ch1_capture_unconfig>

	//reinitilise Period to 0
	setPeriod(0);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff fea4 	bl	80024ec <setPeriod>
	return Power_Period;
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <pulseIN_power+0x24>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000650 	.word	0x20000650

080027b0 <hlw8012_getactivepower>:
float hlw8012_getactivepower()
{
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	_power_pulse_width = pulseIN_power();
 80027b4:	f7ff ffe8 	bl	8002788 <pulseIN_power>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fcb8 	bl	8001130 <__aeabi_f2uiz>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <hlw8012_getactivepower+0x70>)
 80027c4:	6013      	str	r3, [r2, #0]
	_power = (_power_pulse_width > 0) ? _power_multiplier / _power_pulse_width / 2 : 0;
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <hlw8012_getactivepower+0x70>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01f      	beq.n	800280e <hlw8012_getactivepower+0x5e>
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <hlw8012_getactivepower+0x74>)
 80027d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <hlw8012_getactivepower+0x70>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe13 	bl	8000404 <__aeabi_ui2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd ffb1 	bl	800074c <__aeabi_ddiv>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027fa:	f7fd ffa7 	bl	800074c <__aeabi_ddiv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f96f 	bl	8000ae8 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
 800280c:	e001      	b.n	8002812 <hlw8012_getactivepower+0x62>
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <hlw8012_getactivepower+0x78>)
 8002814:	6013      	str	r3, [r2, #0]
	return _power;
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <hlw8012_getactivepower+0x78>)
 8002818:	681b      	ldr	r3, [r3, #0]
}
 800281a:	4618      	mov	r0, r3
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	20000638 	.word	0x20000638
 8002824:	200008d0 	.word	0x200008d0
 8002828:	20000644 	.word	0x20000644

0800282c <hlw8012_expected_ActiveCurrent>:
void hlw8012_expected_ActiveCurrent( double value)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	e9c7 0100 	strd	r0, r1, [r7]
	if (_current == 0) hlw8012_getcurrent();
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <hlw8012_expected_ActiveCurrent+0x74>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fc44 	bl	80010cc <__aeabi_fcmpeq>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <hlw8012_expected_ActiveCurrent+0x22>
 800284a:	f7ff fedf 	bl	800260c <hlw8012_getcurrent>
	if (_current > 0) _current_multiplier *= ((value / _current));
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <hlw8012_expected_ActiveCurrent+0x74>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fc60 	bl	800111c <__aeabi_fcmpgt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d100      	bne.n	8002864 <hlw8012_expected_ActiveCurrent+0x38>
}
 8002862:	e018      	b.n	8002896 <hlw8012_expected_ActiveCurrent+0x6a>
	if (_current > 0) _current_multiplier *= ((value / _current));
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <hlw8012_expected_ActiveCurrent+0x74>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fded 	bl	8000448 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002876:	f7fd ff69 	bl	800074c <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <hlw8012_expected_ActiveCurrent+0x78>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fe36 	bl	80004f8 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4904      	ldr	r1, [pc, #16]	; (80028a4 <hlw8012_expected_ActiveCurrent+0x78>)
 8002892:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000063c 	.word	0x2000063c
 80028a4:	200008c8 	.word	0x200008c8

080028a8 <hlw8012_expected_Activevoltage>:
void hlw8012_expected_Activevoltage(double value)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	e9c7 0100 	strd	r0, r1, [r7]
	 if (_voltage == 0) hlw8012_getvoltage();
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <hlw8012_expected_Activevoltage+0x74>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fc06 	bl	80010cc <__aeabi_fcmpeq>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <hlw8012_expected_Activevoltage+0x22>
 80028c6:	f7ff fefb 	bl	80026c0 <hlw8012_getvoltage>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <hlw8012_expected_Activevoltage+0x74>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fc22 	bl	800111c <__aeabi_fcmpgt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d100      	bne.n	80028e0 <hlw8012_expected_Activevoltage+0x38>
}
 80028de:	e018      	b.n	8002912 <hlw8012_expected_Activevoltage+0x6a>
	 if (_voltage > 0) _voltage_multiplier *= (((double) value / _voltage));
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <hlw8012_expected_Activevoltage+0x74>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fdaf 	bl	8000448 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f2:	f7fd ff2b 	bl	800074c <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <hlw8012_expected_Activevoltage+0x78>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fdf8 	bl	80004f8 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4904      	ldr	r1, [pc, #16]	; (8002920 <hlw8012_expected_Activevoltage+0x78>)
 800290e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000640 	.word	0x20000640
 8002920:	200008d8 	.word	0x200008d8

08002924 <hlw8012_expected_Activepower>:
void hlw8012_expected_Activepower(unsigned int value)
{
 8002924:	b5b0      	push	{r4, r5, r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	  if (_power == 0) hlw8012_getactivepower();
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <hlw8012_expected_Activepower+0x7c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fbc9 	bl	80010cc <__aeabi_fcmpeq>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <hlw8012_expected_Activepower+0x20>
 8002940:	f7ff ff36 	bl	80027b0 <hlw8012_getactivepower>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <hlw8012_expected_Activepower+0x7c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fbe5 	bl	800111c <__aeabi_fcmpgt>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d100      	bne.n	800295a <hlw8012_expected_Activepower+0x36>
}
 8002958:	e01d      	b.n	8002996 <hlw8012_expected_Activepower+0x72>
	  if (_power > 0) _power_multiplier *= ((double) value / _power);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fd52 	bl	8000404 <__aeabi_ui2d>
 8002960:	4604      	mov	r4, r0
 8002962:	460d      	mov	r5, r1
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <hlw8012_expected_Activepower+0x7c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd6d 	bl	8000448 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fee9 	bl	800074c <__aeabi_ddiv>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <hlw8012_expected_Activepower+0x80>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fdb6 	bl	80004f8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4904      	ldr	r1, [pc, #16]	; (80029a4 <hlw8012_expected_Activepower+0x80>)
 8002992:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000644 	.word	0x20000644
 80029a4:	200008d0 	.word	0x200008d0

080029a8 <hlw8012_calculate_default_multiplier>:
void hlw8012_calculate_default_multiplier()
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	 _current_multiplier = ( 1000000.0 * 512 * V_REF / _current_resistor / 24.0 / F_OSC );
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <hlw8012_calculate_default_multiplier+0xf0>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	a133      	add	r1, pc, #204	; (adr r1, 8002a80 <hlw8012_calculate_default_multiplier+0xd8>)
 80029b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029b8:	f7fd fec8 	bl	800074c <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <hlw8012_calculate_default_multiplier+0xf4>)
 80029ca:	f7fd febf 	bl	800074c <__aeabi_ddiv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	a32c      	add	r3, pc, #176	; (adr r3, 8002a88 <hlw8012_calculate_default_multiplier+0xe0>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd feb6 	bl	800074c <__aeabi_ddiv>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	492e      	ldr	r1, [pc, #184]	; (8002aa0 <hlw8012_calculate_default_multiplier+0xf8>)
 80029e6:	e9c1 2300 	strd	r2, r3, [r1]
	 _voltage_multiplier = ( 1000000.0 * 512 * V_REF * _voltage_resistor / 2.0 / F_OSC );
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <hlw8012_calculate_default_multiplier+0xfc>)
 80029ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f0:	a323      	add	r3, pc, #140	; (adr r3, 8002a80 <hlw8012_calculate_default_multiplier+0xd8>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fd fd7f 	bl	80004f8 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a0a:	f7fd fe9f 	bl	800074c <__aeabi_ddiv>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	a31c      	add	r3, pc, #112	; (adr r3, 8002a88 <hlw8012_calculate_default_multiplier+0xe0>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fe96 	bl	800074c <__aeabi_ddiv>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4920      	ldr	r1, [pc, #128]	; (8002aa8 <hlw8012_calculate_default_multiplier+0x100>)
 8002a26:	e9c1 2300 	strd	r2, r3, [r1]
	 _power_multiplier = ( 1000000.0 * 128 * V_REF * V_REF * _voltage_resistor / _current_resistor / 48.0 / F_OSC );
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <hlw8012_calculate_default_multiplier+0xfc>)
 8002a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a30:	a317      	add	r3, pc, #92	; (adr r3, 8002a90 <hlw8012_calculate_default_multiplier+0xe8>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fd5f 	bl	80004f8 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <hlw8012_calculate_default_multiplier+0xf0>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fe80 	bl	800074c <__aeabi_ddiv>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <hlw8012_calculate_default_multiplier+0x104>)
 8002a5a:	f7fd fe77 	bl	800074c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	a308      	add	r3, pc, #32	; (adr r3, 8002a88 <hlw8012_calculate_default_multiplier+0xe0>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fe6e 	bl	800074c <__aeabi_ddiv>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <hlw8012_calculate_default_multiplier+0x108>)
 8002a76:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	00000000 	.word	0x00000000
 8002a84:	41d28a18 	.word	0x41d28a18
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	414b4e3c 	.word	0x414b4e3c
 8002a90:	00000000 	.word	0x00000000
 8002a94:	41c68681 	.word	0x41c68681
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	40380000 	.word	0x40380000
 8002aa0:	200008c8 	.word	0x200008c8
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	200008d8 	.word	0x200008d8
 8002aac:	40480000 	.word	0x40480000
 8002ab0:	200008d0 	.word	0x200008d0

08002ab4 <hlw8012_setResistors>:

void hlw8012_setResistors( double current, double voltage_upstream, double voltage_downstream)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002abe:	e9c7 2300 	strd	r2, r3, [r7]
	if (voltage_downstream > 0) {
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ace:	f7fd ffa3 	bl	8000a18 <__aeabi_dcmpgt>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d100      	bne.n	8002ada <hlw8012_setResistors+0x26>
	        _current_resistor = current;
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
	        hlw8012_calculate_default_multiplier();
	    }
}
 8002ad8:	e019      	b.n	8002b0e <hlw8012_setResistors+0x5a>
	        _current_resistor = current;
 8002ada:	490f      	ldr	r1, [pc, #60]	; (8002b18 <hlw8012_setResistors+0x64>)
 8002adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae0:	e9c1 2300 	strd	r2, r3, [r1]
	        _voltage_resistor = (voltage_upstream + voltage_downstream) / voltage_downstream;
 8002ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aec:	f7fd fb4e 	bl	800018c <__adddf3>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afc:	f7fd fe26 	bl	800074c <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4905      	ldr	r1, [pc, #20]	; (8002b1c <hlw8012_setResistors+0x68>)
 8002b06:	e9c1 2300 	strd	r2, r3, [r1]
	        hlw8012_calculate_default_multiplier();
 8002b0a:	f7ff ff4d 	bl	80029a8 <hlw8012_calculate_default_multiplier>
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000008 	.word	0x20000008

08002b20 <hlw8012_calibrate>:
void hlw8012_calibrate()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	ssd1306_GotoXY(0, 0);
 8002b24:	2100      	movs	r1, #0
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7ff f9fa 	bl	8001f20 <ssd1306_GotoXY>
	ssd1306_print_string("Calibrating the sensor:", GB_SSD1306_COLOR_WHITE);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	482c      	ldr	r0, [pc, #176]	; (8002be0 <hlw8012_calibrate+0xc0>)
 8002b30:	f7ff fa74 	bl	800201c <ssd1306_print_string>
	ssd1306_update_data();
 8002b34:	f7ff f9b4 	bl	8001ea0 <ssd1306_update_data>


	ssd1306_GotoXY(0, 24);
 8002b38:	2118      	movs	r1, #24
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff f9f0 	bl	8001f20 <ssd1306_GotoXY>
	ssd1306_print_string("Cali the Power values:", GB_SSD1306_COLOR_WHITE);
 8002b40:	2101      	movs	r1, #1
 8002b42:	4828      	ldr	r0, [pc, #160]	; (8002be4 <hlw8012_calibrate+0xc4>)
 8002b44:	f7ff fa6a 	bl	800201c <ssd1306_print_string>
	ssd1306_update_data();
 8002b48:	f7ff f9aa 	bl	8001ea0 <ssd1306_update_data>
	gb_unblockingDelay(2000);
 8002b4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b50:	f7ff fd44 	bl	80025dc <gb_unblockingDelay>
	hlw8012_getactivepower();
 8002b54:	f7ff fe2c 	bl	80027b0 <hlw8012_getactivepower>

	hlw8012_sel_high_current();
 8002b58:	f7ff fcd8 	bl	800250c <hlw8012_sel_high_current>
	ssd1306_GotoXY(0, 8);
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff f9de 	bl	8001f20 <ssd1306_GotoXY>
	ssd1306_print_string("Cali the current values:", GB_SSD1306_COLOR_WHITE);
 8002b64:	2101      	movs	r1, #1
 8002b66:	4820      	ldr	r0, [pc, #128]	; (8002be8 <hlw8012_calibrate+0xc8>)
 8002b68:	f7ff fa58 	bl	800201c <ssd1306_print_string>
	ssd1306_update_data();
 8002b6c:	f7ff f998 	bl	8001ea0 <ssd1306_update_data>
	gb_unblockingDelay(2000);
 8002b70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b74:	f7ff fd32 	bl	80025dc <gb_unblockingDelay>
	hlw8012_getcurrent();
 8002b78:	f7ff fd48 	bl	800260c <hlw8012_getcurrent>

	hlw8012_sel_low_volatge();
 8002b7c:	f7ff fcd4 	bl	8002528 <hlw8012_sel_low_volatge>
	ssd1306_GotoXY(0, 16);
 8002b80:	2110      	movs	r1, #16
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff f9cc 	bl	8001f20 <ssd1306_GotoXY>
	ssd1306_print_string("Cali the Voltage values:", GB_SSD1306_COLOR_WHITE);
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4818      	ldr	r0, [pc, #96]	; (8002bec <hlw8012_calibrate+0xcc>)
 8002b8c:	f7ff fa46 	bl	800201c <ssd1306_print_string>
	ssd1306_update_data();
 8002b90:	f7ff f986 	bl	8001ea0 <ssd1306_update_data>
	gb_unblockingDelay(2000);
 8002b94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b98:	f7ff fd20 	bl	80025dc <gb_unblockingDelay>
	hlw8012_getvoltage();
 8002b9c:	f7ff fd90 	bl	80026c0 <hlw8012_getvoltage>

	hlw8012_expected_Activepower(165.0);
 8002ba0:	20a5      	movs	r0, #165	; 0xa5
 8002ba2:	f7ff febf 	bl	8002924 <hlw8012_expected_Activepower>
	hlw8012_expected_Activevoltage(226.0);
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <hlw8012_calibrate+0xd0>)
 8002bac:	f7ff fe7c 	bl	80028a8 <hlw8012_expected_Activevoltage>
	hlw8012_expected_ActiveCurrent(0.730);
 8002bb0:	a109      	add	r1, pc, #36	; (adr r1, 8002bd8 <hlw8012_calibrate+0xb8>)
 8002bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb6:	f7ff fe39 	bl	800282c <hlw8012_expected_ActiveCurrent>

	ssd1306_GotoXY(0, 32);
 8002bba:	2120      	movs	r1, #32
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff f9af 	bl	8001f20 <ssd1306_GotoXY>
	ssd1306_print_string("Values are calibrated:", GB_SSD1306_COLOR_WHITE);
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <hlw8012_calibrate+0xd4>)
 8002bc6:	f7ff fa29 	bl	800201c <ssd1306_print_string>
	ssd1306_update_data();
 8002bca:	f7ff f969 	bl	8001ea0 <ssd1306_update_data>
//	GB_printString1(" New Power Multiplier");
//	GB_decimel1(hlw8012_getpower_multiplier());
//	GB_uart_newline1();


	ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff f9bc 	bl	8001f4c <ssd1306_clear>

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	f5c28f5c 	.word	0xf5c28f5c
 8002bdc:	3fe75c28 	.word	0x3fe75c28
 8002be0:	08007dc8 	.word	0x08007dc8
 8002be4:	08007de0 	.word	0x08007de0
 8002be8:	08007df8 	.word	0x08007df8
 8002bec:	08007e14 	.word	0x08007e14
 8002bf0:	406c4000 	.word	0x406c4000
 8002bf4:	08007e30 	.word	0x08007e30

08002bf8 <__NVIC_EnableIRQ>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <__NVIC_EnableIRQ+0x34>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002c9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ca0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ca4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002cac:	e000      	b.n	8002cb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002cae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002cb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f9      	beq.n	8002cae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002cba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <_write>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )


int _write(int file, char *ptr, int len)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e009      	b.n	8002cf6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		 ITM_SendChar(*ptr++);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ffca 	bl	8002c84 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	dbf1      	blt.n	8002ce2 <_write+0x12>
	}
	return len;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <main>:
//const char gb_url[100] = "api.thingspeak.com";



int main(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af02      	add	r7, sp, #8
	  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <main+0x188>)
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	4a5f      	ldr	r2, [pc, #380]	; (8002e90 <main+0x188>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6193      	str	r3, [r2, #24]
		AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 8002d1a:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <main+0x18c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <main+0x18c>)
 8002d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d24:	6053      	str	r3, [r2, #4]
	    systick_millis(32000);
 8002d26:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8002d2a:	f7fe fddb 	bl	80018e4 <systick_millis>
	    system_clk();
 8002d2e:	f7fe fff1 	bl	8001d14 <system_clk>
		timer_initialise();
 8002d32:	f7ff f9ab 	bl	800208c <timer_initialise>

		ssd1306_init();
 8002d36:	f7ff f83f 	bl	8001db8 <ssd1306_init>
		ssd1306_clear(GB_SSD1306_COLOR_BLACK);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7ff f906 	bl	8001f4c <ssd1306_clear>
		ssd1306_update_data();
 8002d40:	f7ff f8ae 	bl	8001ea0 <ssd1306_update_data>


		GB_uart_init1();  //terminal
 8002d44:	f7fe fe1e 	bl	8001984 <GB_uart_init1>
		GB_printString1("Timer input capture\n");
 8002d48:	4853      	ldr	r0, [pc, #332]	; (8002e98 <main+0x190>)
 8002d4a:	f7fe fe57 	bl	80019fc <GB_printString1>
		GB_uart_init2();  	//ESP8266
 8002d4e:	f7fe fea7 	bl	8001aa0 <GB_uart_init2>
			__NVIC_EnableIRQ(USART2_IRQn);
 8002d52:	2026      	movs	r0, #38	; 0x26
 8002d54:	f7ff ff50 	bl	8002bf8 <__NVIC_EnableIRQ>
			__NVIC_SetPriority (USART2_IRQn, 1);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	2026      	movs	r0, #38	; 0x26
 8002d5c:	f7ff ff68 	bl	8002c30 <__NVIC_SetPriority>
			GB_esp8266_initialise_client();
 8002d60:	f7fe fc64 	bl	800162c <GB_esp8266_initialise_client>

		gb_t4_input_capture();
 8002d64:	f7ff fa7e 	bl	8002264 <gb_t4_input_capture>
		__NVIC_SetPriority (TIM4_IRQn, 0);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	201e      	movs	r0, #30
 8002d6c:	f7ff ff60 	bl	8002c30 <__NVIC_SetPriority>
		__NVIC_EnableIRQ(TIM4_IRQn);
 8002d70:	201e      	movs	r0, #30
 8002d72:	f7ff ff41 	bl	8002bf8 <__NVIC_EnableIRQ>

		hlw8012_config();
 8002d76:	f7ff fc2b 	bl	80025d0 <hlw8012_config>
		hlw8012_setResistors(CURRENT_RESISTOR, VOLTAGE_RESISTOR_UPSTREAM, VOLTAGE_RESISTOR_DOWNSTREAM);
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <main+0x194>)
 8002d80:	e9cd 2300 	strd	r2, r3, [sp]
 8002d84:	a33e      	add	r3, pc, #248	; (adr r3, 8002e80 <main+0x178>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	a13f      	add	r1, pc, #252	; (adr r1, 8002e88 <main+0x180>)
 8002d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d90:	f7ff fe90 	bl	8002ab4 <hlw8012_setResistors>
//		GB_printString1(" Default Voltage Multiplier");
//		GB_decimel1(hlw8012_getvoltage_multiplier());
//		GB_printString1(" Default Power Multiplier");
//		GB_decimel1(hlw8012_getpower_multiplier());

		hlw8012_calibrate();
 8002d94:	f7ff fec4 	bl	8002b20 <hlw8012_calibrate>

		while(1)
		{


			ssd1306_GotoXY(0, 0);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff f8c0 	bl	8001f20 <ssd1306_GotoXY>
			ssd1306_print_string("Connecting to web server:", GB_SSD1306_COLOR_WHITE);
 8002da0:	2101      	movs	r1, #1
 8002da2:	483f      	ldr	r0, [pc, #252]	; (8002ea0 <main+0x198>)
 8002da4:	f7ff f93a 	bl	800201c <ssd1306_print_string>
			ssd1306_update_data();
 8002da8:	f7ff f87a 	bl	8001ea0 <ssd1306_update_data>
			GB_esp8266_connectTCPserver(gb_url,80);
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	483d      	ldr	r0, [pc, #244]	; (8002ea4 <main+0x19c>)
 8002db0:	f7fe fc54 	bl	800165c <GB_esp8266_connectTCPserver>

			ssd1306_GotoXY(0, 15);
 8002db4:	210f      	movs	r1, #15
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7ff f8b2 	bl	8001f20 <ssd1306_GotoXY>
			ssd1306_print_string("Now sending data, server connected:", GB_SSD1306_COLOR_WHITE);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	483a      	ldr	r0, [pc, #232]	; (8002ea8 <main+0x1a0>)
 8002dc0:	f7ff f92c 	bl	800201c <ssd1306_print_string>
			ssd1306_update_data();
 8002dc4:	f7ff f86c 	bl	8001ea0 <ssd1306_update_data>
		   // GB_esp8266_cipsendfloat(hlw8012_getcurrent(),gb_urlpathcurrent);
			 GB_esp8266_cipsendfloat(hlw8012_getvoltage(),gb_urlpathvoltage);
 8002dc8:	f7ff fc7a 	bl	80026c0 <hlw8012_getvoltage>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4937      	ldr	r1, [pc, #220]	; (8002eac <main+0x1a4>)
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fc9b 	bl	800170c <GB_esp8266_cipsendfloat>

		    ssd1306_GotoXY(0, 24);
 8002dd6:	2118      	movs	r1, #24
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff f8a1 	bl	8001f20 <ssd1306_GotoXY>
		    ssd1306_print_string("DataSend and readings are:", GB_SSD1306_COLOR_WHITE);
 8002dde:	2101      	movs	r1, #1
 8002de0:	4833      	ldr	r0, [pc, #204]	; (8002eb0 <main+0x1a8>)
 8002de2:	f7ff f91b 	bl	800201c <ssd1306_print_string>
		    ssd1306_update_data();
 8002de6:	f7ff f85b 	bl	8001ea0 <ssd1306_update_data>
			//GB_esp8266_tcpgetcommandfloat(gb_urlpathcurrent,hlw8012_getcurrent());
		    GB_esp8266_tcpgetcommandfloat(gb_urlpathvoltage,hlw8012_getvoltage());
 8002dea:	f7ff fc69 	bl	80026c0 <hlw8012_getvoltage>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	482e      	ldr	r0, [pc, #184]	; (8002eac <main+0x1a4>)
 8002df4:	f7fe fcb0 	bl	8001758 <GB_esp8266_tcpgetcommandfloat>
		    delay_ms(2000);
 8002df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dfc:	f7ff f9b8 	bl	8002170 <delay_ms>


		    GB_esp8266_connectTCPserver(gb_url,80);
 8002e00:	2150      	movs	r1, #80	; 0x50
 8002e02:	4828      	ldr	r0, [pc, #160]	; (8002ea4 <main+0x19c>)
 8002e04:	f7fe fc2a 	bl	800165c <GB_esp8266_connectTCPserver>
		    GB_esp8266_cipsendfloat(hlw8012_getcurrent(),gb_urlpathcurrent);
 8002e08:	f7ff fc00 	bl	800260c <hlw8012_getcurrent>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <main+0x1ac>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fc7b 	bl	800170c <GB_esp8266_cipsendfloat>
		    GB_esp8266_tcpgetcommandfloat(gb_urlpathvoltage,hlw8012_getvoltage());
 8002e16:	f7ff fc53 	bl	80026c0 <hlw8012_getvoltage>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4823      	ldr	r0, [pc, #140]	; (8002eac <main+0x1a4>)
 8002e20:	f7fe fc9a 	bl	8001758 <GB_esp8266_tcpgetcommandfloat>

			ssd1306_GotoXY(0, 40);
 8002e24:	2128      	movs	r1, #40	; 0x28
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff f87a 	bl	8001f20 <ssd1306_GotoXY>
		    ssd1306_print_string("Current:", GB_SSD1306_COLOR_WHITE);
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4822      	ldr	r0, [pc, #136]	; (8002eb8 <main+0x1b0>)
 8002e30:	f7ff f8f4 	bl	800201c <ssd1306_print_string>
		    ssd1306_float(hlw8012_getcurrent(),GB_SSD1306_COLOR_WHITE);
 8002e34:	f7ff fbea 	bl	800260c <hlw8012_getcurrent>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f907 	bl	8002050 <ssd1306_float>
		    ssd1306_print_string(" A", GB_SSD1306_COLOR_WHITE);
 8002e42:	2101      	movs	r1, #1
 8002e44:	481d      	ldr	r0, [pc, #116]	; (8002ebc <main+0x1b4>)
 8002e46:	f7ff f8e9 	bl	800201c <ssd1306_print_string>
		    ssd1306_update_data();
 8002e4a:	f7ff f829 	bl	8001ea0 <ssd1306_update_data>

			ssd1306_GotoXY(0, 48);
 8002e4e:	2130      	movs	r1, #48	; 0x30
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7ff f865 	bl	8001f20 <ssd1306_GotoXY>
		    ssd1306_print_string("Voltage:", GB_SSD1306_COLOR_WHITE);
 8002e56:	2101      	movs	r1, #1
 8002e58:	4819      	ldr	r0, [pc, #100]	; (8002ec0 <main+0x1b8>)
 8002e5a:	f7ff f8df 	bl	800201c <ssd1306_print_string>
		    ssd1306_float(hlw8012_getvoltage(),GB_SSD1306_COLOR_WHITE);
 8002e5e:	f7ff fc2f 	bl	80026c0 <hlw8012_getvoltage>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f8f2 	bl	8002050 <ssd1306_float>
		    ssd1306_print_string(" V", GB_SSD1306_COLOR_WHITE);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <main+0x1bc>)
 8002e70:	f7ff f8d4 	bl	800201c <ssd1306_print_string>
			ssd1306_update_data();
 8002e74:	f7ff f814 	bl	8001ea0 <ssd1306_update_data>
			ssd1306_GotoXY(0, 0);
 8002e78:	e78e      	b.n	8002d98 <main+0x90>
 8002e7a:	bf00      	nop
 8002e7c:	f3af 8000 	nop.w
 8002e80:	00000000 	.word	0x00000000
 8002e84:	4141edd8 	.word	0x4141edd8
 8002e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e8c:	3f50624d 	.word	0x3f50624d
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	08007e48 	.word	0x08007e48
 8002e9c:	408f4000 	.word	0x408f4000
 8002ea0:	08007e60 	.word	0x08007e60
 8002ea4:	08008180 	.word	0x08008180
 8002ea8:	08007e7c 	.word	0x08007e7c
 8002eac:	0800811c 	.word	0x0800811c
 8002eb0:	08007ea0 	.word	0x08007ea0
 8002eb4:	080080b8 	.word	0x080080b8
 8002eb8:	08007ebc 	.word	0x08007ebc
 8002ebc:	08007ec8 	.word	0x08007ec8
 8002ec0:	08007ecc 	.word	0x08007ecc
 8002ec4:	08007ed8 	.word	0x08007ed8

08002ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
	return 1;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <_kill>:

int _kill(int pid, int sig)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ee0:	f000 f8c6 	bl	8003070 <__errno>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2216      	movs	r2, #22
 8002ee8:	601a      	str	r2, [r3, #0]
	return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_exit>:

void _exit (int status)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002efe:	f04f 31ff 	mov.w	r1, #4294967295
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffe7 	bl	8002ed6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f08:	e7fe      	b.n	8002f08 <_exit+0x12>

08002f0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e00a      	b.n	8002f32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f1c:	f3af 8000 	nop.w
 8002f20:	4601      	mov	r1, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	60ba      	str	r2, [r7, #8]
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	dbf0      	blt.n	8002f1c <_read+0x12>
	}

return len;
 8002f3a:	687b      	ldr	r3, [r7, #4]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	return -1;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <_isatty>:

int _isatty(int file)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
	return 0;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f000 f84c 	bl	8003070 <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	220c      	movs	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20005000 	.word	0x20005000
 8003004:	00000400 	.word	0x00000400
 8003008:	20000654 	.word	0x20000654
 800300c:	200008f0 	.word	0x200008f0

08003010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800301c:	480d      	ldr	r0, [pc, #52]	; (8003054 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800301e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003020:	f7ff fff6 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <LoopForever+0x6>)
  ldr r1, =_edata
 8003026:	490d      	ldr	r1, [pc, #52]	; (800305c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <LoopForever+0xe>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <LoopForever+0x16>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800304a:	f000 f817 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800304e:	f7ff fe5b 	bl	8002d08 <main>

08003052 <LoopForever>:

LoopForever:
    b LoopForever
 8003052:	e7fe      	b.n	8003052 <LoopForever>
  ldr   r0, =_estack
 8003054:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800305c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003060:	080086a4 	.word	0x080086a4
  ldr r2, =_sbss
 8003064:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003068:	200008f0 	.word	0x200008f0

0800306c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_2_IRQHandler>
	...

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000010 	.word	0x20000010

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	2600      	movs	r6, #0
 8003080:	4d0c      	ldr	r5, [pc, #48]	; (80030b4 <__libc_init_array+0x38>)
 8003082:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003084:	1b64      	subs	r4, r4, r5
 8003086:	10a4      	asrs	r4, r4, #2
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	f004 fc60 	bl	8007950 <_init>
 8003090:	2600      	movs	r6, #0
 8003092:	4d0a      	ldr	r5, [pc, #40]	; (80030bc <__libc_init_array+0x40>)
 8003094:	4c0a      	ldr	r4, [pc, #40]	; (80030c0 <__libc_init_array+0x44>)
 8003096:	1b64      	subs	r4, r4, r5
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	0800869c 	.word	0x0800869c
 80030b8:	0800869c 	.word	0x0800869c
 80030bc:	0800869c 	.word	0x0800869c
 80030c0:	080086a0 	.word	0x080086a0

080030c4 <memcpy>:
 80030c4:	440a      	add	r2, r1
 80030c6:	4291      	cmp	r1, r2
 80030c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80030cc:	d100      	bne.n	80030d0 <memcpy+0xc>
 80030ce:	4770      	bx	lr
 80030d0:	b510      	push	{r4, lr}
 80030d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d6:	4291      	cmp	r1, r2
 80030d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030dc:	d1f9      	bne.n	80030d2 <memcpy+0xe>
 80030de:	bd10      	pop	{r4, pc}

080030e0 <memset>:
 80030e0:	4603      	mov	r3, r0
 80030e2:	4402      	add	r2, r0
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d100      	bne.n	80030ea <memset+0xa>
 80030e8:	4770      	bx	lr
 80030ea:	f803 1b01 	strb.w	r1, [r3], #1
 80030ee:	e7f9      	b.n	80030e4 <memset+0x4>

080030f0 <__cvt>:
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f6:	461f      	mov	r7, r3
 80030f8:	bfbb      	ittet	lt
 80030fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80030fe:	461f      	movlt	r7, r3
 8003100:	2300      	movge	r3, #0
 8003102:	232d      	movlt	r3, #45	; 0x2d
 8003104:	b088      	sub	sp, #32
 8003106:	4614      	mov	r4, r2
 8003108:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800310a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800310c:	7013      	strb	r3, [r2, #0]
 800310e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003110:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003114:	f023 0820 	bic.w	r8, r3, #32
 8003118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800311c:	d005      	beq.n	800312a <__cvt+0x3a>
 800311e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003122:	d100      	bne.n	8003126 <__cvt+0x36>
 8003124:	3501      	adds	r5, #1
 8003126:	2302      	movs	r3, #2
 8003128:	e000      	b.n	800312c <__cvt+0x3c>
 800312a:	2303      	movs	r3, #3
 800312c:	aa07      	add	r2, sp, #28
 800312e:	9204      	str	r2, [sp, #16]
 8003130:	aa06      	add	r2, sp, #24
 8003132:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003136:	e9cd 3500 	strd	r3, r5, [sp]
 800313a:	4622      	mov	r2, r4
 800313c:	463b      	mov	r3, r7
 800313e:	f001 fe97 	bl	8004e70 <_dtoa_r>
 8003142:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003146:	4606      	mov	r6, r0
 8003148:	d102      	bne.n	8003150 <__cvt+0x60>
 800314a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800314c:	07db      	lsls	r3, r3, #31
 800314e:	d522      	bpl.n	8003196 <__cvt+0xa6>
 8003150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003154:	eb06 0905 	add.w	r9, r6, r5
 8003158:	d110      	bne.n	800317c <__cvt+0x8c>
 800315a:	7833      	ldrb	r3, [r6, #0]
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d10a      	bne.n	8003176 <__cvt+0x86>
 8003160:	2200      	movs	r2, #0
 8003162:	2300      	movs	r3, #0
 8003164:	4620      	mov	r0, r4
 8003166:	4639      	mov	r1, r7
 8003168:	f7fd fc2e 	bl	80009c8 <__aeabi_dcmpeq>
 800316c:	b918      	cbnz	r0, 8003176 <__cvt+0x86>
 800316e:	f1c5 0501 	rsb	r5, r5, #1
 8003172:	f8ca 5000 	str.w	r5, [sl]
 8003176:	f8da 3000 	ldr.w	r3, [sl]
 800317a:	4499      	add	r9, r3
 800317c:	2200      	movs	r2, #0
 800317e:	2300      	movs	r3, #0
 8003180:	4620      	mov	r0, r4
 8003182:	4639      	mov	r1, r7
 8003184:	f7fd fc20 	bl	80009c8 <__aeabi_dcmpeq>
 8003188:	b108      	cbz	r0, 800318e <__cvt+0x9e>
 800318a:	f8cd 901c 	str.w	r9, [sp, #28]
 800318e:	2230      	movs	r2, #48	; 0x30
 8003190:	9b07      	ldr	r3, [sp, #28]
 8003192:	454b      	cmp	r3, r9
 8003194:	d307      	bcc.n	80031a6 <__cvt+0xb6>
 8003196:	4630      	mov	r0, r6
 8003198:	9b07      	ldr	r3, [sp, #28]
 800319a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800319c:	1b9b      	subs	r3, r3, r6
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	b008      	add	sp, #32
 80031a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	9107      	str	r1, [sp, #28]
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e7f0      	b.n	8003190 <__cvt+0xa0>

080031ae <__exponent>:
 80031ae:	4603      	mov	r3, r0
 80031b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031b2:	2900      	cmp	r1, #0
 80031b4:	f803 2b02 	strb.w	r2, [r3], #2
 80031b8:	bfb6      	itet	lt
 80031ba:	222d      	movlt	r2, #45	; 0x2d
 80031bc:	222b      	movge	r2, #43	; 0x2b
 80031be:	4249      	neglt	r1, r1
 80031c0:	2909      	cmp	r1, #9
 80031c2:	7042      	strb	r2, [r0, #1]
 80031c4:	dd2b      	ble.n	800321e <__exponent+0x70>
 80031c6:	f10d 0407 	add.w	r4, sp, #7
 80031ca:	46a4      	mov	ip, r4
 80031cc:	270a      	movs	r7, #10
 80031ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80031d2:	460a      	mov	r2, r1
 80031d4:	46a6      	mov	lr, r4
 80031d6:	fb07 1516 	mls	r5, r7, r6, r1
 80031da:	2a63      	cmp	r2, #99	; 0x63
 80031dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80031e0:	4631      	mov	r1, r6
 80031e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80031e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031ea:	dcf0      	bgt.n	80031ce <__exponent+0x20>
 80031ec:	3130      	adds	r1, #48	; 0x30
 80031ee:	f1ae 0502 	sub.w	r5, lr, #2
 80031f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031f6:	4629      	mov	r1, r5
 80031f8:	1c44      	adds	r4, r0, #1
 80031fa:	4561      	cmp	r1, ip
 80031fc:	d30a      	bcc.n	8003214 <__exponent+0x66>
 80031fe:	f10d 0209 	add.w	r2, sp, #9
 8003202:	eba2 020e 	sub.w	r2, r2, lr
 8003206:	4565      	cmp	r5, ip
 8003208:	bf88      	it	hi
 800320a:	2200      	movhi	r2, #0
 800320c:	4413      	add	r3, r2
 800320e:	1a18      	subs	r0, r3, r0
 8003210:	b003      	add	sp, #12
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003218:	f804 2f01 	strb.w	r2, [r4, #1]!
 800321c:	e7ed      	b.n	80031fa <__exponent+0x4c>
 800321e:	2330      	movs	r3, #48	; 0x30
 8003220:	3130      	adds	r1, #48	; 0x30
 8003222:	7083      	strb	r3, [r0, #2]
 8003224:	70c1      	strb	r1, [r0, #3]
 8003226:	1d03      	adds	r3, r0, #4
 8003228:	e7f1      	b.n	800320e <__exponent+0x60>
	...

0800322c <_printf_float>:
 800322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003230:	b091      	sub	sp, #68	; 0x44
 8003232:	460c      	mov	r4, r1
 8003234:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003238:	4616      	mov	r6, r2
 800323a:	461f      	mov	r7, r3
 800323c:	4605      	mov	r5, r0
 800323e:	f003 f923 	bl	8006488 <_localeconv_r>
 8003242:	6803      	ldr	r3, [r0, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	9309      	str	r3, [sp, #36]	; 0x24
 8003248:	f7fc ff92 	bl	8000170 <strlen>
 800324c:	2300      	movs	r3, #0
 800324e:	930e      	str	r3, [sp, #56]	; 0x38
 8003250:	f8d8 3000 	ldr.w	r3, [r8]
 8003254:	900a      	str	r0, [sp, #40]	; 0x28
 8003256:	3307      	adds	r3, #7
 8003258:	f023 0307 	bic.w	r3, r3, #7
 800325c:	f103 0208 	add.w	r2, r3, #8
 8003260:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003264:	f8d4 b000 	ldr.w	fp, [r4]
 8003268:	f8c8 2000 	str.w	r2, [r8]
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003274:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003278:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800327c:	930b      	str	r3, [sp, #44]	; 0x2c
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	4640      	mov	r0, r8
 8003284:	4b9c      	ldr	r3, [pc, #624]	; (80034f8 <_printf_float+0x2cc>)
 8003286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003288:	f7fd fbd0 	bl	8000a2c <__aeabi_dcmpun>
 800328c:	bb70      	cbnz	r0, 80032ec <_printf_float+0xc0>
 800328e:	f04f 32ff 	mov.w	r2, #4294967295
 8003292:	4640      	mov	r0, r8
 8003294:	4b98      	ldr	r3, [pc, #608]	; (80034f8 <_printf_float+0x2cc>)
 8003296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003298:	f7fd fbaa 	bl	80009f0 <__aeabi_dcmple>
 800329c:	bb30      	cbnz	r0, 80032ec <_printf_float+0xc0>
 800329e:	2200      	movs	r2, #0
 80032a0:	2300      	movs	r3, #0
 80032a2:	4640      	mov	r0, r8
 80032a4:	4651      	mov	r1, sl
 80032a6:	f7fd fb99 	bl	80009dc <__aeabi_dcmplt>
 80032aa:	b110      	cbz	r0, 80032b2 <_printf_float+0x86>
 80032ac:	232d      	movs	r3, #45	; 0x2d
 80032ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b2:	4b92      	ldr	r3, [pc, #584]	; (80034fc <_printf_float+0x2d0>)
 80032b4:	4892      	ldr	r0, [pc, #584]	; (8003500 <_printf_float+0x2d4>)
 80032b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80032ba:	bf94      	ite	ls
 80032bc:	4698      	movls	r8, r3
 80032be:	4680      	movhi	r8, r0
 80032c0:	2303      	movs	r3, #3
 80032c2:	f04f 0a00 	mov.w	sl, #0
 80032c6:	6123      	str	r3, [r4, #16]
 80032c8:	f02b 0304 	bic.w	r3, fp, #4
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	4633      	mov	r3, r6
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	9700      	str	r7, [sp, #0]
 80032d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80032d8:	f000 f9d4 	bl	8003684 <_printf_common>
 80032dc:	3001      	adds	r0, #1
 80032de:	f040 8090 	bne.w	8003402 <_printf_float+0x1d6>
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	b011      	add	sp, #68	; 0x44
 80032e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ec:	4642      	mov	r2, r8
 80032ee:	4653      	mov	r3, sl
 80032f0:	4640      	mov	r0, r8
 80032f2:	4651      	mov	r1, sl
 80032f4:	f7fd fb9a 	bl	8000a2c <__aeabi_dcmpun>
 80032f8:	b148      	cbz	r0, 800330e <_printf_float+0xe2>
 80032fa:	f1ba 0f00 	cmp.w	sl, #0
 80032fe:	bfb8      	it	lt
 8003300:	232d      	movlt	r3, #45	; 0x2d
 8003302:	4880      	ldr	r0, [pc, #512]	; (8003504 <_printf_float+0x2d8>)
 8003304:	bfb8      	it	lt
 8003306:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <_printf_float+0x2dc>)
 800330c:	e7d3      	b.n	80032b6 <_printf_float+0x8a>
 800330e:	6863      	ldr	r3, [r4, #4]
 8003310:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	d142      	bne.n	800339e <_printf_float+0x172>
 8003318:	2306      	movs	r3, #6
 800331a:	6063      	str	r3, [r4, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	9206      	str	r2, [sp, #24]
 8003320:	aa0e      	add	r2, sp, #56	; 0x38
 8003322:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003326:	aa0d      	add	r2, sp, #52	; 0x34
 8003328:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003332:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	4642      	mov	r2, r8
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4628      	mov	r0, r5
 8003340:	4653      	mov	r3, sl
 8003342:	910b      	str	r1, [sp, #44]	; 0x2c
 8003344:	f7ff fed4 	bl	80030f0 <__cvt>
 8003348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800334a:	4680      	mov	r8, r0
 800334c:	2947      	cmp	r1, #71	; 0x47
 800334e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003350:	d108      	bne.n	8003364 <_printf_float+0x138>
 8003352:	1cc8      	adds	r0, r1, #3
 8003354:	db02      	blt.n	800335c <_printf_float+0x130>
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	4299      	cmp	r1, r3
 800335a:	dd40      	ble.n	80033de <_printf_float+0x1b2>
 800335c:	f1a9 0902 	sub.w	r9, r9, #2
 8003360:	fa5f f989 	uxtb.w	r9, r9
 8003364:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003368:	d81f      	bhi.n	80033aa <_printf_float+0x17e>
 800336a:	464a      	mov	r2, r9
 800336c:	3901      	subs	r1, #1
 800336e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003372:	910d      	str	r1, [sp, #52]	; 0x34
 8003374:	f7ff ff1b 	bl	80031ae <__exponent>
 8003378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800337a:	4682      	mov	sl, r0
 800337c:	1813      	adds	r3, r2, r0
 800337e:	2a01      	cmp	r2, #1
 8003380:	6123      	str	r3, [r4, #16]
 8003382:	dc02      	bgt.n	800338a <_printf_float+0x15e>
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	07d2      	lsls	r2, r2, #31
 8003388:	d501      	bpl.n	800338e <_printf_float+0x162>
 800338a:	3301      	adds	r3, #1
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003392:	2b00      	cmp	r3, #0
 8003394:	d09b      	beq.n	80032ce <_printf_float+0xa2>
 8003396:	232d      	movs	r3, #45	; 0x2d
 8003398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800339c:	e797      	b.n	80032ce <_printf_float+0xa2>
 800339e:	2947      	cmp	r1, #71	; 0x47
 80033a0:	d1bc      	bne.n	800331c <_printf_float+0xf0>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ba      	bne.n	800331c <_printf_float+0xf0>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e7b7      	b.n	800331a <_printf_float+0xee>
 80033aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80033ae:	d118      	bne.n	80033e2 <_printf_float+0x1b6>
 80033b0:	2900      	cmp	r1, #0
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	dd0b      	ble.n	80033ce <_printf_float+0x1a2>
 80033b6:	6121      	str	r1, [r4, #16]
 80033b8:	b913      	cbnz	r3, 80033c0 <_printf_float+0x194>
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	07d0      	lsls	r0, r2, #31
 80033be:	d502      	bpl.n	80033c6 <_printf_float+0x19a>
 80033c0:	3301      	adds	r3, #1
 80033c2:	440b      	add	r3, r1
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	f04f 0a00 	mov.w	sl, #0
 80033ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80033cc:	e7df      	b.n	800338e <_printf_float+0x162>
 80033ce:	b913      	cbnz	r3, 80033d6 <_printf_float+0x1aa>
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	07d2      	lsls	r2, r2, #31
 80033d4:	d501      	bpl.n	80033da <_printf_float+0x1ae>
 80033d6:	3302      	adds	r3, #2
 80033d8:	e7f4      	b.n	80033c4 <_printf_float+0x198>
 80033da:	2301      	movs	r3, #1
 80033dc:	e7f2      	b.n	80033c4 <_printf_float+0x198>
 80033de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80033e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e4:	4299      	cmp	r1, r3
 80033e6:	db05      	blt.n	80033f4 <_printf_float+0x1c8>
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	6121      	str	r1, [r4, #16]
 80033ec:	07d8      	lsls	r0, r3, #31
 80033ee:	d5ea      	bpl.n	80033c6 <_printf_float+0x19a>
 80033f0:	1c4b      	adds	r3, r1, #1
 80033f2:	e7e7      	b.n	80033c4 <_printf_float+0x198>
 80033f4:	2900      	cmp	r1, #0
 80033f6:	bfcc      	ite	gt
 80033f8:	2201      	movgt	r2, #1
 80033fa:	f1c1 0202 	rsble	r2, r1, #2
 80033fe:	4413      	add	r3, r2
 8003400:	e7e0      	b.n	80033c4 <_printf_float+0x198>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	055a      	lsls	r2, r3, #21
 8003406:	d407      	bmi.n	8003418 <_printf_float+0x1ec>
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	4642      	mov	r2, r8
 800340c:	4631      	mov	r1, r6
 800340e:	4628      	mov	r0, r5
 8003410:	47b8      	blx	r7
 8003412:	3001      	adds	r0, #1
 8003414:	d12b      	bne.n	800346e <_printf_float+0x242>
 8003416:	e764      	b.n	80032e2 <_printf_float+0xb6>
 8003418:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800341c:	f240 80dd 	bls.w	80035da <_printf_float+0x3ae>
 8003420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003424:	2200      	movs	r2, #0
 8003426:	2300      	movs	r3, #0
 8003428:	f7fd face 	bl	80009c8 <__aeabi_dcmpeq>
 800342c:	2800      	cmp	r0, #0
 800342e:	d033      	beq.n	8003498 <_printf_float+0x26c>
 8003430:	2301      	movs	r3, #1
 8003432:	4631      	mov	r1, r6
 8003434:	4628      	mov	r0, r5
 8003436:	4a35      	ldr	r2, [pc, #212]	; (800350c <_printf_float+0x2e0>)
 8003438:	47b8      	blx	r7
 800343a:	3001      	adds	r0, #1
 800343c:	f43f af51 	beq.w	80032e2 <_printf_float+0xb6>
 8003440:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003444:	429a      	cmp	r2, r3
 8003446:	db02      	blt.n	800344e <_printf_float+0x222>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	07d8      	lsls	r0, r3, #31
 800344c:	d50f      	bpl.n	800346e <_printf_float+0x242>
 800344e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003452:	4631      	mov	r1, r6
 8003454:	4628      	mov	r0, r5
 8003456:	47b8      	blx	r7
 8003458:	3001      	adds	r0, #1
 800345a:	f43f af42 	beq.w	80032e2 <_printf_float+0xb6>
 800345e:	f04f 0800 	mov.w	r8, #0
 8003462:	f104 091a 	add.w	r9, r4, #26
 8003466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003468:	3b01      	subs	r3, #1
 800346a:	4543      	cmp	r3, r8
 800346c:	dc09      	bgt.n	8003482 <_printf_float+0x256>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	079b      	lsls	r3, r3, #30
 8003472:	f100 8102 	bmi.w	800367a <_printf_float+0x44e>
 8003476:	68e0      	ldr	r0, [r4, #12]
 8003478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800347a:	4298      	cmp	r0, r3
 800347c:	bfb8      	it	lt
 800347e:	4618      	movlt	r0, r3
 8003480:	e731      	b.n	80032e6 <_printf_float+0xba>
 8003482:	2301      	movs	r3, #1
 8003484:	464a      	mov	r2, r9
 8003486:	4631      	mov	r1, r6
 8003488:	4628      	mov	r0, r5
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af28 	beq.w	80032e2 <_printf_float+0xb6>
 8003492:	f108 0801 	add.w	r8, r8, #1
 8003496:	e7e6      	b.n	8003466 <_printf_float+0x23a>
 8003498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	dc38      	bgt.n	8003510 <_printf_float+0x2e4>
 800349e:	2301      	movs	r3, #1
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	4a19      	ldr	r2, [pc, #100]	; (800350c <_printf_float+0x2e0>)
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f af1a 	beq.w	80032e2 <_printf_float+0xb6>
 80034ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034b2:	4313      	orrs	r3, r2
 80034b4:	d102      	bne.n	80034bc <_printf_float+0x290>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	07d9      	lsls	r1, r3, #31
 80034ba:	d5d8      	bpl.n	800346e <_printf_float+0x242>
 80034bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c0:	4631      	mov	r1, r6
 80034c2:	4628      	mov	r0, r5
 80034c4:	47b8      	blx	r7
 80034c6:	3001      	adds	r0, #1
 80034c8:	f43f af0b 	beq.w	80032e2 <_printf_float+0xb6>
 80034cc:	f04f 0900 	mov.w	r9, #0
 80034d0:	f104 0a1a 	add.w	sl, r4, #26
 80034d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034d6:	425b      	negs	r3, r3
 80034d8:	454b      	cmp	r3, r9
 80034da:	dc01      	bgt.n	80034e0 <_printf_float+0x2b4>
 80034dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034de:	e794      	b.n	800340a <_printf_float+0x1de>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4652      	mov	r2, sl
 80034e4:	4631      	mov	r1, r6
 80034e6:	4628      	mov	r0, r5
 80034e8:	47b8      	blx	r7
 80034ea:	3001      	adds	r0, #1
 80034ec:	f43f aef9 	beq.w	80032e2 <_printf_float+0xb6>
 80034f0:	f109 0901 	add.w	r9, r9, #1
 80034f4:	e7ee      	b.n	80034d4 <_printf_float+0x2a8>
 80034f6:	bf00      	nop
 80034f8:	7fefffff 	.word	0x7fefffff
 80034fc:	080081e8 	.word	0x080081e8
 8003500:	080081ec 	.word	0x080081ec
 8003504:	080081f4 	.word	0x080081f4
 8003508:	080081f0 	.word	0x080081f0
 800350c:	080081f8 	.word	0x080081f8
 8003510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003514:	429a      	cmp	r2, r3
 8003516:	bfa8      	it	ge
 8003518:	461a      	movge	r2, r3
 800351a:	2a00      	cmp	r2, #0
 800351c:	4691      	mov	r9, r2
 800351e:	dc37      	bgt.n	8003590 <_printf_float+0x364>
 8003520:	f04f 0b00 	mov.w	fp, #0
 8003524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003528:	f104 021a 	add.w	r2, r4, #26
 800352c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003530:	ebaa 0309 	sub.w	r3, sl, r9
 8003534:	455b      	cmp	r3, fp
 8003536:	dc33      	bgt.n	80035a0 <_printf_float+0x374>
 8003538:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800353c:	429a      	cmp	r2, r3
 800353e:	db3b      	blt.n	80035b8 <_printf_float+0x38c>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	07da      	lsls	r2, r3, #31
 8003544:	d438      	bmi.n	80035b8 <_printf_float+0x38c>
 8003546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003548:	990d      	ldr	r1, [sp, #52]	; 0x34
 800354a:	eba2 030a 	sub.w	r3, r2, sl
 800354e:	eba2 0901 	sub.w	r9, r2, r1
 8003552:	4599      	cmp	r9, r3
 8003554:	bfa8      	it	ge
 8003556:	4699      	movge	r9, r3
 8003558:	f1b9 0f00 	cmp.w	r9, #0
 800355c:	dc34      	bgt.n	80035c8 <_printf_float+0x39c>
 800355e:	f04f 0800 	mov.w	r8, #0
 8003562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003566:	f104 0a1a 	add.w	sl, r4, #26
 800356a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	eba3 0309 	sub.w	r3, r3, r9
 8003574:	4543      	cmp	r3, r8
 8003576:	f77f af7a 	ble.w	800346e <_printf_float+0x242>
 800357a:	2301      	movs	r3, #1
 800357c:	4652      	mov	r2, sl
 800357e:	4631      	mov	r1, r6
 8003580:	4628      	mov	r0, r5
 8003582:	47b8      	blx	r7
 8003584:	3001      	adds	r0, #1
 8003586:	f43f aeac 	beq.w	80032e2 <_printf_float+0xb6>
 800358a:	f108 0801 	add.w	r8, r8, #1
 800358e:	e7ec      	b.n	800356a <_printf_float+0x33e>
 8003590:	4613      	mov	r3, r2
 8003592:	4631      	mov	r1, r6
 8003594:	4642      	mov	r2, r8
 8003596:	4628      	mov	r0, r5
 8003598:	47b8      	blx	r7
 800359a:	3001      	adds	r0, #1
 800359c:	d1c0      	bne.n	8003520 <_printf_float+0x2f4>
 800359e:	e6a0      	b.n	80032e2 <_printf_float+0xb6>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80035a8:	47b8      	blx	r7
 80035aa:	3001      	adds	r0, #1
 80035ac:	f43f ae99 	beq.w	80032e2 <_printf_float+0xb6>
 80035b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035b2:	f10b 0b01 	add.w	fp, fp, #1
 80035b6:	e7b9      	b.n	800352c <_printf_float+0x300>
 80035b8:	4631      	mov	r1, r6
 80035ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035be:	4628      	mov	r0, r5
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	d1bf      	bne.n	8003546 <_printf_float+0x31a>
 80035c6:	e68c      	b.n	80032e2 <_printf_float+0xb6>
 80035c8:	464b      	mov	r3, r9
 80035ca:	4631      	mov	r1, r6
 80035cc:	4628      	mov	r0, r5
 80035ce:	eb08 020a 	add.w	r2, r8, sl
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1c2      	bne.n	800355e <_printf_float+0x332>
 80035d8:	e683      	b.n	80032e2 <_printf_float+0xb6>
 80035da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035dc:	2a01      	cmp	r2, #1
 80035de:	dc01      	bgt.n	80035e4 <_printf_float+0x3b8>
 80035e0:	07db      	lsls	r3, r3, #31
 80035e2:	d537      	bpl.n	8003654 <_printf_float+0x428>
 80035e4:	2301      	movs	r3, #1
 80035e6:	4642      	mov	r2, r8
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f ae77 	beq.w	80032e2 <_printf_float+0xb6>
 80035f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	f43f ae6f 	beq.w	80032e2 <_printf_float+0xb6>
 8003604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003608:	2200      	movs	r2, #0
 800360a:	2300      	movs	r3, #0
 800360c:	f7fd f9dc 	bl	80009c8 <__aeabi_dcmpeq>
 8003610:	b9d8      	cbnz	r0, 800364a <_printf_float+0x41e>
 8003612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003614:	f108 0201 	add.w	r2, r8, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	d10e      	bne.n	8003642 <_printf_float+0x416>
 8003624:	e65d      	b.n	80032e2 <_printf_float+0xb6>
 8003626:	2301      	movs	r3, #1
 8003628:	464a      	mov	r2, r9
 800362a:	4631      	mov	r1, r6
 800362c:	4628      	mov	r0, r5
 800362e:	47b8      	blx	r7
 8003630:	3001      	adds	r0, #1
 8003632:	f43f ae56 	beq.w	80032e2 <_printf_float+0xb6>
 8003636:	f108 0801 	add.w	r8, r8, #1
 800363a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800363c:	3b01      	subs	r3, #1
 800363e:	4543      	cmp	r3, r8
 8003640:	dcf1      	bgt.n	8003626 <_printf_float+0x3fa>
 8003642:	4653      	mov	r3, sl
 8003644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003648:	e6e0      	b.n	800340c <_printf_float+0x1e0>
 800364a:	f04f 0800 	mov.w	r8, #0
 800364e:	f104 091a 	add.w	r9, r4, #26
 8003652:	e7f2      	b.n	800363a <_printf_float+0x40e>
 8003654:	2301      	movs	r3, #1
 8003656:	4642      	mov	r2, r8
 8003658:	e7df      	b.n	800361a <_printf_float+0x3ee>
 800365a:	2301      	movs	r3, #1
 800365c:	464a      	mov	r2, r9
 800365e:	4631      	mov	r1, r6
 8003660:	4628      	mov	r0, r5
 8003662:	47b8      	blx	r7
 8003664:	3001      	adds	r0, #1
 8003666:	f43f ae3c 	beq.w	80032e2 <_printf_float+0xb6>
 800366a:	f108 0801 	add.w	r8, r8, #1
 800366e:	68e3      	ldr	r3, [r4, #12]
 8003670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003672:	1a5b      	subs	r3, r3, r1
 8003674:	4543      	cmp	r3, r8
 8003676:	dcf0      	bgt.n	800365a <_printf_float+0x42e>
 8003678:	e6fd      	b.n	8003476 <_printf_float+0x24a>
 800367a:	f04f 0800 	mov.w	r8, #0
 800367e:	f104 0919 	add.w	r9, r4, #25
 8003682:	e7f4      	b.n	800366e <_printf_float+0x442>

08003684 <_printf_common>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4616      	mov	r6, r2
 800368a:	4699      	mov	r9, r3
 800368c:	688a      	ldr	r2, [r1, #8]
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4607      	mov	r7, r0
 8003692:	4293      	cmp	r3, r2
 8003694:	bfb8      	it	lt
 8003696:	4613      	movlt	r3, r2
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800369e:	460c      	mov	r4, r1
 80036a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a4:	b10a      	cbz	r2, 80036aa <_printf_common+0x26>
 80036a6:	3301      	adds	r3, #1
 80036a8:	6033      	str	r3, [r6, #0]
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	0699      	lsls	r1, r3, #26
 80036ae:	bf42      	ittt	mi
 80036b0:	6833      	ldrmi	r3, [r6, #0]
 80036b2:	3302      	addmi	r3, #2
 80036b4:	6033      	strmi	r3, [r6, #0]
 80036b6:	6825      	ldr	r5, [r4, #0]
 80036b8:	f015 0506 	ands.w	r5, r5, #6
 80036bc:	d106      	bne.n	80036cc <_printf_common+0x48>
 80036be:	f104 0a19 	add.w	sl, r4, #25
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	6832      	ldr	r2, [r6, #0]
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	42ab      	cmp	r3, r5
 80036ca:	dc28      	bgt.n	800371e <_printf_common+0x9a>
 80036cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036d0:	1e13      	subs	r3, r2, #0
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	bf18      	it	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	0692      	lsls	r2, r2, #26
 80036da:	d42d      	bmi.n	8003738 <_printf_common+0xb4>
 80036dc:	4649      	mov	r1, r9
 80036de:	4638      	mov	r0, r7
 80036e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e4:	47c0      	blx	r8
 80036e6:	3001      	adds	r0, #1
 80036e8:	d020      	beq.n	800372c <_printf_common+0xa8>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	68e5      	ldr	r5, [r4, #12]
 80036ee:	f003 0306 	and.w	r3, r3, #6
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf18      	it	ne
 80036f6:	2500      	movne	r5, #0
 80036f8:	6832      	ldr	r2, [r6, #0]
 80036fa:	f04f 0600 	mov.w	r6, #0
 80036fe:	68a3      	ldr	r3, [r4, #8]
 8003700:	bf08      	it	eq
 8003702:	1aad      	subeq	r5, r5, r2
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	bf08      	it	eq
 8003708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800370c:	4293      	cmp	r3, r2
 800370e:	bfc4      	itt	gt
 8003710:	1a9b      	subgt	r3, r3, r2
 8003712:	18ed      	addgt	r5, r5, r3
 8003714:	341a      	adds	r4, #26
 8003716:	42b5      	cmp	r5, r6
 8003718:	d11a      	bne.n	8003750 <_printf_common+0xcc>
 800371a:	2000      	movs	r0, #0
 800371c:	e008      	b.n	8003730 <_printf_common+0xac>
 800371e:	2301      	movs	r3, #1
 8003720:	4652      	mov	r2, sl
 8003722:	4649      	mov	r1, r9
 8003724:	4638      	mov	r0, r7
 8003726:	47c0      	blx	r8
 8003728:	3001      	adds	r0, #1
 800372a:	d103      	bne.n	8003734 <_printf_common+0xb0>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003734:	3501      	adds	r5, #1
 8003736:	e7c4      	b.n	80036c2 <_printf_common+0x3e>
 8003738:	2030      	movs	r0, #48	; 0x30
 800373a:	18e1      	adds	r1, r4, r3
 800373c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003746:	4422      	add	r2, r4
 8003748:	3302      	adds	r3, #2
 800374a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800374e:	e7c5      	b.n	80036dc <_printf_common+0x58>
 8003750:	2301      	movs	r3, #1
 8003752:	4622      	mov	r2, r4
 8003754:	4649      	mov	r1, r9
 8003756:	4638      	mov	r0, r7
 8003758:	47c0      	blx	r8
 800375a:	3001      	adds	r0, #1
 800375c:	d0e6      	beq.n	800372c <_printf_common+0xa8>
 800375e:	3601      	adds	r6, #1
 8003760:	e7d9      	b.n	8003716 <_printf_common+0x92>
	...

08003764 <_printf_i>:
 8003764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003768:	460c      	mov	r4, r1
 800376a:	7e27      	ldrb	r7, [r4, #24]
 800376c:	4691      	mov	r9, r2
 800376e:	2f78      	cmp	r7, #120	; 0x78
 8003770:	4680      	mov	r8, r0
 8003772:	469a      	mov	sl, r3
 8003774:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003776:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800377a:	d807      	bhi.n	800378c <_printf_i+0x28>
 800377c:	2f62      	cmp	r7, #98	; 0x62
 800377e:	d80a      	bhi.n	8003796 <_printf_i+0x32>
 8003780:	2f00      	cmp	r7, #0
 8003782:	f000 80d9 	beq.w	8003938 <_printf_i+0x1d4>
 8003786:	2f58      	cmp	r7, #88	; 0x58
 8003788:	f000 80a4 	beq.w	80038d4 <_printf_i+0x170>
 800378c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003794:	e03a      	b.n	800380c <_printf_i+0xa8>
 8003796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800379a:	2b15      	cmp	r3, #21
 800379c:	d8f6      	bhi.n	800378c <_printf_i+0x28>
 800379e:	a001      	add	r0, pc, #4	; (adr r0, 80037a4 <_printf_i+0x40>)
 80037a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037a4:	080037fd 	.word	0x080037fd
 80037a8:	08003811 	.word	0x08003811
 80037ac:	0800378d 	.word	0x0800378d
 80037b0:	0800378d 	.word	0x0800378d
 80037b4:	0800378d 	.word	0x0800378d
 80037b8:	0800378d 	.word	0x0800378d
 80037bc:	08003811 	.word	0x08003811
 80037c0:	0800378d 	.word	0x0800378d
 80037c4:	0800378d 	.word	0x0800378d
 80037c8:	0800378d 	.word	0x0800378d
 80037cc:	0800378d 	.word	0x0800378d
 80037d0:	0800391f 	.word	0x0800391f
 80037d4:	08003841 	.word	0x08003841
 80037d8:	08003901 	.word	0x08003901
 80037dc:	0800378d 	.word	0x0800378d
 80037e0:	0800378d 	.word	0x0800378d
 80037e4:	08003941 	.word	0x08003941
 80037e8:	0800378d 	.word	0x0800378d
 80037ec:	08003841 	.word	0x08003841
 80037f0:	0800378d 	.word	0x0800378d
 80037f4:	0800378d 	.word	0x0800378d
 80037f8:	08003909 	.word	0x08003909
 80037fc:	680b      	ldr	r3, [r1, #0]
 80037fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	600a      	str	r2, [r1, #0]
 8003808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800380c:	2301      	movs	r3, #1
 800380e:	e0a4      	b.n	800395a <_printf_i+0x1f6>
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	6808      	ldr	r0, [r1, #0]
 8003814:	062e      	lsls	r6, r5, #24
 8003816:	f100 0304 	add.w	r3, r0, #4
 800381a:	d50a      	bpl.n	8003832 <_printf_i+0xce>
 800381c:	6805      	ldr	r5, [r0, #0]
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	2d00      	cmp	r5, #0
 8003822:	da03      	bge.n	800382c <_printf_i+0xc8>
 8003824:	232d      	movs	r3, #45	; 0x2d
 8003826:	426d      	negs	r5, r5
 8003828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382c:	230a      	movs	r3, #10
 800382e:	485e      	ldr	r0, [pc, #376]	; (80039a8 <_printf_i+0x244>)
 8003830:	e019      	b.n	8003866 <_printf_i+0x102>
 8003832:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003836:	6805      	ldr	r5, [r0, #0]
 8003838:	600b      	str	r3, [r1, #0]
 800383a:	bf18      	it	ne
 800383c:	b22d      	sxthne	r5, r5
 800383e:	e7ef      	b.n	8003820 <_printf_i+0xbc>
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	1d18      	adds	r0, r3, #4
 8003846:	6008      	str	r0, [r1, #0]
 8003848:	0628      	lsls	r0, r5, #24
 800384a:	d501      	bpl.n	8003850 <_printf_i+0xec>
 800384c:	681d      	ldr	r5, [r3, #0]
 800384e:	e002      	b.n	8003856 <_printf_i+0xf2>
 8003850:	0669      	lsls	r1, r5, #25
 8003852:	d5fb      	bpl.n	800384c <_printf_i+0xe8>
 8003854:	881d      	ldrh	r5, [r3, #0]
 8003856:	2f6f      	cmp	r7, #111	; 0x6f
 8003858:	bf0c      	ite	eq
 800385a:	2308      	moveq	r3, #8
 800385c:	230a      	movne	r3, #10
 800385e:	4852      	ldr	r0, [pc, #328]	; (80039a8 <_printf_i+0x244>)
 8003860:	2100      	movs	r1, #0
 8003862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003866:	6866      	ldr	r6, [r4, #4]
 8003868:	2e00      	cmp	r6, #0
 800386a:	bfa8      	it	ge
 800386c:	6821      	ldrge	r1, [r4, #0]
 800386e:	60a6      	str	r6, [r4, #8]
 8003870:	bfa4      	itt	ge
 8003872:	f021 0104 	bicge.w	r1, r1, #4
 8003876:	6021      	strge	r1, [r4, #0]
 8003878:	b90d      	cbnz	r5, 800387e <_printf_i+0x11a>
 800387a:	2e00      	cmp	r6, #0
 800387c:	d04d      	beq.n	800391a <_printf_i+0x1b6>
 800387e:	4616      	mov	r6, r2
 8003880:	fbb5 f1f3 	udiv	r1, r5, r3
 8003884:	fb03 5711 	mls	r7, r3, r1, r5
 8003888:	5dc7      	ldrb	r7, [r0, r7]
 800388a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800388e:	462f      	mov	r7, r5
 8003890:	42bb      	cmp	r3, r7
 8003892:	460d      	mov	r5, r1
 8003894:	d9f4      	bls.n	8003880 <_printf_i+0x11c>
 8003896:	2b08      	cmp	r3, #8
 8003898:	d10b      	bne.n	80038b2 <_printf_i+0x14e>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	07df      	lsls	r7, r3, #31
 800389e:	d508      	bpl.n	80038b2 <_printf_i+0x14e>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	6861      	ldr	r1, [r4, #4]
 80038a4:	4299      	cmp	r1, r3
 80038a6:	bfde      	ittt	le
 80038a8:	2330      	movle	r3, #48	; 0x30
 80038aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b2:	1b92      	subs	r2, r2, r6
 80038b4:	6122      	str	r2, [r4, #16]
 80038b6:	464b      	mov	r3, r9
 80038b8:	4621      	mov	r1, r4
 80038ba:	4640      	mov	r0, r8
 80038bc:	f8cd a000 	str.w	sl, [sp]
 80038c0:	aa03      	add	r2, sp, #12
 80038c2:	f7ff fedf 	bl	8003684 <_printf_common>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d14c      	bne.n	8003964 <_printf_i+0x200>
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295
 80038ce:	b004      	add	sp, #16
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	4834      	ldr	r0, [pc, #208]	; (80039a8 <_printf_i+0x244>)
 80038d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038da:	680e      	ldr	r6, [r1, #0]
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	f856 5b04 	ldr.w	r5, [r6], #4
 80038e2:	061f      	lsls	r7, r3, #24
 80038e4:	600e      	str	r6, [r1, #0]
 80038e6:	d514      	bpl.n	8003912 <_printf_i+0x1ae>
 80038e8:	07d9      	lsls	r1, r3, #31
 80038ea:	bf44      	itt	mi
 80038ec:	f043 0320 	orrmi.w	r3, r3, #32
 80038f0:	6023      	strmi	r3, [r4, #0]
 80038f2:	b91d      	cbnz	r5, 80038fc <_printf_i+0x198>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	f023 0320 	bic.w	r3, r3, #32
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	2310      	movs	r3, #16
 80038fe:	e7af      	b.n	8003860 <_printf_i+0xfc>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f043 0320 	orr.w	r3, r3, #32
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	2378      	movs	r3, #120	; 0x78
 800390a:	4828      	ldr	r0, [pc, #160]	; (80039ac <_printf_i+0x248>)
 800390c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003910:	e7e3      	b.n	80038da <_printf_i+0x176>
 8003912:	065e      	lsls	r6, r3, #25
 8003914:	bf48      	it	mi
 8003916:	b2ad      	uxthmi	r5, r5
 8003918:	e7e6      	b.n	80038e8 <_printf_i+0x184>
 800391a:	4616      	mov	r6, r2
 800391c:	e7bb      	b.n	8003896 <_printf_i+0x132>
 800391e:	680b      	ldr	r3, [r1, #0]
 8003920:	6826      	ldr	r6, [r4, #0]
 8003922:	1d1d      	adds	r5, r3, #4
 8003924:	6960      	ldr	r0, [r4, #20]
 8003926:	600d      	str	r5, [r1, #0]
 8003928:	0635      	lsls	r5, r6, #24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	d501      	bpl.n	8003932 <_printf_i+0x1ce>
 800392e:	6018      	str	r0, [r3, #0]
 8003930:	e002      	b.n	8003938 <_printf_i+0x1d4>
 8003932:	0671      	lsls	r1, r6, #25
 8003934:	d5fb      	bpl.n	800392e <_printf_i+0x1ca>
 8003936:	8018      	strh	r0, [r3, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	4616      	mov	r6, r2
 800393c:	6123      	str	r3, [r4, #16]
 800393e:	e7ba      	b.n	80038b6 <_printf_i+0x152>
 8003940:	680b      	ldr	r3, [r1, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	600a      	str	r2, [r1, #0]
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	2100      	movs	r1, #0
 800394a:	4630      	mov	r0, r6
 800394c:	6862      	ldr	r2, [r4, #4]
 800394e:	f002 fe21 	bl	8006594 <memchr>
 8003952:	b108      	cbz	r0, 8003958 <_printf_i+0x1f4>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003962:	e7a8      	b.n	80038b6 <_printf_i+0x152>
 8003964:	4632      	mov	r2, r6
 8003966:	4649      	mov	r1, r9
 8003968:	4640      	mov	r0, r8
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d0ab      	beq.n	80038ca <_printf_i+0x166>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	079b      	lsls	r3, r3, #30
 8003976:	d413      	bmi.n	80039a0 <_printf_i+0x23c>
 8003978:	68e0      	ldr	r0, [r4, #12]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	4298      	cmp	r0, r3
 800397e:	bfb8      	it	lt
 8003980:	4618      	movlt	r0, r3
 8003982:	e7a4      	b.n	80038ce <_printf_i+0x16a>
 8003984:	2301      	movs	r3, #1
 8003986:	4632      	mov	r2, r6
 8003988:	4649      	mov	r1, r9
 800398a:	4640      	mov	r0, r8
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d09b      	beq.n	80038ca <_printf_i+0x166>
 8003992:	3501      	adds	r5, #1
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	9903      	ldr	r1, [sp, #12]
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	42ab      	cmp	r3, r5
 800399c:	dcf2      	bgt.n	8003984 <_printf_i+0x220>
 800399e:	e7eb      	b.n	8003978 <_printf_i+0x214>
 80039a0:	2500      	movs	r5, #0
 80039a2:	f104 0619 	add.w	r6, r4, #25
 80039a6:	e7f5      	b.n	8003994 <_printf_i+0x230>
 80039a8:	080081fa 	.word	0x080081fa
 80039ac:	0800820b 	.word	0x0800820b

080039b0 <_scanf_float>:
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	b087      	sub	sp, #28
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	688b      	ldr	r3, [r1, #8]
 80039ba:	4617      	mov	r7, r2
 80039bc:	1e5a      	subs	r2, r3, #1
 80039be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80039c2:	bf85      	ittet	hi
 80039c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80039c8:	195b      	addhi	r3, r3, r5
 80039ca:	2300      	movls	r3, #0
 80039cc:	9302      	strhi	r3, [sp, #8]
 80039ce:	bf88      	it	hi
 80039d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80039d4:	468b      	mov	fp, r1
 80039d6:	f04f 0500 	mov.w	r5, #0
 80039da:	bf8c      	ite	hi
 80039dc:	608b      	strhi	r3, [r1, #8]
 80039de:	9302      	strls	r3, [sp, #8]
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	4680      	mov	r8, r0
 80039e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80039e8:	f84b 3b1c 	str.w	r3, [fp], #28
 80039ec:	460c      	mov	r4, r1
 80039ee:	465e      	mov	r6, fp
 80039f0:	46aa      	mov	sl, r5
 80039f2:	46a9      	mov	r9, r5
 80039f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80039f8:	9501      	str	r5, [sp, #4]
 80039fa:	68a2      	ldr	r2, [r4, #8]
 80039fc:	b152      	cbz	r2, 8003a14 <_scanf_float+0x64>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b4e      	cmp	r3, #78	; 0x4e
 8003a04:	d864      	bhi.n	8003ad0 <_scanf_float+0x120>
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d83c      	bhi.n	8003a84 <_scanf_float+0xd4>
 8003a0a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a0e:	b2c8      	uxtb	r0, r1
 8003a10:	280e      	cmp	r0, #14
 8003a12:	d93a      	bls.n	8003a8a <_scanf_float+0xda>
 8003a14:	f1b9 0f00 	cmp.w	r9, #0
 8003a18:	d003      	beq.n	8003a22 <_scanf_float+0x72>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a26:	f1ba 0f01 	cmp.w	sl, #1
 8003a2a:	f200 8113 	bhi.w	8003c54 <_scanf_float+0x2a4>
 8003a2e:	455e      	cmp	r6, fp
 8003a30:	f200 8105 	bhi.w	8003c3e <_scanf_float+0x28e>
 8003a34:	2501      	movs	r5, #1
 8003a36:	4628      	mov	r0, r5
 8003a38:	b007      	add	sp, #28
 8003a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003a42:	2a0d      	cmp	r2, #13
 8003a44:	d8e6      	bhi.n	8003a14 <_scanf_float+0x64>
 8003a46:	a101      	add	r1, pc, #4	; (adr r1, 8003a4c <_scanf_float+0x9c>)
 8003a48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a4c:	08003b8b 	.word	0x08003b8b
 8003a50:	08003a15 	.word	0x08003a15
 8003a54:	08003a15 	.word	0x08003a15
 8003a58:	08003a15 	.word	0x08003a15
 8003a5c:	08003beb 	.word	0x08003beb
 8003a60:	08003bc3 	.word	0x08003bc3
 8003a64:	08003a15 	.word	0x08003a15
 8003a68:	08003a15 	.word	0x08003a15
 8003a6c:	08003b99 	.word	0x08003b99
 8003a70:	08003a15 	.word	0x08003a15
 8003a74:	08003a15 	.word	0x08003a15
 8003a78:	08003a15 	.word	0x08003a15
 8003a7c:	08003a15 	.word	0x08003a15
 8003a80:	08003b51 	.word	0x08003b51
 8003a84:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003a88:	e7db      	b.n	8003a42 <_scanf_float+0x92>
 8003a8a:	290e      	cmp	r1, #14
 8003a8c:	d8c2      	bhi.n	8003a14 <_scanf_float+0x64>
 8003a8e:	a001      	add	r0, pc, #4	; (adr r0, 8003a94 <_scanf_float+0xe4>)
 8003a90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a94:	08003b43 	.word	0x08003b43
 8003a98:	08003a15 	.word	0x08003a15
 8003a9c:	08003b43 	.word	0x08003b43
 8003aa0:	08003bd7 	.word	0x08003bd7
 8003aa4:	08003a15 	.word	0x08003a15
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003b2d 	.word	0x08003b2d
 8003ab0:	08003b2d 	.word	0x08003b2d
 8003ab4:	08003b2d 	.word	0x08003b2d
 8003ab8:	08003b2d 	.word	0x08003b2d
 8003abc:	08003b2d 	.word	0x08003b2d
 8003ac0:	08003b2d 	.word	0x08003b2d
 8003ac4:	08003b2d 	.word	0x08003b2d
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003b2d 	.word	0x08003b2d
 8003ad0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ad2:	d809      	bhi.n	8003ae8 <_scanf_float+0x138>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d8b2      	bhi.n	8003a3e <_scanf_float+0x8e>
 8003ad8:	2b54      	cmp	r3, #84	; 0x54
 8003ada:	d077      	beq.n	8003bcc <_scanf_float+0x21c>
 8003adc:	2b59      	cmp	r3, #89	; 0x59
 8003ade:	d199      	bne.n	8003a14 <_scanf_float+0x64>
 8003ae0:	2d07      	cmp	r5, #7
 8003ae2:	d197      	bne.n	8003a14 <_scanf_float+0x64>
 8003ae4:	2508      	movs	r5, #8
 8003ae6:	e029      	b.n	8003b3c <_scanf_float+0x18c>
 8003ae8:	2b74      	cmp	r3, #116	; 0x74
 8003aea:	d06f      	beq.n	8003bcc <_scanf_float+0x21c>
 8003aec:	2b79      	cmp	r3, #121	; 0x79
 8003aee:	e7f6      	b.n	8003ade <_scanf_float+0x12e>
 8003af0:	6821      	ldr	r1, [r4, #0]
 8003af2:	05c8      	lsls	r0, r1, #23
 8003af4:	d51a      	bpl.n	8003b2c <_scanf_float+0x17c>
 8003af6:	9b02      	ldr	r3, [sp, #8]
 8003af8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003afc:	6021      	str	r1, [r4, #0]
 8003afe:	f109 0901 	add.w	r9, r9, #1
 8003b02:	b11b      	cbz	r3, 8003b0c <_scanf_float+0x15c>
 8003b04:	3b01      	subs	r3, #1
 8003b06:	3201      	adds	r2, #1
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	60a2      	str	r2, [r4, #8]
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60a3      	str	r3, [r4, #8]
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	3301      	adds	r3, #1
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	f340 8084 	ble.w	8003c2c <_scanf_float+0x27c>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	e766      	b.n	80039fa <_scanf_float+0x4a>
 8003b2c:	eb1a 0f05 	cmn.w	sl, r5
 8003b30:	f47f af70 	bne.w	8003a14 <_scanf_float+0x64>
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	f806 3b01 	strb.w	r3, [r6], #1
 8003b40:	e7e4      	b.n	8003b0c <_scanf_float+0x15c>
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	0610      	lsls	r0, r2, #24
 8003b46:	f57f af65 	bpl.w	8003a14 <_scanf_float+0x64>
 8003b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b4e:	e7f4      	b.n	8003b3a <_scanf_float+0x18a>
 8003b50:	f1ba 0f00 	cmp.w	sl, #0
 8003b54:	d10e      	bne.n	8003b74 <_scanf_float+0x1c4>
 8003b56:	f1b9 0f00 	cmp.w	r9, #0
 8003b5a:	d10e      	bne.n	8003b7a <_scanf_float+0x1ca>
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b66:	d108      	bne.n	8003b7a <_scanf_float+0x1ca>
 8003b68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b6c:	f04f 0a01 	mov.w	sl, #1
 8003b70:	6022      	str	r2, [r4, #0]
 8003b72:	e7e3      	b.n	8003b3c <_scanf_float+0x18c>
 8003b74:	f1ba 0f02 	cmp.w	sl, #2
 8003b78:	d055      	beq.n	8003c26 <_scanf_float+0x276>
 8003b7a:	2d01      	cmp	r5, #1
 8003b7c:	d002      	beq.n	8003b84 <_scanf_float+0x1d4>
 8003b7e:	2d04      	cmp	r5, #4
 8003b80:	f47f af48 	bne.w	8003a14 <_scanf_float+0x64>
 8003b84:	3501      	adds	r5, #1
 8003b86:	b2ed      	uxtb	r5, r5
 8003b88:	e7d8      	b.n	8003b3c <_scanf_float+0x18c>
 8003b8a:	f1ba 0f01 	cmp.w	sl, #1
 8003b8e:	f47f af41 	bne.w	8003a14 <_scanf_float+0x64>
 8003b92:	f04f 0a02 	mov.w	sl, #2
 8003b96:	e7d1      	b.n	8003b3c <_scanf_float+0x18c>
 8003b98:	b97d      	cbnz	r5, 8003bba <_scanf_float+0x20a>
 8003b9a:	f1b9 0f00 	cmp.w	r9, #0
 8003b9e:	f47f af3c 	bne.w	8003a1a <_scanf_float+0x6a>
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003ba8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003bac:	f47f af39 	bne.w	8003a22 <_scanf_float+0x72>
 8003bb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003bb4:	2501      	movs	r5, #1
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	e7c0      	b.n	8003b3c <_scanf_float+0x18c>
 8003bba:	2d03      	cmp	r5, #3
 8003bbc:	d0e2      	beq.n	8003b84 <_scanf_float+0x1d4>
 8003bbe:	2d05      	cmp	r5, #5
 8003bc0:	e7de      	b.n	8003b80 <_scanf_float+0x1d0>
 8003bc2:	2d02      	cmp	r5, #2
 8003bc4:	f47f af26 	bne.w	8003a14 <_scanf_float+0x64>
 8003bc8:	2503      	movs	r5, #3
 8003bca:	e7b7      	b.n	8003b3c <_scanf_float+0x18c>
 8003bcc:	2d06      	cmp	r5, #6
 8003bce:	f47f af21 	bne.w	8003a14 <_scanf_float+0x64>
 8003bd2:	2507      	movs	r5, #7
 8003bd4:	e7b2      	b.n	8003b3c <_scanf_float+0x18c>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	0591      	lsls	r1, r2, #22
 8003bda:	f57f af1b 	bpl.w	8003a14 <_scanf_float+0x64>
 8003bde:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003be8:	e7a8      	b.n	8003b3c <_scanf_float+0x18c>
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003bf0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003bf4:	d006      	beq.n	8003c04 <_scanf_float+0x254>
 8003bf6:	0550      	lsls	r0, r2, #21
 8003bf8:	f57f af0c 	bpl.w	8003a14 <_scanf_float+0x64>
 8003bfc:	f1b9 0f00 	cmp.w	r9, #0
 8003c00:	f43f af0f 	beq.w	8003a22 <_scanf_float+0x72>
 8003c04:	0591      	lsls	r1, r2, #22
 8003c06:	bf58      	it	pl
 8003c08:	9901      	ldrpl	r1, [sp, #4]
 8003c0a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c0e:	bf58      	it	pl
 8003c10:	eba9 0101 	subpl.w	r1, r9, r1
 8003c14:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c18:	f04f 0900 	mov.w	r9, #0
 8003c1c:	bf58      	it	pl
 8003c1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c22:	6022      	str	r2, [r4, #0]
 8003c24:	e78a      	b.n	8003b3c <_scanf_float+0x18c>
 8003c26:	f04f 0a03 	mov.w	sl, #3
 8003c2a:	e787      	b.n	8003b3c <_scanf_float+0x18c>
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c34:	4798      	blx	r3
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f aedf 	beq.w	80039fa <_scanf_float+0x4a>
 8003c3c:	e6ea      	b.n	8003a14 <_scanf_float+0x64>
 8003c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c42:	463a      	mov	r2, r7
 8003c44:	4640      	mov	r0, r8
 8003c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c4a:	4798      	blx	r3
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	e6ec      	b.n	8003a2e <_scanf_float+0x7e>
 8003c54:	1e6b      	subs	r3, r5, #1
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d825      	bhi.n	8003ca6 <_scanf_float+0x2f6>
 8003c5a:	2d02      	cmp	r5, #2
 8003c5c:	d836      	bhi.n	8003ccc <_scanf_float+0x31c>
 8003c5e:	455e      	cmp	r6, fp
 8003c60:	f67f aee8 	bls.w	8003a34 <_scanf_float+0x84>
 8003c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c70:	4798      	blx	r3
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	e7f1      	b.n	8003c5e <_scanf_float+0x2ae>
 8003c7a:	9802      	ldr	r0, [sp, #8]
 8003c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c80:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003c84:	463a      	mov	r2, r7
 8003c86:	9002      	str	r0, [sp, #8]
 8003c88:	4640      	mov	r0, r8
 8003c8a:	4798      	blx	r3
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c96:	fa5f fa8a 	uxtb.w	sl, sl
 8003c9a:	f1ba 0f02 	cmp.w	sl, #2
 8003c9e:	d1ec      	bne.n	8003c7a <_scanf_float+0x2ca>
 8003ca0:	3d03      	subs	r5, #3
 8003ca2:	b2ed      	uxtb	r5, r5
 8003ca4:	1b76      	subs	r6, r6, r5
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	05da      	lsls	r2, r3, #23
 8003caa:	d52f      	bpl.n	8003d0c <_scanf_float+0x35c>
 8003cac:	055b      	lsls	r3, r3, #21
 8003cae:	d510      	bpl.n	8003cd2 <_scanf_float+0x322>
 8003cb0:	455e      	cmp	r6, fp
 8003cb2:	f67f aebf 	bls.w	8003a34 <_scanf_float+0x84>
 8003cb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cba:	463a      	mov	r2, r7
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cc2:	4798      	blx	r3
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	e7f1      	b.n	8003cb0 <_scanf_float+0x300>
 8003ccc:	46aa      	mov	sl, r5
 8003cce:	9602      	str	r6, [sp, #8]
 8003cd0:	e7df      	b.n	8003c92 <_scanf_float+0x2e2>
 8003cd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	2965      	cmp	r1, #101	; 0x65
 8003cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cde:	f106 35ff 	add.w	r5, r6, #4294967295
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	d00c      	beq.n	8003d00 <_scanf_float+0x350>
 8003ce6:	2945      	cmp	r1, #69	; 0x45
 8003ce8:	d00a      	beq.n	8003d00 <_scanf_float+0x350>
 8003cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cee:	463a      	mov	r2, r7
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	4798      	blx	r3
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	1eb5      	subs	r5, r6, #2
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	463a      	mov	r2, r7
 8003d02:	4640      	mov	r0, r8
 8003d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d08:	4798      	blx	r3
 8003d0a:	462e      	mov	r6, r5
 8003d0c:	6825      	ldr	r5, [r4, #0]
 8003d0e:	f015 0510 	ands.w	r5, r5, #16
 8003d12:	d159      	bne.n	8003dc8 <_scanf_float+0x418>
 8003d14:	7035      	strb	r5, [r6, #0]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d11c      	bne.n	8003d5c <_scanf_float+0x3ac>
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	454b      	cmp	r3, r9
 8003d26:	eba3 0209 	sub.w	r2, r3, r9
 8003d2a:	d124      	bne.n	8003d76 <_scanf_float+0x3c6>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4659      	mov	r1, fp
 8003d30:	4640      	mov	r0, r8
 8003d32:	f000 fec1 	bl	8004ab8 <_strtod_r>
 8003d36:	f8d4 c000 	ldr.w	ip, [r4]
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	f01c 0f02 	tst.w	ip, #2
 8003d40:	4606      	mov	r6, r0
 8003d42:	460f      	mov	r7, r1
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	d021      	beq.n	8003d8c <_scanf_float+0x3dc>
 8003d48:	9903      	ldr	r1, [sp, #12]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	600a      	str	r2, [r1, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	e9c3 6700 	strd	r6, r7, [r3]
 8003d54:	68e3      	ldr	r3, [r4, #12]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60e3      	str	r3, [r4, #12]
 8003d5a:	e66c      	b.n	8003a36 <_scanf_float+0x86>
 8003d5c:	9b04      	ldr	r3, [sp, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0e4      	beq.n	8003d2c <_scanf_float+0x37c>
 8003d62:	9905      	ldr	r1, [sp, #20]
 8003d64:	230a      	movs	r3, #10
 8003d66:	462a      	mov	r2, r5
 8003d68:	4640      	mov	r0, r8
 8003d6a:	3101      	adds	r1, #1
 8003d6c:	f000 ff30 	bl	8004bd0 <_strtol_r>
 8003d70:	9b04      	ldr	r3, [sp, #16]
 8003d72:	9e05      	ldr	r6, [sp, #20]
 8003d74:	1ac2      	subs	r2, r0, r3
 8003d76:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d7a:	429e      	cmp	r6, r3
 8003d7c:	bf28      	it	cs
 8003d7e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003d82:	4630      	mov	r0, r6
 8003d84:	4911      	ldr	r1, [pc, #68]	; (8003dcc <_scanf_float+0x41c>)
 8003d86:	f000 f829 	bl	8003ddc <siprintf>
 8003d8a:	e7cf      	b.n	8003d2c <_scanf_float+0x37c>
 8003d8c:	f01c 0f04 	tst.w	ip, #4
 8003d90:	f103 0e04 	add.w	lr, r3, #4
 8003d94:	d003      	beq.n	8003d9e <_scanf_float+0x3ee>
 8003d96:	9903      	ldr	r1, [sp, #12]
 8003d98:	f8c1 e000 	str.w	lr, [r1]
 8003d9c:	e7d7      	b.n	8003d4e <_scanf_float+0x39e>
 8003d9e:	9a03      	ldr	r2, [sp, #12]
 8003da0:	f8c2 e000 	str.w	lr, [r2]
 8003da4:	f8d3 8000 	ldr.w	r8, [r3]
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	f7fc fe3e 	bl	8000a2c <__aeabi_dcmpun>
 8003db0:	b128      	cbz	r0, 8003dbe <_scanf_float+0x40e>
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <_scanf_float+0x420>)
 8003db4:	f000 f80e 	bl	8003dd4 <nanf>
 8003db8:	f8c8 0000 	str.w	r0, [r8]
 8003dbc:	e7ca      	b.n	8003d54 <_scanf_float+0x3a4>
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	f7fc fe91 	bl	8000ae8 <__aeabi_d2f>
 8003dc6:	e7f7      	b.n	8003db8 <_scanf_float+0x408>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e634      	b.n	8003a36 <_scanf_float+0x86>
 8003dcc:	0800821c 	.word	0x0800821c
 8003dd0:	08008698 	.word	0x08008698

08003dd4 <nanf>:
 8003dd4:	4800      	ldr	r0, [pc, #0]	; (8003dd8 <nanf+0x4>)
 8003dd6:	4770      	bx	lr
 8003dd8:	7fc00000 	.word	0x7fc00000

08003ddc <siprintf>:
 8003ddc:	b40e      	push	{r1, r2, r3}
 8003dde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de2:	b500      	push	{lr}
 8003de4:	b09c      	sub	sp, #112	; 0x70
 8003de6:	ab1d      	add	r3, sp, #116	; 0x74
 8003de8:	9002      	str	r0, [sp, #8]
 8003dea:	9006      	str	r0, [sp, #24]
 8003dec:	9107      	str	r1, [sp, #28]
 8003dee:	9104      	str	r1, [sp, #16]
 8003df0:	4808      	ldr	r0, [pc, #32]	; (8003e14 <siprintf+0x38>)
 8003df2:	4909      	ldr	r1, [pc, #36]	; (8003e18 <siprintf+0x3c>)
 8003df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df8:	9105      	str	r1, [sp, #20]
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	a902      	add	r1, sp, #8
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	f003 f99e 	bl	8007140 <_svfiprintf_r>
 8003e04:	2200      	movs	r2, #0
 8003e06:	9b02      	ldr	r3, [sp, #8]
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	b01c      	add	sp, #112	; 0x70
 8003e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e10:	b003      	add	sp, #12
 8003e12:	4770      	bx	lr
 8003e14:	20000010 	.word	0x20000010
 8003e18:	ffff0208 	.word	0xffff0208

08003e1c <strchr>:
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	b2c9      	uxtb	r1, r1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e26:	b112      	cbz	r2, 8003e2e <strchr+0x12>
 8003e28:	428a      	cmp	r2, r1
 8003e2a:	d1f9      	bne.n	8003e20 <strchr+0x4>
 8003e2c:	4770      	bx	lr
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	bf18      	it	ne
 8003e32:	2000      	movne	r0, #0
 8003e34:	4770      	bx	lr

08003e36 <strncpy>:
 8003e36:	4603      	mov	r3, r0
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	3901      	subs	r1, #1
 8003e3c:	b132      	cbz	r2, 8003e4c <strncpy+0x16>
 8003e3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e42:	3a01      	subs	r2, #1
 8003e44:	f803 4b01 	strb.w	r4, [r3], #1
 8003e48:	2c00      	cmp	r4, #0
 8003e4a:	d1f7      	bne.n	8003e3c <strncpy+0x6>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	441a      	add	r2, r3
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <strncpy+0x20>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <strncpy+0x1a>

08003e5c <strstr>:
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5e:	780c      	ldrb	r4, [r1, #0]
 8003e60:	b164      	cbz	r4, 8003e7c <strstr+0x20>
 8003e62:	4603      	mov	r3, r0
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	1c5e      	adds	r6, r3, #1
 8003e6a:	b90a      	cbnz	r2, 8003e70 <strstr+0x14>
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	e005      	b.n	8003e7c <strstr+0x20>
 8003e70:	4294      	cmp	r4, r2
 8003e72:	d108      	bne.n	8003e86 <strstr+0x2a>
 8003e74:	460d      	mov	r5, r1
 8003e76:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003e7a:	b902      	cbnz	r2, 8003e7e <strstr+0x22>
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003e82:	4297      	cmp	r7, r2
 8003e84:	d0f7      	beq.n	8003e76 <strstr+0x1a>
 8003e86:	4633      	mov	r3, r6
 8003e88:	e7ec      	b.n	8003e64 <strstr+0x8>

08003e8a <sulp>:
 8003e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8e:	460f      	mov	r7, r1
 8003e90:	4690      	mov	r8, r2
 8003e92:	f002 fefd 	bl	8006c90 <__ulp>
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	f1b8 0f00 	cmp.w	r8, #0
 8003e9e:	d011      	beq.n	8003ec4 <sulp+0x3a>
 8003ea0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ea4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	dd0b      	ble.n	8003ec4 <sulp+0x3a>
 8003eac:	2400      	movs	r4, #0
 8003eae:	051b      	lsls	r3, r3, #20
 8003eb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eb4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	f7fc fb1c 	bl	80004f8 <__aeabi_dmul>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	460d      	mov	r5, r1
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <_strtod_l>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	469b      	mov	fp, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	b0a1      	sub	sp, #132	; 0x84
 8003eda:	931c      	str	r3, [sp, #112]	; 0x70
 8003edc:	4ba1      	ldr	r3, [pc, #644]	; (8004164 <_strtod_l+0x294>)
 8003ede:	4682      	mov	sl, r0
 8003ee0:	681f      	ldr	r7, [r3, #0]
 8003ee2:	460e      	mov	r6, r1
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ee8:	f7fc f942 	bl	8000170 <strlen>
 8003eec:	f04f 0800 	mov.w	r8, #0
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ef8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	2a2b      	cmp	r2, #43	; 0x2b
 8003efe:	d04c      	beq.n	8003f9a <_strtod_l+0xca>
 8003f00:	d83a      	bhi.n	8003f78 <_strtod_l+0xa8>
 8003f02:	2a0d      	cmp	r2, #13
 8003f04:	d833      	bhi.n	8003f6e <_strtod_l+0x9e>
 8003f06:	2a08      	cmp	r2, #8
 8003f08:	d833      	bhi.n	8003f72 <_strtod_l+0xa2>
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d03d      	beq.n	8003f8a <_strtod_l+0xba>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	930c      	str	r3, [sp, #48]	; 0x30
 8003f12:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f14:	782b      	ldrb	r3, [r5, #0]
 8003f16:	2b30      	cmp	r3, #48	; 0x30
 8003f18:	f040 80af 	bne.w	800407a <_strtod_l+0x1aa>
 8003f1c:	786b      	ldrb	r3, [r5, #1]
 8003f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f22:	2b58      	cmp	r3, #88	; 0x58
 8003f24:	d16c      	bne.n	8004000 <_strtod_l+0x130>
 8003f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f28:	4650      	mov	r0, sl
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	ab1c      	add	r3, sp, #112	; 0x70
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4a8d      	ldr	r2, [pc, #564]	; (8004168 <_strtod_l+0x298>)
 8003f32:	f8cd b008 	str.w	fp, [sp, #8]
 8003f36:	ab1d      	add	r3, sp, #116	; 0x74
 8003f38:	a91b      	add	r1, sp, #108	; 0x6c
 8003f3a:	f001 ffa7 	bl	8005e8c <__gethex>
 8003f3e:	f010 0607 	ands.w	r6, r0, #7
 8003f42:	4604      	mov	r4, r0
 8003f44:	d005      	beq.n	8003f52 <_strtod_l+0x82>
 8003f46:	2e06      	cmp	r6, #6
 8003f48:	d129      	bne.n	8003f9e <_strtod_l+0xce>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	3501      	adds	r5, #1
 8003f4e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f50:	930c      	str	r3, [sp, #48]	; 0x30
 8003f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8596 	bne.w	8004a86 <_strtod_l+0xbb6>
 8003f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f5c:	b1d3      	cbz	r3, 8003f94 <_strtod_l+0xc4>
 8003f5e:	4642      	mov	r2, r8
 8003f60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	b021      	add	sp, #132	; 0x84
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	2a20      	cmp	r2, #32
 8003f70:	d1cd      	bne.n	8003f0e <_strtod_l+0x3e>
 8003f72:	3301      	adds	r3, #1
 8003f74:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f76:	e7bf      	b.n	8003ef8 <_strtod_l+0x28>
 8003f78:	2a2d      	cmp	r2, #45	; 0x2d
 8003f7a:	d1c8      	bne.n	8003f0e <_strtod_l+0x3e>
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	920c      	str	r2, [sp, #48]	; 0x30
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1c3      	bne.n	8003f12 <_strtod_l+0x42>
 8003f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 8577 	bne.w	8004a82 <_strtod_l+0xbb2>
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	e7e4      	b.n	8003f64 <_strtod_l+0x94>
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	e7ef      	b.n	8003f7e <_strtod_l+0xae>
 8003f9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003fa0:	b13a      	cbz	r2, 8003fb2 <_strtod_l+0xe2>
 8003fa2:	2135      	movs	r1, #53	; 0x35
 8003fa4:	a81e      	add	r0, sp, #120	; 0x78
 8003fa6:	f002 ff77 	bl	8006e98 <__copybits>
 8003faa:	4650      	mov	r0, sl
 8003fac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fae:	f002 fb3f 	bl	8006630 <_Bfree>
 8003fb2:	3e01      	subs	r6, #1
 8003fb4:	2e05      	cmp	r6, #5
 8003fb6:	d807      	bhi.n	8003fc8 <_strtod_l+0xf8>
 8003fb8:	e8df f006 	tbb	[pc, r6]
 8003fbc:	1d180b0e 	.word	0x1d180b0e
 8003fc0:	030e      	.short	0x030e
 8003fc2:	f04f 0900 	mov.w	r9, #0
 8003fc6:	46c8      	mov	r8, r9
 8003fc8:	0721      	lsls	r1, r4, #28
 8003fca:	d5c2      	bpl.n	8003f52 <_strtod_l+0x82>
 8003fcc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003fd0:	e7bf      	b.n	8003f52 <_strtod_l+0x82>
 8003fd2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003fd6:	e7f7      	b.n	8003fc8 <_strtod_l+0xf8>
 8003fd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003fda:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003fde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003fe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fe6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003fea:	e7ed      	b.n	8003fc8 <_strtod_l+0xf8>
 8003fec:	f04f 0800 	mov.w	r8, #0
 8003ff0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800416c <_strtod_l+0x29c>
 8003ff4:	e7e8      	b.n	8003fc8 <_strtod_l+0xf8>
 8003ff6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ffa:	f04f 38ff 	mov.w	r8, #4294967295
 8003ffe:	e7e3      	b.n	8003fc8 <_strtod_l+0xf8>
 8004000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	921b      	str	r2, [sp, #108]	; 0x6c
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b30      	cmp	r3, #48	; 0x30
 800400a:	d0f9      	beq.n	8004000 <_strtod_l+0x130>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0a0      	beq.n	8003f52 <_strtod_l+0x82>
 8004010:	2301      	movs	r3, #1
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004016:	220a      	movs	r2, #10
 8004018:	9308      	str	r3, [sp, #32]
 800401a:	2300      	movs	r3, #0
 800401c:	469b      	mov	fp, r3
 800401e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004022:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004024:	7805      	ldrb	r5, [r0, #0]
 8004026:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800402a:	b2d9      	uxtb	r1, r3
 800402c:	2909      	cmp	r1, #9
 800402e:	d926      	bls.n	800407e <_strtod_l+0x1ae>
 8004030:	4622      	mov	r2, r4
 8004032:	4639      	mov	r1, r7
 8004034:	f003 f9dd 	bl	80073f2 <strncmp>
 8004038:	2800      	cmp	r0, #0
 800403a:	d032      	beq.n	80040a2 <_strtod_l+0x1d2>
 800403c:	2000      	movs	r0, #0
 800403e:	462b      	mov	r3, r5
 8004040:	465c      	mov	r4, fp
 8004042:	4602      	mov	r2, r0
 8004044:	9004      	str	r0, [sp, #16]
 8004046:	2b65      	cmp	r3, #101	; 0x65
 8004048:	d001      	beq.n	800404e <_strtod_l+0x17e>
 800404a:	2b45      	cmp	r3, #69	; 0x45
 800404c:	d113      	bne.n	8004076 <_strtod_l+0x1a6>
 800404e:	b91c      	cbnz	r4, 8004058 <_strtod_l+0x188>
 8004050:	9b07      	ldr	r3, [sp, #28]
 8004052:	4303      	orrs	r3, r0
 8004054:	d099      	beq.n	8003f8a <_strtod_l+0xba>
 8004056:	2400      	movs	r4, #0
 8004058:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800405a:	1c73      	adds	r3, r6, #1
 800405c:	931b      	str	r3, [sp, #108]	; 0x6c
 800405e:	7873      	ldrb	r3, [r6, #1]
 8004060:	2b2b      	cmp	r3, #43	; 0x2b
 8004062:	d078      	beq.n	8004156 <_strtod_l+0x286>
 8004064:	2b2d      	cmp	r3, #45	; 0x2d
 8004066:	d07b      	beq.n	8004160 <_strtod_l+0x290>
 8004068:	2700      	movs	r7, #0
 800406a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800406e:	2909      	cmp	r1, #9
 8004070:	f240 8082 	bls.w	8004178 <_strtod_l+0x2a8>
 8004074:	961b      	str	r6, [sp, #108]	; 0x6c
 8004076:	2500      	movs	r5, #0
 8004078:	e09e      	b.n	80041b8 <_strtod_l+0x2e8>
 800407a:	2300      	movs	r3, #0
 800407c:	e7c9      	b.n	8004012 <_strtod_l+0x142>
 800407e:	f1bb 0f08 	cmp.w	fp, #8
 8004082:	bfd5      	itete	le
 8004084:	9906      	ldrle	r1, [sp, #24]
 8004086:	9905      	ldrgt	r1, [sp, #20]
 8004088:	fb02 3301 	mlale	r3, r2, r1, r3
 800408c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004090:	f100 0001 	add.w	r0, r0, #1
 8004094:	bfd4      	ite	le
 8004096:	9306      	strle	r3, [sp, #24]
 8004098:	9305      	strgt	r3, [sp, #20]
 800409a:	f10b 0b01 	add.w	fp, fp, #1
 800409e:	901b      	str	r0, [sp, #108]	; 0x6c
 80040a0:	e7bf      	b.n	8004022 <_strtod_l+0x152>
 80040a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040a4:	191a      	adds	r2, r3, r4
 80040a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80040a8:	5d1b      	ldrb	r3, [r3, r4]
 80040aa:	f1bb 0f00 	cmp.w	fp, #0
 80040ae:	d036      	beq.n	800411e <_strtod_l+0x24e>
 80040b0:	465c      	mov	r4, fp
 80040b2:	9004      	str	r0, [sp, #16]
 80040b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80040b8:	2a09      	cmp	r2, #9
 80040ba:	d912      	bls.n	80040e2 <_strtod_l+0x212>
 80040bc:	2201      	movs	r2, #1
 80040be:	e7c2      	b.n	8004046 <_strtod_l+0x176>
 80040c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040c2:	3001      	adds	r0, #1
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	921b      	str	r2, [sp, #108]	; 0x6c
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b30      	cmp	r3, #48	; 0x30
 80040cc:	d0f8      	beq.n	80040c0 <_strtod_l+0x1f0>
 80040ce:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80040d2:	2a08      	cmp	r2, #8
 80040d4:	f200 84dc 	bhi.w	8004a90 <_strtod_l+0xbc0>
 80040d8:	9004      	str	r0, [sp, #16]
 80040da:	2000      	movs	r0, #0
 80040dc:	4604      	mov	r4, r0
 80040de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80040e0:	9208      	str	r2, [sp, #32]
 80040e2:	3b30      	subs	r3, #48	; 0x30
 80040e4:	f100 0201 	add.w	r2, r0, #1
 80040e8:	d013      	beq.n	8004112 <_strtod_l+0x242>
 80040ea:	9904      	ldr	r1, [sp, #16]
 80040ec:	1905      	adds	r5, r0, r4
 80040ee:	4411      	add	r1, r2
 80040f0:	9104      	str	r1, [sp, #16]
 80040f2:	4622      	mov	r2, r4
 80040f4:	210a      	movs	r1, #10
 80040f6:	42aa      	cmp	r2, r5
 80040f8:	d113      	bne.n	8004122 <_strtod_l+0x252>
 80040fa:	1822      	adds	r2, r4, r0
 80040fc:	2a08      	cmp	r2, #8
 80040fe:	f104 0401 	add.w	r4, r4, #1
 8004102:	4404      	add	r4, r0
 8004104:	dc1b      	bgt.n	800413e <_strtod_l+0x26e>
 8004106:	220a      	movs	r2, #10
 8004108:	9906      	ldr	r1, [sp, #24]
 800410a:	fb02 3301 	mla	r3, r2, r1, r3
 800410e:	9306      	str	r3, [sp, #24]
 8004110:	2200      	movs	r2, #0
 8004112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004114:	4610      	mov	r0, r2
 8004116:	1c59      	adds	r1, r3, #1
 8004118:	911b      	str	r1, [sp, #108]	; 0x6c
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	e7ca      	b.n	80040b4 <_strtod_l+0x1e4>
 800411e:	4658      	mov	r0, fp
 8004120:	e7d3      	b.n	80040ca <_strtod_l+0x1fa>
 8004122:	2a08      	cmp	r2, #8
 8004124:	dc04      	bgt.n	8004130 <_strtod_l+0x260>
 8004126:	9f06      	ldr	r7, [sp, #24]
 8004128:	434f      	muls	r7, r1
 800412a:	9706      	str	r7, [sp, #24]
 800412c:	3201      	adds	r2, #1
 800412e:	e7e2      	b.n	80040f6 <_strtod_l+0x226>
 8004130:	1c57      	adds	r7, r2, #1
 8004132:	2f10      	cmp	r7, #16
 8004134:	bfde      	ittt	le
 8004136:	9f05      	ldrle	r7, [sp, #20]
 8004138:	434f      	mulle	r7, r1
 800413a:	9705      	strle	r7, [sp, #20]
 800413c:	e7f6      	b.n	800412c <_strtod_l+0x25c>
 800413e:	2c10      	cmp	r4, #16
 8004140:	bfdf      	itttt	le
 8004142:	220a      	movle	r2, #10
 8004144:	9905      	ldrle	r1, [sp, #20]
 8004146:	fb02 3301 	mlale	r3, r2, r1, r3
 800414a:	9305      	strle	r3, [sp, #20]
 800414c:	e7e0      	b.n	8004110 <_strtod_l+0x240>
 800414e:	2300      	movs	r3, #0
 8004150:	2201      	movs	r2, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	e77c      	b.n	8004050 <_strtod_l+0x180>
 8004156:	2700      	movs	r7, #0
 8004158:	1cb3      	adds	r3, r6, #2
 800415a:	931b      	str	r3, [sp, #108]	; 0x6c
 800415c:	78b3      	ldrb	r3, [r6, #2]
 800415e:	e784      	b.n	800406a <_strtod_l+0x19a>
 8004160:	2701      	movs	r7, #1
 8004162:	e7f9      	b.n	8004158 <_strtod_l+0x288>
 8004164:	080084dc 	.word	0x080084dc
 8004168:	08008224 	.word	0x08008224
 800416c:	7ff00000 	.word	0x7ff00000
 8004170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	911b      	str	r1, [sp, #108]	; 0x6c
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b30      	cmp	r3, #48	; 0x30
 800417a:	d0f9      	beq.n	8004170 <_strtod_l+0x2a0>
 800417c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004180:	2908      	cmp	r1, #8
 8004182:	f63f af78 	bhi.w	8004076 <_strtod_l+0x1a6>
 8004186:	f04f 0e0a 	mov.w	lr, #10
 800418a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800418e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
 8004192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	911b      	str	r1, [sp, #108]	; 0x6c
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800419e:	2d09      	cmp	r5, #9
 80041a0:	d935      	bls.n	800420e <_strtod_l+0x33e>
 80041a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80041a4:	1b49      	subs	r1, r1, r5
 80041a6:	2908      	cmp	r1, #8
 80041a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80041ac:	dc02      	bgt.n	80041b4 <_strtod_l+0x2e4>
 80041ae:	4565      	cmp	r5, ip
 80041b0:	bfa8      	it	ge
 80041b2:	4665      	movge	r5, ip
 80041b4:	b107      	cbz	r7, 80041b8 <_strtod_l+0x2e8>
 80041b6:	426d      	negs	r5, r5
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d14c      	bne.n	8004256 <_strtod_l+0x386>
 80041bc:	9907      	ldr	r1, [sp, #28]
 80041be:	4301      	orrs	r1, r0
 80041c0:	f47f aec7 	bne.w	8003f52 <_strtod_l+0x82>
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	f47f aee0 	bne.w	8003f8a <_strtod_l+0xba>
 80041ca:	2b69      	cmp	r3, #105	; 0x69
 80041cc:	d026      	beq.n	800421c <_strtod_l+0x34c>
 80041ce:	dc23      	bgt.n	8004218 <_strtod_l+0x348>
 80041d0:	2b49      	cmp	r3, #73	; 0x49
 80041d2:	d023      	beq.n	800421c <_strtod_l+0x34c>
 80041d4:	2b4e      	cmp	r3, #78	; 0x4e
 80041d6:	f47f aed8 	bne.w	8003f8a <_strtod_l+0xba>
 80041da:	499c      	ldr	r1, [pc, #624]	; (800444c <_strtod_l+0x57c>)
 80041dc:	a81b      	add	r0, sp, #108	; 0x6c
 80041de:	f002 f8a3 	bl	8006328 <__match>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f43f aed1 	beq.w	8003f8a <_strtod_l+0xba>
 80041e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b28      	cmp	r3, #40	; 0x28
 80041ee:	d12c      	bne.n	800424a <_strtod_l+0x37a>
 80041f0:	4997      	ldr	r1, [pc, #604]	; (8004450 <_strtod_l+0x580>)
 80041f2:	aa1e      	add	r2, sp, #120	; 0x78
 80041f4:	a81b      	add	r0, sp, #108	; 0x6c
 80041f6:	f002 f8ab 	bl	8006350 <__hexnan>
 80041fa:	2805      	cmp	r0, #5
 80041fc:	d125      	bne.n	800424a <_strtod_l+0x37a>
 80041fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004200:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004204:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004208:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800420c:	e6a1      	b.n	8003f52 <_strtod_l+0x82>
 800420e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004212:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004216:	e7bc      	b.n	8004192 <_strtod_l+0x2c2>
 8004218:	2b6e      	cmp	r3, #110	; 0x6e
 800421a:	e7dc      	b.n	80041d6 <_strtod_l+0x306>
 800421c:	498d      	ldr	r1, [pc, #564]	; (8004454 <_strtod_l+0x584>)
 800421e:	a81b      	add	r0, sp, #108	; 0x6c
 8004220:	f002 f882 	bl	8006328 <__match>
 8004224:	2800      	cmp	r0, #0
 8004226:	f43f aeb0 	beq.w	8003f8a <_strtod_l+0xba>
 800422a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800422c:	498a      	ldr	r1, [pc, #552]	; (8004458 <_strtod_l+0x588>)
 800422e:	3b01      	subs	r3, #1
 8004230:	a81b      	add	r0, sp, #108	; 0x6c
 8004232:	931b      	str	r3, [sp, #108]	; 0x6c
 8004234:	f002 f878 	bl	8006328 <__match>
 8004238:	b910      	cbnz	r0, 8004240 <_strtod_l+0x370>
 800423a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800423c:	3301      	adds	r3, #1
 800423e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004240:	f04f 0800 	mov.w	r8, #0
 8004244:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004468 <_strtod_l+0x598>
 8004248:	e683      	b.n	8003f52 <_strtod_l+0x82>
 800424a:	4884      	ldr	r0, [pc, #528]	; (800445c <_strtod_l+0x58c>)
 800424c:	f003 f878 	bl	8007340 <nan>
 8004250:	4680      	mov	r8, r0
 8004252:	4689      	mov	r9, r1
 8004254:	e67d      	b.n	8003f52 <_strtod_l+0x82>
 8004256:	9b04      	ldr	r3, [sp, #16]
 8004258:	f1bb 0f00 	cmp.w	fp, #0
 800425c:	bf08      	it	eq
 800425e:	46a3      	moveq	fp, r4
 8004260:	1aeb      	subs	r3, r5, r3
 8004262:	2c10      	cmp	r4, #16
 8004264:	9806      	ldr	r0, [sp, #24]
 8004266:	4626      	mov	r6, r4
 8004268:	9307      	str	r3, [sp, #28]
 800426a:	bfa8      	it	ge
 800426c:	2610      	movge	r6, #16
 800426e:	f7fc f8c9 	bl	8000404 <__aeabi_ui2d>
 8004272:	2c09      	cmp	r4, #9
 8004274:	4680      	mov	r8, r0
 8004276:	4689      	mov	r9, r1
 8004278:	dd13      	ble.n	80042a2 <_strtod_l+0x3d2>
 800427a:	4b79      	ldr	r3, [pc, #484]	; (8004460 <_strtod_l+0x590>)
 800427c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004280:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004284:	f7fc f938 	bl	80004f8 <__aeabi_dmul>
 8004288:	4680      	mov	r8, r0
 800428a:	9805      	ldr	r0, [sp, #20]
 800428c:	4689      	mov	r9, r1
 800428e:	f7fc f8b9 	bl	8000404 <__aeabi_ui2d>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4640      	mov	r0, r8
 8004298:	4649      	mov	r1, r9
 800429a:	f7fb ff77 	bl	800018c <__adddf3>
 800429e:	4680      	mov	r8, r0
 80042a0:	4689      	mov	r9, r1
 80042a2:	2c0f      	cmp	r4, #15
 80042a4:	dc36      	bgt.n	8004314 <_strtod_l+0x444>
 80042a6:	9b07      	ldr	r3, [sp, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f ae52 	beq.w	8003f52 <_strtod_l+0x82>
 80042ae:	dd22      	ble.n	80042f6 <_strtod_l+0x426>
 80042b0:	2b16      	cmp	r3, #22
 80042b2:	dc09      	bgt.n	80042c8 <_strtod_l+0x3f8>
 80042b4:	4c6a      	ldr	r4, [pc, #424]	; (8004460 <_strtod_l+0x590>)
 80042b6:	4642      	mov	r2, r8
 80042b8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80042bc:	464b      	mov	r3, r9
 80042be:	e9d4 0100 	ldrd	r0, r1, [r4]
 80042c2:	f7fc f919 	bl	80004f8 <__aeabi_dmul>
 80042c6:	e7c3      	b.n	8004250 <_strtod_l+0x380>
 80042c8:	9a07      	ldr	r2, [sp, #28]
 80042ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80042ce:	4293      	cmp	r3, r2
 80042d0:	db20      	blt.n	8004314 <_strtod_l+0x444>
 80042d2:	4d63      	ldr	r5, [pc, #396]	; (8004460 <_strtod_l+0x590>)
 80042d4:	f1c4 040f 	rsb	r4, r4, #15
 80042d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80042dc:	4642      	mov	r2, r8
 80042de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e2:	464b      	mov	r3, r9
 80042e4:	f7fc f908 	bl	80004f8 <__aeabi_dmul>
 80042e8:	9b07      	ldr	r3, [sp, #28]
 80042ea:	1b1c      	subs	r4, r3, r4
 80042ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80042f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042f4:	e7e5      	b.n	80042c2 <_strtod_l+0x3f2>
 80042f6:	9b07      	ldr	r3, [sp, #28]
 80042f8:	3316      	adds	r3, #22
 80042fa:	db0b      	blt.n	8004314 <_strtod_l+0x444>
 80042fc:	9b04      	ldr	r3, [sp, #16]
 80042fe:	4a58      	ldr	r2, [pc, #352]	; (8004460 <_strtod_l+0x590>)
 8004300:	1b5d      	subs	r5, r3, r5
 8004302:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004306:	4640      	mov	r0, r8
 8004308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800430c:	4649      	mov	r1, r9
 800430e:	f7fc fa1d 	bl	800074c <__aeabi_ddiv>
 8004312:	e79d      	b.n	8004250 <_strtod_l+0x380>
 8004314:	9b07      	ldr	r3, [sp, #28]
 8004316:	1ba6      	subs	r6, r4, r6
 8004318:	441e      	add	r6, r3
 800431a:	2e00      	cmp	r6, #0
 800431c:	dd71      	ble.n	8004402 <_strtod_l+0x532>
 800431e:	f016 030f 	ands.w	r3, r6, #15
 8004322:	d00a      	beq.n	800433a <_strtod_l+0x46a>
 8004324:	494e      	ldr	r1, [pc, #312]	; (8004460 <_strtod_l+0x590>)
 8004326:	4642      	mov	r2, r8
 8004328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800432c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004330:	464b      	mov	r3, r9
 8004332:	f7fc f8e1 	bl	80004f8 <__aeabi_dmul>
 8004336:	4680      	mov	r8, r0
 8004338:	4689      	mov	r9, r1
 800433a:	f036 060f 	bics.w	r6, r6, #15
 800433e:	d050      	beq.n	80043e2 <_strtod_l+0x512>
 8004340:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004344:	dd27      	ble.n	8004396 <_strtod_l+0x4c6>
 8004346:	f04f 0b00 	mov.w	fp, #0
 800434a:	f8cd b010 	str.w	fp, [sp, #16]
 800434e:	f8cd b020 	str.w	fp, [sp, #32]
 8004352:	f8cd b018 	str.w	fp, [sp, #24]
 8004356:	2322      	movs	r3, #34	; 0x22
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004468 <_strtod_l+0x598>
 8004360:	f8ca 3000 	str.w	r3, [sl]
 8004364:	9b08      	ldr	r3, [sp, #32]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f43f adf3 	beq.w	8003f52 <_strtod_l+0x82>
 800436c:	4650      	mov	r0, sl
 800436e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004370:	f002 f95e 	bl	8006630 <_Bfree>
 8004374:	4650      	mov	r0, sl
 8004376:	9906      	ldr	r1, [sp, #24]
 8004378:	f002 f95a 	bl	8006630 <_Bfree>
 800437c:	4650      	mov	r0, sl
 800437e:	9904      	ldr	r1, [sp, #16]
 8004380:	f002 f956 	bl	8006630 <_Bfree>
 8004384:	4650      	mov	r0, sl
 8004386:	9908      	ldr	r1, [sp, #32]
 8004388:	f002 f952 	bl	8006630 <_Bfree>
 800438c:	4659      	mov	r1, fp
 800438e:	4650      	mov	r0, sl
 8004390:	f002 f94e 	bl	8006630 <_Bfree>
 8004394:	e5dd      	b.n	8003f52 <_strtod_l+0x82>
 8004396:	2300      	movs	r3, #0
 8004398:	4640      	mov	r0, r8
 800439a:	4649      	mov	r1, r9
 800439c:	461f      	mov	r7, r3
 800439e:	1136      	asrs	r6, r6, #4
 80043a0:	2e01      	cmp	r6, #1
 80043a2:	dc21      	bgt.n	80043e8 <_strtod_l+0x518>
 80043a4:	b10b      	cbz	r3, 80043aa <_strtod_l+0x4da>
 80043a6:	4680      	mov	r8, r0
 80043a8:	4689      	mov	r9, r1
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <_strtod_l+0x594>)
 80043ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80043b0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80043b4:	4642      	mov	r2, r8
 80043b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043ba:	464b      	mov	r3, r9
 80043bc:	f7fc f89c 	bl	80004f8 <__aeabi_dmul>
 80043c0:	4b29      	ldr	r3, [pc, #164]	; (8004468 <_strtod_l+0x598>)
 80043c2:	460a      	mov	r2, r1
 80043c4:	400b      	ands	r3, r1
 80043c6:	4929      	ldr	r1, [pc, #164]	; (800446c <_strtod_l+0x59c>)
 80043c8:	4680      	mov	r8, r0
 80043ca:	428b      	cmp	r3, r1
 80043cc:	d8bb      	bhi.n	8004346 <_strtod_l+0x476>
 80043ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80043d2:	428b      	cmp	r3, r1
 80043d4:	bf86      	itte	hi
 80043d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80043da:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004470 <_strtod_l+0x5a0>
 80043de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80043e2:	2300      	movs	r3, #0
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	e07e      	b.n	80044e6 <_strtod_l+0x616>
 80043e8:	07f2      	lsls	r2, r6, #31
 80043ea:	d507      	bpl.n	80043fc <_strtod_l+0x52c>
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <_strtod_l+0x594>)
 80043ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc f87f 	bl	80004f8 <__aeabi_dmul>
 80043fa:	2301      	movs	r3, #1
 80043fc:	3701      	adds	r7, #1
 80043fe:	1076      	asrs	r6, r6, #1
 8004400:	e7ce      	b.n	80043a0 <_strtod_l+0x4d0>
 8004402:	d0ee      	beq.n	80043e2 <_strtod_l+0x512>
 8004404:	4276      	negs	r6, r6
 8004406:	f016 020f 	ands.w	r2, r6, #15
 800440a:	d00a      	beq.n	8004422 <_strtod_l+0x552>
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <_strtod_l+0x590>)
 800440e:	4640      	mov	r0, r8
 8004410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004414:	4649      	mov	r1, r9
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fc f997 	bl	800074c <__aeabi_ddiv>
 800441e:	4680      	mov	r8, r0
 8004420:	4689      	mov	r9, r1
 8004422:	1136      	asrs	r6, r6, #4
 8004424:	d0dd      	beq.n	80043e2 <_strtod_l+0x512>
 8004426:	2e1f      	cmp	r6, #31
 8004428:	dd24      	ble.n	8004474 <_strtod_l+0x5a4>
 800442a:	f04f 0b00 	mov.w	fp, #0
 800442e:	f8cd b010 	str.w	fp, [sp, #16]
 8004432:	f8cd b020 	str.w	fp, [sp, #32]
 8004436:	f8cd b018 	str.w	fp, [sp, #24]
 800443a:	2322      	movs	r3, #34	; 0x22
 800443c:	f04f 0800 	mov.w	r8, #0
 8004440:	f04f 0900 	mov.w	r9, #0
 8004444:	f8ca 3000 	str.w	r3, [sl]
 8004448:	e78c      	b.n	8004364 <_strtod_l+0x494>
 800444a:	bf00      	nop
 800444c:	080081f5 	.word	0x080081f5
 8004450:	08008238 	.word	0x08008238
 8004454:	080081ed 	.word	0x080081ed
 8004458:	0800837c 	.word	0x0800837c
 800445c:	08008698 	.word	0x08008698
 8004460:	08008578 	.word	0x08008578
 8004464:	08008550 	.word	0x08008550
 8004468:	7ff00000 	.word	0x7ff00000
 800446c:	7ca00000 	.word	0x7ca00000
 8004470:	7fefffff 	.word	0x7fefffff
 8004474:	f016 0310 	ands.w	r3, r6, #16
 8004478:	bf18      	it	ne
 800447a:	236a      	movne	r3, #106	; 0x6a
 800447c:	4640      	mov	r0, r8
 800447e:	9305      	str	r3, [sp, #20]
 8004480:	4649      	mov	r1, r9
 8004482:	2300      	movs	r3, #0
 8004484:	4fb2      	ldr	r7, [pc, #712]	; (8004750 <_strtod_l+0x880>)
 8004486:	07f2      	lsls	r2, r6, #31
 8004488:	d504      	bpl.n	8004494 <_strtod_l+0x5c4>
 800448a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448e:	f7fc f833 	bl	80004f8 <__aeabi_dmul>
 8004492:	2301      	movs	r3, #1
 8004494:	1076      	asrs	r6, r6, #1
 8004496:	f107 0708 	add.w	r7, r7, #8
 800449a:	d1f4      	bne.n	8004486 <_strtod_l+0x5b6>
 800449c:	b10b      	cbz	r3, 80044a2 <_strtod_l+0x5d2>
 800449e:	4680      	mov	r8, r0
 80044a0:	4689      	mov	r9, r1
 80044a2:	9b05      	ldr	r3, [sp, #20]
 80044a4:	b1bb      	cbz	r3, 80044d6 <_strtod_l+0x606>
 80044a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80044aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	4649      	mov	r1, r9
 80044b2:	dd10      	ble.n	80044d6 <_strtod_l+0x606>
 80044b4:	2b1f      	cmp	r3, #31
 80044b6:	f340 812b 	ble.w	8004710 <_strtod_l+0x840>
 80044ba:	2b34      	cmp	r3, #52	; 0x34
 80044bc:	bfd8      	it	le
 80044be:	f04f 32ff 	movle.w	r2, #4294967295
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	bfcf      	iteee	gt
 80044c8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80044cc:	3b20      	suble	r3, #32
 80044ce:	fa02 f303 	lslle.w	r3, r2, r3
 80044d2:	ea03 0901 	andle.w	r9, r3, r1
 80044d6:	2200      	movs	r2, #0
 80044d8:	2300      	movs	r3, #0
 80044da:	4640      	mov	r0, r8
 80044dc:	4649      	mov	r1, r9
 80044de:	f7fc fa73 	bl	80009c8 <__aeabi_dcmpeq>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d1a1      	bne.n	800442a <_strtod_l+0x55a>
 80044e6:	9b06      	ldr	r3, [sp, #24]
 80044e8:	465a      	mov	r2, fp
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4650      	mov	r0, sl
 80044ee:	4623      	mov	r3, r4
 80044f0:	9908      	ldr	r1, [sp, #32]
 80044f2:	f002 f909 	bl	8006708 <__s2b>
 80044f6:	9008      	str	r0, [sp, #32]
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f43f af24 	beq.w	8004346 <_strtod_l+0x476>
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	f04f 0b00 	mov.w	fp, #0
 8004504:	1b5d      	subs	r5, r3, r5
 8004506:	9b07      	ldr	r3, [sp, #28]
 8004508:	f8cd b010 	str.w	fp, [sp, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	bfb4      	ite	lt
 8004510:	462b      	movlt	r3, r5
 8004512:	2300      	movge	r3, #0
 8004514:	930e      	str	r3, [sp, #56]	; 0x38
 8004516:	9b07      	ldr	r3, [sp, #28]
 8004518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800451c:	9316      	str	r3, [sp, #88]	; 0x58
 800451e:	9b08      	ldr	r3, [sp, #32]
 8004520:	4650      	mov	r0, sl
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	f002 f844 	bl	80065b0 <_Balloc>
 8004528:	9006      	str	r0, [sp, #24]
 800452a:	2800      	cmp	r0, #0
 800452c:	f43f af13 	beq.w	8004356 <_strtod_l+0x486>
 8004530:	9b08      	ldr	r3, [sp, #32]
 8004532:	300c      	adds	r0, #12
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	f103 010c 	add.w	r1, r3, #12
 800453a:	3202      	adds	r2, #2
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	f7fe fdc1 	bl	80030c4 <memcpy>
 8004542:	ab1e      	add	r3, sp, #120	; 0x78
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	ab1d      	add	r3, sp, #116	; 0x74
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	4650      	mov	r0, sl
 8004550:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004554:	f002 fc16 	bl	8006d84 <__d2b>
 8004558:	901c      	str	r0, [sp, #112]	; 0x70
 800455a:	2800      	cmp	r0, #0
 800455c:	f43f aefb 	beq.w	8004356 <_strtod_l+0x486>
 8004560:	2101      	movs	r1, #1
 8004562:	4650      	mov	r0, sl
 8004564:	f002 f968 	bl	8006838 <__i2b>
 8004568:	4603      	mov	r3, r0
 800456a:	9004      	str	r0, [sp, #16]
 800456c:	2800      	cmp	r0, #0
 800456e:	f43f aef2 	beq.w	8004356 <_strtod_l+0x486>
 8004572:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004574:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004576:	2d00      	cmp	r5, #0
 8004578:	bfab      	itete	ge
 800457a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800457c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800457e:	18ee      	addge	r6, r5, r3
 8004580:	1b5c      	sublt	r4, r3, r5
 8004582:	9b05      	ldr	r3, [sp, #20]
 8004584:	bfa8      	it	ge
 8004586:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004588:	eba5 0503 	sub.w	r5, r5, r3
 800458c:	4415      	add	r5, r2
 800458e:	4b71      	ldr	r3, [pc, #452]	; (8004754 <_strtod_l+0x884>)
 8004590:	f105 35ff 	add.w	r5, r5, #4294967295
 8004594:	bfb8      	it	lt
 8004596:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004598:	429d      	cmp	r5, r3
 800459a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800459e:	f280 80c9 	bge.w	8004734 <_strtod_l+0x864>
 80045a2:	1b5b      	subs	r3, r3, r5
 80045a4:	2b1f      	cmp	r3, #31
 80045a6:	f04f 0701 	mov.w	r7, #1
 80045aa:	eba2 0203 	sub.w	r2, r2, r3
 80045ae:	f300 80b6 	bgt.w	800471e <_strtod_l+0x84e>
 80045b2:	2500      	movs	r5, #0
 80045b4:	fa07 f303 	lsl.w	r3, r7, r3
 80045b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80045ba:	18b7      	adds	r7, r6, r2
 80045bc:	9b05      	ldr	r3, [sp, #20]
 80045be:	42be      	cmp	r6, r7
 80045c0:	4414      	add	r4, r2
 80045c2:	441c      	add	r4, r3
 80045c4:	4633      	mov	r3, r6
 80045c6:	bfa8      	it	ge
 80045c8:	463b      	movge	r3, r7
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	bfa8      	it	ge
 80045ce:	4623      	movge	r3, r4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfc2      	ittt	gt
 80045d4:	1aff      	subgt	r7, r7, r3
 80045d6:	1ae4      	subgt	r4, r4, r3
 80045d8:	1af6      	subgt	r6, r6, r3
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dd17      	ble.n	8004610 <_strtod_l+0x740>
 80045e0:	461a      	mov	r2, r3
 80045e2:	4650      	mov	r0, sl
 80045e4:	9904      	ldr	r1, [sp, #16]
 80045e6:	f002 f9e1 	bl	80069ac <__pow5mult>
 80045ea:	9004      	str	r0, [sp, #16]
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f43f aeb2 	beq.w	8004356 <_strtod_l+0x486>
 80045f2:	4601      	mov	r1, r0
 80045f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045f6:	4650      	mov	r0, sl
 80045f8:	f002 f934 	bl	8006864 <__multiply>
 80045fc:	9009      	str	r0, [sp, #36]	; 0x24
 80045fe:	2800      	cmp	r0, #0
 8004600:	f43f aea9 	beq.w	8004356 <_strtod_l+0x486>
 8004604:	4650      	mov	r0, sl
 8004606:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004608:	f002 f812 	bl	8006630 <_Bfree>
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	931c      	str	r3, [sp, #112]	; 0x70
 8004610:	2f00      	cmp	r7, #0
 8004612:	f300 8093 	bgt.w	800473c <_strtod_l+0x86c>
 8004616:	9b07      	ldr	r3, [sp, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dd08      	ble.n	800462e <_strtod_l+0x75e>
 800461c:	4650      	mov	r0, sl
 800461e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004620:	9906      	ldr	r1, [sp, #24]
 8004622:	f002 f9c3 	bl	80069ac <__pow5mult>
 8004626:	9006      	str	r0, [sp, #24]
 8004628:	2800      	cmp	r0, #0
 800462a:	f43f ae94 	beq.w	8004356 <_strtod_l+0x486>
 800462e:	2c00      	cmp	r4, #0
 8004630:	dd08      	ble.n	8004644 <_strtod_l+0x774>
 8004632:	4622      	mov	r2, r4
 8004634:	4650      	mov	r0, sl
 8004636:	9906      	ldr	r1, [sp, #24]
 8004638:	f002 fa12 	bl	8006a60 <__lshift>
 800463c:	9006      	str	r0, [sp, #24]
 800463e:	2800      	cmp	r0, #0
 8004640:	f43f ae89 	beq.w	8004356 <_strtod_l+0x486>
 8004644:	2e00      	cmp	r6, #0
 8004646:	dd08      	ble.n	800465a <_strtod_l+0x78a>
 8004648:	4632      	mov	r2, r6
 800464a:	4650      	mov	r0, sl
 800464c:	9904      	ldr	r1, [sp, #16]
 800464e:	f002 fa07 	bl	8006a60 <__lshift>
 8004652:	9004      	str	r0, [sp, #16]
 8004654:	2800      	cmp	r0, #0
 8004656:	f43f ae7e 	beq.w	8004356 <_strtod_l+0x486>
 800465a:	4650      	mov	r0, sl
 800465c:	9a06      	ldr	r2, [sp, #24]
 800465e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004660:	f002 fa86 	bl	8006b70 <__mdiff>
 8004664:	4683      	mov	fp, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	f43f ae75 	beq.w	8004356 <_strtod_l+0x486>
 800466c:	2400      	movs	r4, #0
 800466e:	68c3      	ldr	r3, [r0, #12]
 8004670:	9904      	ldr	r1, [sp, #16]
 8004672:	60c4      	str	r4, [r0, #12]
 8004674:	930d      	str	r3, [sp, #52]	; 0x34
 8004676:	f002 fa5f 	bl	8006b38 <__mcmp>
 800467a:	42a0      	cmp	r0, r4
 800467c:	da70      	bge.n	8004760 <_strtod_l+0x890>
 800467e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004680:	ea53 0308 	orrs.w	r3, r3, r8
 8004684:	f040 8096 	bne.w	80047b4 <_strtod_l+0x8e4>
 8004688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8091 	bne.w	80047b4 <_strtod_l+0x8e4>
 8004692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004696:	0d1b      	lsrs	r3, r3, #20
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800469e:	f240 8089 	bls.w	80047b4 <_strtod_l+0x8e4>
 80046a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80046a6:	b923      	cbnz	r3, 80046b2 <_strtod_l+0x7e2>
 80046a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f340 8081 	ble.w	80047b4 <_strtod_l+0x8e4>
 80046b2:	4659      	mov	r1, fp
 80046b4:	2201      	movs	r2, #1
 80046b6:	4650      	mov	r0, sl
 80046b8:	f002 f9d2 	bl	8006a60 <__lshift>
 80046bc:	9904      	ldr	r1, [sp, #16]
 80046be:	4683      	mov	fp, r0
 80046c0:	f002 fa3a 	bl	8006b38 <__mcmp>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	dd75      	ble.n	80047b4 <_strtod_l+0x8e4>
 80046c8:	9905      	ldr	r1, [sp, #20]
 80046ca:	464b      	mov	r3, r9
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <_strtod_l+0x888>)
 80046ce:	2900      	cmp	r1, #0
 80046d0:	f000 8091 	beq.w	80047f6 <_strtod_l+0x926>
 80046d4:	ea02 0109 	and.w	r1, r2, r9
 80046d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80046dc:	f300 808b 	bgt.w	80047f6 <_strtod_l+0x926>
 80046e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80046e4:	f77f aea9 	ble.w	800443a <_strtod_l+0x56a>
 80046e8:	2300      	movs	r3, #0
 80046ea:	4a1c      	ldr	r2, [pc, #112]	; (800475c <_strtod_l+0x88c>)
 80046ec:	4640      	mov	r0, r8
 80046ee:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80046f2:	4649      	mov	r1, r9
 80046f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80046f8:	f7fb fefe 	bl	80004f8 <__aeabi_dmul>
 80046fc:	460b      	mov	r3, r1
 80046fe:	4303      	orrs	r3, r0
 8004700:	bf08      	it	eq
 8004702:	2322      	moveq	r3, #34	; 0x22
 8004704:	4680      	mov	r8, r0
 8004706:	4689      	mov	r9, r1
 8004708:	bf08      	it	eq
 800470a:	f8ca 3000 	streq.w	r3, [sl]
 800470e:	e62d      	b.n	800436c <_strtod_l+0x49c>
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	ea03 0808 	and.w	r8, r3, r8
 800471c:	e6db      	b.n	80044d6 <_strtod_l+0x606>
 800471e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004722:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004726:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800472a:	35e2      	adds	r5, #226	; 0xe2
 800472c:	fa07 f505 	lsl.w	r5, r7, r5
 8004730:	970f      	str	r7, [sp, #60]	; 0x3c
 8004732:	e742      	b.n	80045ba <_strtod_l+0x6ea>
 8004734:	2301      	movs	r3, #1
 8004736:	2500      	movs	r5, #0
 8004738:	930f      	str	r3, [sp, #60]	; 0x3c
 800473a:	e73e      	b.n	80045ba <_strtod_l+0x6ea>
 800473c:	463a      	mov	r2, r7
 800473e:	4650      	mov	r0, sl
 8004740:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004742:	f002 f98d 	bl	8006a60 <__lshift>
 8004746:	901c      	str	r0, [sp, #112]	; 0x70
 8004748:	2800      	cmp	r0, #0
 800474a:	f47f af64 	bne.w	8004616 <_strtod_l+0x746>
 800474e:	e602      	b.n	8004356 <_strtod_l+0x486>
 8004750:	08008250 	.word	0x08008250
 8004754:	fffffc02 	.word	0xfffffc02
 8004758:	7ff00000 	.word	0x7ff00000
 800475c:	39500000 	.word	0x39500000
 8004760:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004764:	d166      	bne.n	8004834 <_strtod_l+0x964>
 8004766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800476c:	b35a      	cbz	r2, 80047c6 <_strtod_l+0x8f6>
 800476e:	4a9c      	ldr	r2, [pc, #624]	; (80049e0 <_strtod_l+0xb10>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d12c      	bne.n	80047ce <_strtod_l+0x8fe>
 8004774:	9b05      	ldr	r3, [sp, #20]
 8004776:	4640      	mov	r0, r8
 8004778:	b303      	cbz	r3, 80047bc <_strtod_l+0x8ec>
 800477a:	464b      	mov	r3, r9
 800477c:	4a99      	ldr	r2, [pc, #612]	; (80049e4 <_strtod_l+0xb14>)
 800477e:	f04f 31ff 	mov.w	r1, #4294967295
 8004782:	401a      	ands	r2, r3
 8004784:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004788:	d81b      	bhi.n	80047c2 <_strtod_l+0x8f2>
 800478a:	0d12      	lsrs	r2, r2, #20
 800478c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	4298      	cmp	r0, r3
 8004796:	d11a      	bne.n	80047ce <_strtod_l+0x8fe>
 8004798:	4b93      	ldr	r3, [pc, #588]	; (80049e8 <_strtod_l+0xb18>)
 800479a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800479c:	429a      	cmp	r2, r3
 800479e:	d102      	bne.n	80047a6 <_strtod_l+0x8d6>
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f add8 	beq.w	8004356 <_strtod_l+0x486>
 80047a6:	f04f 0800 	mov.w	r8, #0
 80047aa:	4b8e      	ldr	r3, [pc, #568]	; (80049e4 <_strtod_l+0xb14>)
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	401a      	ands	r2, r3
 80047b0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80047b4:	9b05      	ldr	r3, [sp, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d196      	bne.n	80046e8 <_strtod_l+0x818>
 80047ba:	e5d7      	b.n	800436c <_strtod_l+0x49c>
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	e7e8      	b.n	8004794 <_strtod_l+0x8c4>
 80047c2:	460b      	mov	r3, r1
 80047c4:	e7e6      	b.n	8004794 <_strtod_l+0x8c4>
 80047c6:	ea53 0308 	orrs.w	r3, r3, r8
 80047ca:	f43f af7d 	beq.w	80046c8 <_strtod_l+0x7f8>
 80047ce:	b1e5      	cbz	r5, 800480a <_strtod_l+0x93a>
 80047d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d2:	421d      	tst	r5, r3
 80047d4:	d0ee      	beq.n	80047b4 <_strtod_l+0x8e4>
 80047d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	9a05      	ldr	r2, [sp, #20]
 80047de:	b1c3      	cbz	r3, 8004812 <_strtod_l+0x942>
 80047e0:	f7ff fb53 	bl	8003e8a <sulp>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047ec:	f7fb fcce 	bl	800018c <__adddf3>
 80047f0:	4680      	mov	r8, r0
 80047f2:	4689      	mov	r9, r1
 80047f4:	e7de      	b.n	80047b4 <_strtod_l+0x8e4>
 80047f6:	4013      	ands	r3, r2
 80047f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80047fc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004800:	f04f 38ff 	mov.w	r8, #4294967295
 8004804:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004808:	e7d4      	b.n	80047b4 <_strtod_l+0x8e4>
 800480a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800480c:	ea13 0f08 	tst.w	r3, r8
 8004810:	e7e0      	b.n	80047d4 <_strtod_l+0x904>
 8004812:	f7ff fb3a 	bl	8003e8a <sulp>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800481e:	f7fb fcb3 	bl	8000188 <__aeabi_dsub>
 8004822:	2200      	movs	r2, #0
 8004824:	2300      	movs	r3, #0
 8004826:	4680      	mov	r8, r0
 8004828:	4689      	mov	r9, r1
 800482a:	f7fc f8cd 	bl	80009c8 <__aeabi_dcmpeq>
 800482e:	2800      	cmp	r0, #0
 8004830:	d0c0      	beq.n	80047b4 <_strtod_l+0x8e4>
 8004832:	e602      	b.n	800443a <_strtod_l+0x56a>
 8004834:	4658      	mov	r0, fp
 8004836:	9904      	ldr	r1, [sp, #16]
 8004838:	f002 fb00 	bl	8006e3c <__ratio>
 800483c:	2200      	movs	r2, #0
 800483e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004842:	4606      	mov	r6, r0
 8004844:	460f      	mov	r7, r1
 8004846:	f7fc f8d3 	bl	80009f0 <__aeabi_dcmple>
 800484a:	2800      	cmp	r0, #0
 800484c:	d075      	beq.n	800493a <_strtod_l+0xa6a>
 800484e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	d047      	beq.n	80048e4 <_strtod_l+0xa14>
 8004854:	2600      	movs	r6, #0
 8004856:	4f65      	ldr	r7, [pc, #404]	; (80049ec <_strtod_l+0xb1c>)
 8004858:	4d64      	ldr	r5, [pc, #400]	; (80049ec <_strtod_l+0xb1c>)
 800485a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004860:	0d1b      	lsrs	r3, r3, #20
 8004862:	051b      	lsls	r3, r3, #20
 8004864:	930f      	str	r3, [sp, #60]	; 0x3c
 8004866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004868:	4b61      	ldr	r3, [pc, #388]	; (80049f0 <_strtod_l+0xb20>)
 800486a:	429a      	cmp	r2, r3
 800486c:	f040 80c8 	bne.w	8004a00 <_strtod_l+0xb30>
 8004870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004874:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487a:	4640      	mov	r0, r8
 800487c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004880:	4649      	mov	r1, r9
 8004882:	f002 fa05 	bl	8006c90 <__ulp>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4630      	mov	r0, r6
 800488c:	4639      	mov	r1, r7
 800488e:	f7fb fe33 	bl	80004f8 <__aeabi_dmul>
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	f7fb fc79 	bl	800018c <__adddf3>
 800489a:	460b      	mov	r3, r1
 800489c:	4951      	ldr	r1, [pc, #324]	; (80049e4 <_strtod_l+0xb14>)
 800489e:	4a55      	ldr	r2, [pc, #340]	; (80049f4 <_strtod_l+0xb24>)
 80048a0:	4019      	ands	r1, r3
 80048a2:	4291      	cmp	r1, r2
 80048a4:	4680      	mov	r8, r0
 80048a6:	d95e      	bls.n	8004966 <_strtod_l+0xa96>
 80048a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d103      	bne.n	80048ba <_strtod_l+0x9ea>
 80048b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b4:	3301      	adds	r3, #1
 80048b6:	f43f ad4e 	beq.w	8004356 <_strtod_l+0x486>
 80048ba:	f04f 38ff 	mov.w	r8, #4294967295
 80048be:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80049e8 <_strtod_l+0xb18>
 80048c2:	4650      	mov	r0, sl
 80048c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80048c6:	f001 feb3 	bl	8006630 <_Bfree>
 80048ca:	4650      	mov	r0, sl
 80048cc:	9906      	ldr	r1, [sp, #24]
 80048ce:	f001 feaf 	bl	8006630 <_Bfree>
 80048d2:	4650      	mov	r0, sl
 80048d4:	9904      	ldr	r1, [sp, #16]
 80048d6:	f001 feab 	bl	8006630 <_Bfree>
 80048da:	4659      	mov	r1, fp
 80048dc:	4650      	mov	r0, sl
 80048de:	f001 fea7 	bl	8006630 <_Bfree>
 80048e2:	e61c      	b.n	800451e <_strtod_l+0x64e>
 80048e4:	f1b8 0f00 	cmp.w	r8, #0
 80048e8:	d119      	bne.n	800491e <_strtod_l+0xa4e>
 80048ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f0:	b9e3      	cbnz	r3, 800492c <_strtod_l+0xa5c>
 80048f2:	2200      	movs	r2, #0
 80048f4:	4630      	mov	r0, r6
 80048f6:	4639      	mov	r1, r7
 80048f8:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <_strtod_l+0xb1c>)
 80048fa:	f7fc f86f 	bl	80009dc <__aeabi_dcmplt>
 80048fe:	b9c8      	cbnz	r0, 8004934 <_strtod_l+0xa64>
 8004900:	2200      	movs	r2, #0
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <_strtod_l+0xb28>)
 8004908:	f7fb fdf6 	bl	80004f8 <__aeabi_dmul>
 800490c:	4604      	mov	r4, r0
 800490e:	460d      	mov	r5, r1
 8004910:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004914:	9418      	str	r4, [sp, #96]	; 0x60
 8004916:	9319      	str	r3, [sp, #100]	; 0x64
 8004918:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800491c:	e79d      	b.n	800485a <_strtod_l+0x98a>
 800491e:	f1b8 0f01 	cmp.w	r8, #1
 8004922:	d103      	bne.n	800492c <_strtod_l+0xa5c>
 8004924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	f43f ad87 	beq.w	800443a <_strtod_l+0x56a>
 800492c:	2600      	movs	r6, #0
 800492e:	2400      	movs	r4, #0
 8004930:	4f32      	ldr	r7, [pc, #200]	; (80049fc <_strtod_l+0xb2c>)
 8004932:	e791      	b.n	8004858 <_strtod_l+0x988>
 8004934:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004936:	4d30      	ldr	r5, [pc, #192]	; (80049f8 <_strtod_l+0xb28>)
 8004938:	e7ea      	b.n	8004910 <_strtod_l+0xa40>
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <_strtod_l+0xb28>)
 800493c:	2200      	movs	r2, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fb fdd9 	bl	80004f8 <__aeabi_dmul>
 8004946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004948:	4604      	mov	r4, r0
 800494a:	460d      	mov	r5, r1
 800494c:	b933      	cbnz	r3, 800495c <_strtod_l+0xa8c>
 800494e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004952:	9010      	str	r0, [sp, #64]	; 0x40
 8004954:	9311      	str	r3, [sp, #68]	; 0x44
 8004956:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800495a:	e77e      	b.n	800485a <_strtod_l+0x98a>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004964:	e7f7      	b.n	8004956 <_strtod_l+0xa86>
 8004966:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800496a:	9b05      	ldr	r3, [sp, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1a8      	bne.n	80048c2 <_strtod_l+0x9f2>
 8004970:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	051b      	lsls	r3, r3, #20
 800497a:	429a      	cmp	r2, r3
 800497c:	d1a1      	bne.n	80048c2 <_strtod_l+0x9f2>
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fc fbf5 	bl	8001170 <__aeabi_d2lz>
 8004986:	f7fb fd89 	bl	800049c <__aeabi_l2d>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f7fb fbf9 	bl	8000188 <__aeabi_dsub>
 8004996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800499c:	ea43 0308 	orr.w	r3, r3, r8
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4604      	mov	r4, r0
 80049a4:	460d      	mov	r5, r1
 80049a6:	d066      	beq.n	8004a76 <_strtod_l+0xba6>
 80049a8:	a309      	add	r3, pc, #36	; (adr r3, 80049d0 <_strtod_l+0xb00>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fc f815 	bl	80009dc <__aeabi_dcmplt>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	f47f acda 	bne.w	800436c <_strtod_l+0x49c>
 80049b8:	a307      	add	r3, pc, #28	; (adr r3, 80049d8 <_strtod_l+0xb08>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	f7fc f829 	bl	8000a18 <__aeabi_dcmpgt>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f43f af7b 	beq.w	80048c2 <_strtod_l+0x9f2>
 80049cc:	e4ce      	b.n	800436c <_strtod_l+0x49c>
 80049ce:	bf00      	nop
 80049d0:	94a03595 	.word	0x94a03595
 80049d4:	3fdfffff 	.word	0x3fdfffff
 80049d8:	35afe535 	.word	0x35afe535
 80049dc:	3fe00000 	.word	0x3fe00000
 80049e0:	000fffff 	.word	0x000fffff
 80049e4:	7ff00000 	.word	0x7ff00000
 80049e8:	7fefffff 	.word	0x7fefffff
 80049ec:	3ff00000 	.word	0x3ff00000
 80049f0:	7fe00000 	.word	0x7fe00000
 80049f4:	7c9fffff 	.word	0x7c9fffff
 80049f8:	3fe00000 	.word	0x3fe00000
 80049fc:	bff00000 	.word	0xbff00000
 8004a00:	9b05      	ldr	r3, [sp, #20]
 8004a02:	b313      	cbz	r3, 8004a4a <_strtod_l+0xb7a>
 8004a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a0a:	d81e      	bhi.n	8004a4a <_strtod_l+0xb7a>
 8004a0c:	a326      	add	r3, pc, #152	; (adr r3, 8004aa8 <_strtod_l+0xbd8>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb ffeb 	bl	80009f0 <__aeabi_dcmple>
 8004a1a:	b190      	cbz	r0, 8004a42 <_strtod_l+0xb72>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7fc f842 	bl	8000aa8 <__aeabi_d2uiz>
 8004a24:	2801      	cmp	r0, #1
 8004a26:	bf38      	it	cc
 8004a28:	2001      	movcc	r0, #1
 8004a2a:	f7fb fceb 	bl	8000404 <__aeabi_ui2d>
 8004a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a30:	4604      	mov	r4, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	b9d3      	cbnz	r3, 8004a6c <_strtod_l+0xb9c>
 8004a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a3a:	9012      	str	r0, [sp, #72]	; 0x48
 8004a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a44:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a48:	1a9f      	subs	r7, r3, r2
 8004a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a4e:	f002 f91f 	bl	8006c90 <__ulp>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fd4d 	bl	80004f8 <__aeabi_dmul>
 8004a5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a62:	f7fb fb93 	bl	800018c <__adddf3>
 8004a66:	4680      	mov	r8, r0
 8004a68:	4689      	mov	r9, r1
 8004a6a:	e77e      	b.n	800496a <_strtod_l+0xa9a>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a74:	e7e3      	b.n	8004a3e <_strtod_l+0xb6e>
 8004a76:	a30e      	add	r3, pc, #56	; (adr r3, 8004ab0 <_strtod_l+0xbe0>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb ffae 	bl	80009dc <__aeabi_dcmplt>
 8004a80:	e7a1      	b.n	80049c6 <_strtod_l+0xaf6>
 8004a82:	2300      	movs	r3, #0
 8004a84:	930c      	str	r3, [sp, #48]	; 0x30
 8004a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	f7ff ba65 	b.w	8003f5a <_strtod_l+0x8a>
 8004a90:	2b65      	cmp	r3, #101	; 0x65
 8004a92:	f43f ab5c 	beq.w	800414e <_strtod_l+0x27e>
 8004a96:	2b45      	cmp	r3, #69	; 0x45
 8004a98:	f43f ab59 	beq.w	800414e <_strtod_l+0x27e>
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f7ff bb8d 	b.w	80041bc <_strtod_l+0x2ec>
 8004aa2:	bf00      	nop
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	ffc00000 	.word	0xffc00000
 8004aac:	41dfffff 	.word	0x41dfffff
 8004ab0:	94a03595 	.word	0x94a03595
 8004ab4:	3fcfffff 	.word	0x3fcfffff

08004ab8 <_strtod_r>:
 8004ab8:	4b01      	ldr	r3, [pc, #4]	; (8004ac0 <_strtod_r+0x8>)
 8004aba:	f7ff ba09 	b.w	8003ed0 <_strtod_l>
 8004abe:	bf00      	nop
 8004ac0:	20000078 	.word	0x20000078

08004ac4 <_strtol_l.isra.0>:
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aca:	4686      	mov	lr, r0
 8004acc:	d001      	beq.n	8004ad2 <_strtol_l.isra.0+0xe>
 8004ace:	2b24      	cmp	r3, #36	; 0x24
 8004ad0:	d906      	bls.n	8004ae0 <_strtol_l.isra.0+0x1c>
 8004ad2:	f7fe facd 	bl	8003070 <__errno>
 8004ad6:	2316      	movs	r3, #22
 8004ad8:	6003      	str	r3, [r0, #0]
 8004ada:	2000      	movs	r0, #0
 8004adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae0:	468c      	mov	ip, r1
 8004ae2:	4e3a      	ldr	r6, [pc, #232]	; (8004bcc <_strtol_l.isra.0+0x108>)
 8004ae4:	4660      	mov	r0, ip
 8004ae6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004aea:	5da5      	ldrb	r5, [r4, r6]
 8004aec:	f015 0508 	ands.w	r5, r5, #8
 8004af0:	d1f8      	bne.n	8004ae4 <_strtol_l.isra.0+0x20>
 8004af2:	2c2d      	cmp	r4, #45	; 0x2d
 8004af4:	d133      	bne.n	8004b5e <_strtol_l.isra.0+0x9a>
 8004af6:	f04f 0801 	mov.w	r8, #1
 8004afa:	f89c 4000 	ldrb.w	r4, [ip]
 8004afe:	f100 0c02 	add.w	ip, r0, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d05d      	beq.n	8004bc2 <_strtol_l.isra.0+0xfe>
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d10c      	bne.n	8004b24 <_strtol_l.isra.0+0x60>
 8004b0a:	2c30      	cmp	r4, #48	; 0x30
 8004b0c:	d10a      	bne.n	8004b24 <_strtol_l.isra.0+0x60>
 8004b0e:	f89c 0000 	ldrb.w	r0, [ip]
 8004b12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b16:	2858      	cmp	r0, #88	; 0x58
 8004b18:	d14e      	bne.n	8004bb8 <_strtol_l.isra.0+0xf4>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004b20:	f10c 0c02 	add.w	ip, ip, #2
 8004b24:	2500      	movs	r5, #0
 8004b26:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004b2a:	3f01      	subs	r7, #1
 8004b2c:	fbb7 f9f3 	udiv	r9, r7, r3
 8004b30:	4628      	mov	r0, r5
 8004b32:	fb03 7a19 	mls	sl, r3, r9, r7
 8004b36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004b3a:	2e09      	cmp	r6, #9
 8004b3c:	d818      	bhi.n	8004b70 <_strtol_l.isra.0+0xac>
 8004b3e:	4634      	mov	r4, r6
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	dd24      	ble.n	8004b8e <_strtol_l.isra.0+0xca>
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	db1f      	blt.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b48:	4581      	cmp	r9, r0
 8004b4a:	d31d      	bcc.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b4c:	d101      	bne.n	8004b52 <_strtol_l.isra.0+0x8e>
 8004b4e:	45a2      	cmp	sl, r4
 8004b50:	db1a      	blt.n	8004b88 <_strtol_l.isra.0+0xc4>
 8004b52:	2501      	movs	r5, #1
 8004b54:	fb00 4003 	mla	r0, r0, r3, r4
 8004b58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004b5c:	e7eb      	b.n	8004b36 <_strtol_l.isra.0+0x72>
 8004b5e:	2c2b      	cmp	r4, #43	; 0x2b
 8004b60:	bf08      	it	eq
 8004b62:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004b66:	46a8      	mov	r8, r5
 8004b68:	bf08      	it	eq
 8004b6a:	f100 0c02 	addeq.w	ip, r0, #2
 8004b6e:	e7c8      	b.n	8004b02 <_strtol_l.isra.0+0x3e>
 8004b70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004b74:	2e19      	cmp	r6, #25
 8004b76:	d801      	bhi.n	8004b7c <_strtol_l.isra.0+0xb8>
 8004b78:	3c37      	subs	r4, #55	; 0x37
 8004b7a:	e7e1      	b.n	8004b40 <_strtol_l.isra.0+0x7c>
 8004b7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004b80:	2e19      	cmp	r6, #25
 8004b82:	d804      	bhi.n	8004b8e <_strtol_l.isra.0+0xca>
 8004b84:	3c57      	subs	r4, #87	; 0x57
 8004b86:	e7db      	b.n	8004b40 <_strtol_l.isra.0+0x7c>
 8004b88:	f04f 35ff 	mov.w	r5, #4294967295
 8004b8c:	e7e4      	b.n	8004b58 <_strtol_l.isra.0+0x94>
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	da08      	bge.n	8004ba4 <_strtol_l.isra.0+0xe0>
 8004b92:	2322      	movs	r3, #34	; 0x22
 8004b94:	4638      	mov	r0, r7
 8004b96:	f8ce 3000 	str.w	r3, [lr]
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	d09e      	beq.n	8004adc <_strtol_l.isra.0+0x18>
 8004b9e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004ba2:	e007      	b.n	8004bb4 <_strtol_l.isra.0+0xf0>
 8004ba4:	f1b8 0f00 	cmp.w	r8, #0
 8004ba8:	d000      	beq.n	8004bac <_strtol_l.isra.0+0xe8>
 8004baa:	4240      	negs	r0, r0
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	d095      	beq.n	8004adc <_strtol_l.isra.0+0x18>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d1f4      	bne.n	8004b9e <_strtol_l.isra.0+0xda>
 8004bb4:	6011      	str	r1, [r2, #0]
 8004bb6:	e791      	b.n	8004adc <_strtol_l.isra.0+0x18>
 8004bb8:	2430      	movs	r4, #48	; 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1b2      	bne.n	8004b24 <_strtol_l.isra.0+0x60>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e7b0      	b.n	8004b24 <_strtol_l.isra.0+0x60>
 8004bc2:	2c30      	cmp	r4, #48	; 0x30
 8004bc4:	d0a3      	beq.n	8004b0e <_strtol_l.isra.0+0x4a>
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e7ac      	b.n	8004b24 <_strtol_l.isra.0+0x60>
 8004bca:	bf00      	nop
 8004bcc:	08008279 	.word	0x08008279

08004bd0 <_strtol_r>:
 8004bd0:	f7ff bf78 	b.w	8004ac4 <_strtol_l.isra.0>

08004bd4 <__swbuf_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	460e      	mov	r6, r1
 8004bd8:	4614      	mov	r4, r2
 8004bda:	4605      	mov	r5, r0
 8004bdc:	b118      	cbz	r0, 8004be6 <__swbuf_r+0x12>
 8004bde:	6983      	ldr	r3, [r0, #24]
 8004be0:	b90b      	cbnz	r3, 8004be6 <__swbuf_r+0x12>
 8004be2:	f001 f84d 	bl	8005c80 <__sinit>
 8004be6:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <__swbuf_r+0x98>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	d12b      	bne.n	8004c44 <__swbuf_r+0x70>
 8004bec:	686c      	ldr	r4, [r5, #4]
 8004bee:	69a3      	ldr	r3, [r4, #24]
 8004bf0:	60a3      	str	r3, [r4, #8]
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	071a      	lsls	r2, r3, #28
 8004bf6:	d52f      	bpl.n	8004c58 <__swbuf_r+0x84>
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	b36b      	cbz	r3, 8004c58 <__swbuf_r+0x84>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	b2f6      	uxtb	r6, r6
 8004c02:	1ac0      	subs	r0, r0, r3
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	4637      	mov	r7, r6
 8004c08:	4283      	cmp	r3, r0
 8004c0a:	dc04      	bgt.n	8004c16 <__swbuf_r+0x42>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 ffa2 	bl	8005b58 <_fflush_r>
 8004c14:	bb30      	cbnz	r0, 8004c64 <__swbuf_r+0x90>
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	3001      	adds	r0, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	701e      	strb	r6, [r3, #0]
 8004c26:	6963      	ldr	r3, [r4, #20]
 8004c28:	4283      	cmp	r3, r0
 8004c2a:	d004      	beq.n	8004c36 <__swbuf_r+0x62>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	07db      	lsls	r3, r3, #31
 8004c30:	d506      	bpl.n	8004c40 <__swbuf_r+0x6c>
 8004c32:	2e0a      	cmp	r6, #10
 8004c34:	d104      	bne.n	8004c40 <__swbuf_r+0x6c>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 ff8d 	bl	8005b58 <_fflush_r>
 8004c3e:	b988      	cbnz	r0, 8004c64 <__swbuf_r+0x90>
 8004c40:	4638      	mov	r0, r7
 8004c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <__swbuf_r+0x9c>)
 8004c46:	429c      	cmp	r4, r3
 8004c48:	d101      	bne.n	8004c4e <__swbuf_r+0x7a>
 8004c4a:	68ac      	ldr	r4, [r5, #8]
 8004c4c:	e7cf      	b.n	8004bee <__swbuf_r+0x1a>
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <__swbuf_r+0xa0>)
 8004c50:	429c      	cmp	r4, r3
 8004c52:	bf08      	it	eq
 8004c54:	68ec      	ldreq	r4, [r5, #12]
 8004c56:	e7ca      	b.n	8004bee <__swbuf_r+0x1a>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f80c 	bl	8004c78 <__swsetup_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d0cb      	beq.n	8004bfc <__swbuf_r+0x28>
 8004c64:	f04f 37ff 	mov.w	r7, #4294967295
 8004c68:	e7ea      	b.n	8004c40 <__swbuf_r+0x6c>
 8004c6a:	bf00      	nop
 8004c6c:	08008430 	.word	0x08008430
 8004c70:	08008450 	.word	0x08008450
 8004c74:	08008410 	.word	0x08008410

08004c78 <__swsetup_r>:
 8004c78:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <__swsetup_r+0xcc>)
 8004c7a:	b570      	push	{r4, r5, r6, lr}
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	b125      	cbz	r5, 8004c8e <__swsetup_r+0x16>
 8004c84:	69ab      	ldr	r3, [r5, #24]
 8004c86:	b913      	cbnz	r3, 8004c8e <__swsetup_r+0x16>
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 fff9 	bl	8005c80 <__sinit>
 8004c8e:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <__swsetup_r+0xd0>)
 8004c90:	429c      	cmp	r4, r3
 8004c92:	d10f      	bne.n	8004cb4 <__swsetup_r+0x3c>
 8004c94:	686c      	ldr	r4, [r5, #4]
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c9c:	0719      	lsls	r1, r3, #28
 8004c9e:	d42c      	bmi.n	8004cfa <__swsetup_r+0x82>
 8004ca0:	06dd      	lsls	r5, r3, #27
 8004ca2:	d411      	bmi.n	8004cc8 <__swsetup_r+0x50>
 8004ca4:	2309      	movs	r3, #9
 8004ca6:	6033      	str	r3, [r6, #0]
 8004ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	e03e      	b.n	8004d32 <__swsetup_r+0xba>
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <__swsetup_r+0xd4>)
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	d101      	bne.n	8004cbe <__swsetup_r+0x46>
 8004cba:	68ac      	ldr	r4, [r5, #8]
 8004cbc:	e7eb      	b.n	8004c96 <__swsetup_r+0x1e>
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <__swsetup_r+0xd8>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	bf08      	it	eq
 8004cc4:	68ec      	ldreq	r4, [r5, #12]
 8004cc6:	e7e6      	b.n	8004c96 <__swsetup_r+0x1e>
 8004cc8:	0758      	lsls	r0, r3, #29
 8004cca:	d512      	bpl.n	8004cf2 <__swsetup_r+0x7a>
 8004ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cce:	b141      	cbz	r1, 8004ce2 <__swsetup_r+0x6a>
 8004cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d002      	beq.n	8004cde <__swsetup_r+0x66>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f002 f92f 	bl	8006f3c <_free_r>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ce8:	81a3      	strh	r3, [r4, #12]
 8004cea:	2300      	movs	r3, #0
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	f043 0308 	orr.w	r3, r3, #8
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	b94b      	cbnz	r3, 8004d12 <__swsetup_r+0x9a>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d003      	beq.n	8004d12 <__swsetup_r+0x9a>
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f001 fbe7 	bl	80064e0 <__smakebuf_r>
 8004d12:	89a0      	ldrh	r0, [r4, #12]
 8004d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d18:	f010 0301 	ands.w	r3, r0, #1
 8004d1c:	d00a      	beq.n	8004d34 <__swsetup_r+0xbc>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60a3      	str	r3, [r4, #8]
 8004d22:	6963      	ldr	r3, [r4, #20]
 8004d24:	425b      	negs	r3, r3
 8004d26:	61a3      	str	r3, [r4, #24]
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	b943      	cbnz	r3, 8004d3e <__swsetup_r+0xc6>
 8004d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d30:	d1ba      	bne.n	8004ca8 <__swsetup_r+0x30>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	0781      	lsls	r1, r0, #30
 8004d36:	bf58      	it	pl
 8004d38:	6963      	ldrpl	r3, [r4, #20]
 8004d3a:	60a3      	str	r3, [r4, #8]
 8004d3c:	e7f4      	b.n	8004d28 <__swsetup_r+0xb0>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e7f7      	b.n	8004d32 <__swsetup_r+0xba>
 8004d42:	bf00      	nop
 8004d44:	20000010 	.word	0x20000010
 8004d48:	08008430 	.word	0x08008430
 8004d4c:	08008450 	.word	0x08008450
 8004d50:	08008410 	.word	0x08008410

08004d54 <quorem>:
 8004d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	6903      	ldr	r3, [r0, #16]
 8004d5a:	690c      	ldr	r4, [r1, #16]
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	f2c0 8083 	blt.w	8004e6a <quorem+0x116>
 8004d64:	3c01      	subs	r4, #1
 8004d66:	f100 0514 	add.w	r5, r0, #20
 8004d6a:	f101 0814 	add.w	r8, r1, #20
 8004d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d8c:	d332      	bcc.n	8004df4 <quorem+0xa0>
 8004d8e:	f04f 0e00 	mov.w	lr, #0
 8004d92:	4640      	mov	r0, r8
 8004d94:	46ac      	mov	ip, r5
 8004d96:	46f2      	mov	sl, lr
 8004d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d9c:	b293      	uxth	r3, r2
 8004d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8004da2:	0c12      	lsrs	r2, r2, #16
 8004da4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004da8:	fb06 e202 	mla	r2, r6, r2, lr
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ebaa 0303 	sub.w	r3, sl, r3
 8004db2:	f8dc a000 	ldr.w	sl, [ip]
 8004db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dba:	fa1f fa8a 	uxth.w	sl, sl
 8004dbe:	4453      	add	r3, sl
 8004dc0:	fa1f fa82 	uxth.w	sl, r2
 8004dc4:	f8dc 2000 	ldr.w	r2, [ip]
 8004dc8:	4581      	cmp	r9, r0
 8004dca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004dce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ddc:	f84c 3b04 	str.w	r3, [ip], #4
 8004de0:	d2da      	bcs.n	8004d98 <quorem+0x44>
 8004de2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004de6:	b92b      	cbnz	r3, 8004df4 <quorem+0xa0>
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	429d      	cmp	r5, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	d32f      	bcc.n	8004e52 <quorem+0xfe>
 8004df2:	613c      	str	r4, [r7, #16]
 8004df4:	4638      	mov	r0, r7
 8004df6:	f001 fe9f 	bl	8006b38 <__mcmp>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	db25      	blt.n	8004e4a <quorem+0xf6>
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f04f 0c00 	mov.w	ip, #0
 8004e04:	3601      	adds	r6, #1
 8004e06:	f858 1b04 	ldr.w	r1, [r8], #4
 8004e0a:	f8d0 e000 	ldr.w	lr, [r0]
 8004e0e:	b28b      	uxth	r3, r1
 8004e10:	ebac 0303 	sub.w	r3, ip, r3
 8004e14:	fa1f f28e 	uxth.w	r2, lr
 8004e18:	4413      	add	r3, r2
 8004e1a:	0c0a      	lsrs	r2, r1, #16
 8004e1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e2a:	45c1      	cmp	r9, r8
 8004e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e30:	f840 3b04 	str.w	r3, [r0], #4
 8004e34:	d2e7      	bcs.n	8004e06 <quorem+0xb2>
 8004e36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3e:	b922      	cbnz	r2, 8004e4a <quorem+0xf6>
 8004e40:	3b04      	subs	r3, #4
 8004e42:	429d      	cmp	r5, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	d30a      	bcc.n	8004e5e <quorem+0x10a>
 8004e48:	613c      	str	r4, [r7, #16]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	b003      	add	sp, #12
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d1cb      	bne.n	8004df2 <quorem+0x9e>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	e7c6      	b.n	8004dec <quorem+0x98>
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d1f0      	bne.n	8004e48 <quorem+0xf4>
 8004e66:	3c01      	subs	r4, #1
 8004e68:	e7eb      	b.n	8004e42 <quorem+0xee>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e7ee      	b.n	8004e4c <quorem+0xf8>
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4616      	mov	r6, r2
 8004e76:	461f      	mov	r7, r3
 8004e78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e7a:	b099      	sub	sp, #100	; 0x64
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e86:	b974      	cbnz	r4, 8004ea6 <_dtoa_r+0x36>
 8004e88:	2010      	movs	r0, #16
 8004e8a:	f001 fb69 	bl	8006560 <malloc>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6268      	str	r0, [r5, #36]	; 0x24
 8004e92:	b920      	cbnz	r0, 8004e9e <_dtoa_r+0x2e>
 8004e94:	21ea      	movs	r1, #234	; 0xea
 8004e96:	4bae      	ldr	r3, [pc, #696]	; (8005150 <_dtoa_r+0x2e0>)
 8004e98:	48ae      	ldr	r0, [pc, #696]	; (8005154 <_dtoa_r+0x2e4>)
 8004e9a:	f002 fadb 	bl	8007454 <__assert_func>
 8004e9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea2:	6004      	str	r4, [r0, #0]
 8004ea4:	60c4      	str	r4, [r0, #12]
 8004ea6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	b151      	cbz	r1, 8004ec2 <_dtoa_r+0x52>
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	604a      	str	r2, [r1, #4]
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f001 fbba 	bl	8006630 <_Bfree>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	1e3b      	subs	r3, r7, #0
 8004ec4:	bfaf      	iteee	ge
 8004ec6:	2300      	movge	r3, #0
 8004ec8:	2201      	movlt	r2, #1
 8004eca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	9305      	strlt	r3, [sp, #20]
 8004ed0:	bfa8      	it	ge
 8004ed2:	f8c8 3000 	strge.w	r3, [r8]
 8004ed6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004eda:	4b9f      	ldr	r3, [pc, #636]	; (8005158 <_dtoa_r+0x2e8>)
 8004edc:	bfb8      	it	lt
 8004ede:	f8c8 2000 	strlt.w	r2, [r8]
 8004ee2:	ea33 0309 	bics.w	r3, r3, r9
 8004ee6:	d119      	bne.n	8004f1c <_dtoa_r+0xac>
 8004ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ef4:	4333      	orrs	r3, r6
 8004ef6:	f000 8580 	beq.w	80059fa <_dtoa_r+0xb8a>
 8004efa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004efc:	b953      	cbnz	r3, 8004f14 <_dtoa_r+0xa4>
 8004efe:	4b97      	ldr	r3, [pc, #604]	; (800515c <_dtoa_r+0x2ec>)
 8004f00:	e022      	b.n	8004f48 <_dtoa_r+0xd8>
 8004f02:	4b97      	ldr	r3, [pc, #604]	; (8005160 <_dtoa_r+0x2f0>)
 8004f04:	9308      	str	r3, [sp, #32]
 8004f06:	3308      	adds	r3, #8
 8004f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9808      	ldr	r0, [sp, #32]
 8004f0e:	b019      	add	sp, #100	; 0x64
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	4b91      	ldr	r3, [pc, #580]	; (800515c <_dtoa_r+0x2ec>)
 8004f16:	9308      	str	r3, [sp, #32]
 8004f18:	3303      	adds	r3, #3
 8004f1a:	e7f5      	b.n	8004f08 <_dtoa_r+0x98>
 8004f1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f7fb fd4c 	bl	80009c8 <__aeabi_dcmpeq>
 8004f30:	4680      	mov	r8, r0
 8004f32:	b158      	cbz	r0, 8004f4c <_dtoa_r+0xdc>
 8004f34:	2301      	movs	r3, #1
 8004f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8559 	beq.w	80059f4 <_dtoa_r+0xb84>
 8004f42:	4888      	ldr	r0, [pc, #544]	; (8005164 <_dtoa_r+0x2f4>)
 8004f44:	6018      	str	r0, [r3, #0]
 8004f46:	1e43      	subs	r3, r0, #1
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	e7df      	b.n	8004f0c <_dtoa_r+0x9c>
 8004f4c:	ab16      	add	r3, sp, #88	; 0x58
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	ab17      	add	r3, sp, #92	; 0x5c
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	4628      	mov	r0, r5
 8004f56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f5a:	f001 ff13 	bl	8006d84 <__d2b>
 8004f5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f62:	4682      	mov	sl, r0
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	d07e      	beq.n	8005066 <_dtoa_r+0x1f6>
 8004f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004f7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004f7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f82:	2200      	movs	r2, #0
 8004f84:	4b78      	ldr	r3, [pc, #480]	; (8005168 <_dtoa_r+0x2f8>)
 8004f86:	f7fb f8ff 	bl	8000188 <__aeabi_dsub>
 8004f8a:	a36b      	add	r3, pc, #428	; (adr r3, 8005138 <_dtoa_r+0x2c8>)
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f7fb fab2 	bl	80004f8 <__aeabi_dmul>
 8004f94:	a36a      	add	r3, pc, #424	; (adr r3, 8005140 <_dtoa_r+0x2d0>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f7fb f8f7 	bl	800018c <__adddf3>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	460f      	mov	r7, r1
 8004fa4:	f7fb fa3e 	bl	8000424 <__aeabi_i2d>
 8004fa8:	a367      	add	r3, pc, #412	; (adr r3, 8005148 <_dtoa_r+0x2d8>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb faa3 	bl	80004f8 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb f8e7 	bl	800018c <__adddf3>
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	460f      	mov	r7, r1
 8004fc2:	f7fb fd49 	bl	8000a58 <__aeabi_d2iz>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4681      	mov	r9, r0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fd04 	bl	80009dc <__aeabi_dcmplt>
 8004fd4:	b148      	cbz	r0, 8004fea <_dtoa_r+0x17a>
 8004fd6:	4648      	mov	r0, r9
 8004fd8:	f7fb fa24 	bl	8000424 <__aeabi_i2d>
 8004fdc:	4632      	mov	r2, r6
 8004fde:	463b      	mov	r3, r7
 8004fe0:	f7fb fcf2 	bl	80009c8 <__aeabi_dcmpeq>
 8004fe4:	b908      	cbnz	r0, 8004fea <_dtoa_r+0x17a>
 8004fe6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fea:	f1b9 0f16 	cmp.w	r9, #22
 8004fee:	d857      	bhi.n	80050a0 <_dtoa_r+0x230>
 8004ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ff4:	4b5d      	ldr	r3, [pc, #372]	; (800516c <_dtoa_r+0x2fc>)
 8004ff6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb fced 	bl	80009dc <__aeabi_dcmplt>
 8005002:	2800      	cmp	r0, #0
 8005004:	d04e      	beq.n	80050a4 <_dtoa_r+0x234>
 8005006:	2300      	movs	r3, #0
 8005008:	f109 39ff 	add.w	r9, r9, #4294967295
 800500c:	930f      	str	r3, [sp, #60]	; 0x3c
 800500e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005010:	1b1c      	subs	r4, r3, r4
 8005012:	1e63      	subs	r3, r4, #1
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	bf49      	itett	mi
 8005018:	f1c4 0301 	rsbmi	r3, r4, #1
 800501c:	2300      	movpl	r3, #0
 800501e:	9306      	strmi	r3, [sp, #24]
 8005020:	2300      	movmi	r3, #0
 8005022:	bf54      	ite	pl
 8005024:	9306      	strpl	r3, [sp, #24]
 8005026:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005028:	f1b9 0f00 	cmp.w	r9, #0
 800502c:	db3c      	blt.n	80050a8 <_dtoa_r+0x238>
 800502e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005030:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005034:	444b      	add	r3, r9
 8005036:	9309      	str	r3, [sp, #36]	; 0x24
 8005038:	2300      	movs	r3, #0
 800503a:	930a      	str	r3, [sp, #40]	; 0x28
 800503c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800503e:	2b09      	cmp	r3, #9
 8005040:	d86c      	bhi.n	800511c <_dtoa_r+0x2ac>
 8005042:	2b05      	cmp	r3, #5
 8005044:	bfc4      	itt	gt
 8005046:	3b04      	subgt	r3, #4
 8005048:	9322      	strgt	r3, [sp, #136]	; 0x88
 800504a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800504c:	bfc8      	it	gt
 800504e:	2400      	movgt	r4, #0
 8005050:	f1a3 0302 	sub.w	r3, r3, #2
 8005054:	bfd8      	it	le
 8005056:	2401      	movle	r4, #1
 8005058:	2b03      	cmp	r3, #3
 800505a:	f200 808b 	bhi.w	8005174 <_dtoa_r+0x304>
 800505e:	e8df f003 	tbb	[pc, r3]
 8005062:	4f2d      	.short	0x4f2d
 8005064:	5b4d      	.short	0x5b4d
 8005066:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800506a:	441c      	add	r4, r3
 800506c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005070:	2b20      	cmp	r3, #32
 8005072:	bfc3      	ittte	gt
 8005074:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005078:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800507c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005080:	f1c3 0320 	rsble	r3, r3, #32
 8005084:	bfc6      	itte	gt
 8005086:	fa26 f000 	lsrgt.w	r0, r6, r0
 800508a:	4318      	orrgt	r0, r3
 800508c:	fa06 f003 	lslle.w	r0, r6, r3
 8005090:	f7fb f9b8 	bl	8000404 <__aeabi_ui2d>
 8005094:	2301      	movs	r3, #1
 8005096:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800509a:	3c01      	subs	r4, #1
 800509c:	9313      	str	r3, [sp, #76]	; 0x4c
 800509e:	e770      	b.n	8004f82 <_dtoa_r+0x112>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e7b3      	b.n	800500c <_dtoa_r+0x19c>
 80050a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80050a6:	e7b2      	b.n	800500e <_dtoa_r+0x19e>
 80050a8:	9b06      	ldr	r3, [sp, #24]
 80050aa:	eba3 0309 	sub.w	r3, r3, r9
 80050ae:	9306      	str	r3, [sp, #24]
 80050b0:	f1c9 0300 	rsb	r3, r9, #0
 80050b4:	930a      	str	r3, [sp, #40]	; 0x28
 80050b6:	2300      	movs	r3, #0
 80050b8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ba:	e7bf      	b.n	800503c <_dtoa_r+0x1cc>
 80050bc:	2300      	movs	r3, #0
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc59      	bgt.n	800517a <_dtoa_r+0x30a>
 80050c6:	f04f 0b01 	mov.w	fp, #1
 80050ca:	465b      	mov	r3, fp
 80050cc:	f8cd b008 	str.w	fp, [sp, #8]
 80050d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80050d4:	2200      	movs	r2, #0
 80050d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80050d8:	6042      	str	r2, [r0, #4]
 80050da:	2204      	movs	r2, #4
 80050dc:	f102 0614 	add.w	r6, r2, #20
 80050e0:	429e      	cmp	r6, r3
 80050e2:	6841      	ldr	r1, [r0, #4]
 80050e4:	d94f      	bls.n	8005186 <_dtoa_r+0x316>
 80050e6:	4628      	mov	r0, r5
 80050e8:	f001 fa62 	bl	80065b0 <_Balloc>
 80050ec:	9008      	str	r0, [sp, #32]
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d14d      	bne.n	800518e <_dtoa_r+0x31e>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <_dtoa_r+0x300>)
 80050fa:	e6cd      	b.n	8004e98 <_dtoa_r+0x28>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e7de      	b.n	80050be <_dtoa_r+0x24e>
 8005100:	2300      	movs	r3, #0
 8005102:	930b      	str	r3, [sp, #44]	; 0x2c
 8005104:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005106:	eb09 0b03 	add.w	fp, r9, r3
 800510a:	f10b 0301 	add.w	r3, fp, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	bfb8      	it	lt
 8005114:	2301      	movlt	r3, #1
 8005116:	e7dd      	b.n	80050d4 <_dtoa_r+0x264>
 8005118:	2301      	movs	r3, #1
 800511a:	e7f2      	b.n	8005102 <_dtoa_r+0x292>
 800511c:	2401      	movs	r4, #1
 800511e:	2300      	movs	r3, #0
 8005120:	940b      	str	r4, [sp, #44]	; 0x2c
 8005122:	9322      	str	r3, [sp, #136]	; 0x88
 8005124:	f04f 3bff 	mov.w	fp, #4294967295
 8005128:	2200      	movs	r2, #0
 800512a:	2312      	movs	r3, #18
 800512c:	f8cd b008 	str.w	fp, [sp, #8]
 8005130:	9223      	str	r2, [sp, #140]	; 0x8c
 8005132:	e7cf      	b.n	80050d4 <_dtoa_r+0x264>
 8005134:	f3af 8000 	nop.w
 8005138:	636f4361 	.word	0x636f4361
 800513c:	3fd287a7 	.word	0x3fd287a7
 8005140:	8b60c8b3 	.word	0x8b60c8b3
 8005144:	3fc68a28 	.word	0x3fc68a28
 8005148:	509f79fb 	.word	0x509f79fb
 800514c:	3fd34413 	.word	0x3fd34413
 8005150:	08008386 	.word	0x08008386
 8005154:	0800839d 	.word	0x0800839d
 8005158:	7ff00000 	.word	0x7ff00000
 800515c:	08008382 	.word	0x08008382
 8005160:	08008379 	.word	0x08008379
 8005164:	080081f9 	.word	0x080081f9
 8005168:	3ff80000 	.word	0x3ff80000
 800516c:	08008578 	.word	0x08008578
 8005170:	080083fc 	.word	0x080083fc
 8005174:	2301      	movs	r3, #1
 8005176:	930b      	str	r3, [sp, #44]	; 0x2c
 8005178:	e7d4      	b.n	8005124 <_dtoa_r+0x2b4>
 800517a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800517e:	465b      	mov	r3, fp
 8005180:	f8cd b008 	str.w	fp, [sp, #8]
 8005184:	e7a6      	b.n	80050d4 <_dtoa_r+0x264>
 8005186:	3101      	adds	r1, #1
 8005188:	6041      	str	r1, [r0, #4]
 800518a:	0052      	lsls	r2, r2, #1
 800518c:	e7a6      	b.n	80050dc <_dtoa_r+0x26c>
 800518e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005190:	9a08      	ldr	r2, [sp, #32]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	9b02      	ldr	r3, [sp, #8]
 8005196:	2b0e      	cmp	r3, #14
 8005198:	f200 80a8 	bhi.w	80052ec <_dtoa_r+0x47c>
 800519c:	2c00      	cmp	r4, #0
 800519e:	f000 80a5 	beq.w	80052ec <_dtoa_r+0x47c>
 80051a2:	f1b9 0f00 	cmp.w	r9, #0
 80051a6:	dd34      	ble.n	8005212 <_dtoa_r+0x3a2>
 80051a8:	4a9a      	ldr	r2, [pc, #616]	; (8005414 <_dtoa_r+0x5a4>)
 80051aa:	f009 030f 	and.w	r3, r9, #15
 80051ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80051b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051be:	ea4f 1429 	mov.w	r4, r9, asr #4
 80051c2:	d016      	beq.n	80051f2 <_dtoa_r+0x382>
 80051c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051c8:	4b93      	ldr	r3, [pc, #588]	; (8005418 <_dtoa_r+0x5a8>)
 80051ca:	2703      	movs	r7, #3
 80051cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d0:	f7fb fabc 	bl	800074c <__aeabi_ddiv>
 80051d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051d8:	f004 040f 	and.w	r4, r4, #15
 80051dc:	4e8e      	ldr	r6, [pc, #568]	; (8005418 <_dtoa_r+0x5a8>)
 80051de:	b954      	cbnz	r4, 80051f6 <_dtoa_r+0x386>
 80051e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e8:	f7fb fab0 	bl	800074c <__aeabi_ddiv>
 80051ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f0:	e029      	b.n	8005246 <_dtoa_r+0x3d6>
 80051f2:	2702      	movs	r7, #2
 80051f4:	e7f2      	b.n	80051dc <_dtoa_r+0x36c>
 80051f6:	07e1      	lsls	r1, r4, #31
 80051f8:	d508      	bpl.n	800520c <_dtoa_r+0x39c>
 80051fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005202:	f7fb f979 	bl	80004f8 <__aeabi_dmul>
 8005206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800520a:	3701      	adds	r7, #1
 800520c:	1064      	asrs	r4, r4, #1
 800520e:	3608      	adds	r6, #8
 8005210:	e7e5      	b.n	80051de <_dtoa_r+0x36e>
 8005212:	f000 80a5 	beq.w	8005360 <_dtoa_r+0x4f0>
 8005216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800521a:	f1c9 0400 	rsb	r4, r9, #0
 800521e:	4b7d      	ldr	r3, [pc, #500]	; (8005414 <_dtoa_r+0x5a4>)
 8005220:	f004 020f 	and.w	r2, r4, #15
 8005224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f7fb f964 	bl	80004f8 <__aeabi_dmul>
 8005230:	2702      	movs	r7, #2
 8005232:	2300      	movs	r3, #0
 8005234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005238:	4e77      	ldr	r6, [pc, #476]	; (8005418 <_dtoa_r+0x5a8>)
 800523a:	1124      	asrs	r4, r4, #4
 800523c:	2c00      	cmp	r4, #0
 800523e:	f040 8084 	bne.w	800534a <_dtoa_r+0x4da>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1d2      	bne.n	80051ec <_dtoa_r+0x37c>
 8005246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 808b 	beq.w	8005364 <_dtoa_r+0x4f4>
 800524e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005252:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005256:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800525a:	2200      	movs	r2, #0
 800525c:	4b6f      	ldr	r3, [pc, #444]	; (800541c <_dtoa_r+0x5ac>)
 800525e:	f7fb fbbd 	bl	80009dc <__aeabi_dcmplt>
 8005262:	2800      	cmp	r0, #0
 8005264:	d07e      	beq.n	8005364 <_dtoa_r+0x4f4>
 8005266:	9b02      	ldr	r3, [sp, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d07b      	beq.n	8005364 <_dtoa_r+0x4f4>
 800526c:	f1bb 0f00 	cmp.w	fp, #0
 8005270:	dd38      	ble.n	80052e4 <_dtoa_r+0x474>
 8005272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005276:	2200      	movs	r2, #0
 8005278:	4b69      	ldr	r3, [pc, #420]	; (8005420 <_dtoa_r+0x5b0>)
 800527a:	f7fb f93d 	bl	80004f8 <__aeabi_dmul>
 800527e:	465c      	mov	r4, fp
 8005280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005284:	f109 38ff 	add.w	r8, r9, #4294967295
 8005288:	3701      	adds	r7, #1
 800528a:	4638      	mov	r0, r7
 800528c:	f7fb f8ca 	bl	8000424 <__aeabi_i2d>
 8005290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005294:	f7fb f930 	bl	80004f8 <__aeabi_dmul>
 8005298:	2200      	movs	r2, #0
 800529a:	4b62      	ldr	r3, [pc, #392]	; (8005424 <_dtoa_r+0x5b4>)
 800529c:	f7fa ff76 	bl	800018c <__adddf3>
 80052a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052a8:	9611      	str	r6, [sp, #68]	; 0x44
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d15d      	bne.n	800536a <_dtoa_r+0x4fa>
 80052ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b2:	2200      	movs	r2, #0
 80052b4:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <_dtoa_r+0x5b8>)
 80052b6:	f7fa ff67 	bl	8000188 <__aeabi_dsub>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052c2:	4633      	mov	r3, r6
 80052c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c6:	f7fb fba7 	bl	8000a18 <__aeabi_dcmpgt>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f040 829e 	bne.w	800580c <_dtoa_r+0x99c>
 80052d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052da:	f7fb fb7f 	bl	80009dc <__aeabi_dcmplt>
 80052de:	2800      	cmp	r0, #0
 80052e0:	f040 8292 	bne.w	8005808 <_dtoa_r+0x998>
 80052e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f2c0 8153 	blt.w	800559a <_dtoa_r+0x72a>
 80052f4:	f1b9 0f0e 	cmp.w	r9, #14
 80052f8:	f300 814f 	bgt.w	800559a <_dtoa_r+0x72a>
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <_dtoa_r+0x5a4>)
 80052fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005302:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005306:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800530a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530c:	2b00      	cmp	r3, #0
 800530e:	f280 80db 	bge.w	80054c8 <_dtoa_r+0x658>
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f300 80d7 	bgt.w	80054c8 <_dtoa_r+0x658>
 800531a:	f040 8274 	bne.w	8005806 <_dtoa_r+0x996>
 800531e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005322:	2200      	movs	r2, #0
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <_dtoa_r+0x5b8>)
 8005326:	f7fb f8e7 	bl	80004f8 <__aeabi_dmul>
 800532a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800532e:	f7fb fb69 	bl	8000a04 <__aeabi_dcmpge>
 8005332:	9c02      	ldr	r4, [sp, #8]
 8005334:	4626      	mov	r6, r4
 8005336:	2800      	cmp	r0, #0
 8005338:	f040 824a 	bne.w	80057d0 <_dtoa_r+0x960>
 800533c:	2331      	movs	r3, #49	; 0x31
 800533e:	9f08      	ldr	r7, [sp, #32]
 8005340:	f109 0901 	add.w	r9, r9, #1
 8005344:	f807 3b01 	strb.w	r3, [r7], #1
 8005348:	e246      	b.n	80057d8 <_dtoa_r+0x968>
 800534a:	07e2      	lsls	r2, r4, #31
 800534c:	d505      	bpl.n	800535a <_dtoa_r+0x4ea>
 800534e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005352:	f7fb f8d1 	bl	80004f8 <__aeabi_dmul>
 8005356:	2301      	movs	r3, #1
 8005358:	3701      	adds	r7, #1
 800535a:	1064      	asrs	r4, r4, #1
 800535c:	3608      	adds	r6, #8
 800535e:	e76d      	b.n	800523c <_dtoa_r+0x3cc>
 8005360:	2702      	movs	r7, #2
 8005362:	e770      	b.n	8005246 <_dtoa_r+0x3d6>
 8005364:	46c8      	mov	r8, r9
 8005366:	9c02      	ldr	r4, [sp, #8]
 8005368:	e78f      	b.n	800528a <_dtoa_r+0x41a>
 800536a:	9908      	ldr	r1, [sp, #32]
 800536c:	4b29      	ldr	r3, [pc, #164]	; (8005414 <_dtoa_r+0x5a4>)
 800536e:	4421      	add	r1, r4
 8005370:	9112      	str	r1, [sp, #72]	; 0x48
 8005372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005374:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005378:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800537c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005380:	2900      	cmp	r1, #0
 8005382:	d055      	beq.n	8005430 <_dtoa_r+0x5c0>
 8005384:	2000      	movs	r0, #0
 8005386:	4929      	ldr	r1, [pc, #164]	; (800542c <_dtoa_r+0x5bc>)
 8005388:	f7fb f9e0 	bl	800074c <__aeabi_ddiv>
 800538c:	463b      	mov	r3, r7
 800538e:	4632      	mov	r2, r6
 8005390:	f7fa fefa 	bl	8000188 <__aeabi_dsub>
 8005394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005398:	9f08      	ldr	r7, [sp, #32]
 800539a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800539e:	f7fb fb5b 	bl	8000a58 <__aeabi_d2iz>
 80053a2:	4604      	mov	r4, r0
 80053a4:	f7fb f83e 	bl	8000424 <__aeabi_i2d>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b0:	f7fa feea 	bl	8000188 <__aeabi_dsub>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	3430      	adds	r4, #48	; 0x30
 80053ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053c2:	f807 4b01 	strb.w	r4, [r7], #1
 80053c6:	f7fb fb09 	bl	80009dc <__aeabi_dcmplt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d174      	bne.n	80054b8 <_dtoa_r+0x648>
 80053ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d2:	2000      	movs	r0, #0
 80053d4:	4911      	ldr	r1, [pc, #68]	; (800541c <_dtoa_r+0x5ac>)
 80053d6:	f7fa fed7 	bl	8000188 <__aeabi_dsub>
 80053da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053de:	f7fb fafd 	bl	80009dc <__aeabi_dcmplt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f040 80b6 	bne.w	8005554 <_dtoa_r+0x6e4>
 80053e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ea:	429f      	cmp	r7, r3
 80053ec:	f43f af7a 	beq.w	80052e4 <_dtoa_r+0x474>
 80053f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053f4:	2200      	movs	r2, #0
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <_dtoa_r+0x5b0>)
 80053f8:	f7fb f87e 	bl	80004f8 <__aeabi_dmul>
 80053fc:	2200      	movs	r2, #0
 80053fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <_dtoa_r+0x5b0>)
 8005408:	f7fb f876 	bl	80004f8 <__aeabi_dmul>
 800540c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005410:	e7c3      	b.n	800539a <_dtoa_r+0x52a>
 8005412:	bf00      	nop
 8005414:	08008578 	.word	0x08008578
 8005418:	08008550 	.word	0x08008550
 800541c:	3ff00000 	.word	0x3ff00000
 8005420:	40240000 	.word	0x40240000
 8005424:	401c0000 	.word	0x401c0000
 8005428:	40140000 	.word	0x40140000
 800542c:	3fe00000 	.word	0x3fe00000
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb f860 	bl	80004f8 <__aeabi_dmul>
 8005438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800543a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800543e:	9c08      	ldr	r4, [sp, #32]
 8005440:	9314      	str	r3, [sp, #80]	; 0x50
 8005442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005446:	f7fb fb07 	bl	8000a58 <__aeabi_d2iz>
 800544a:	9015      	str	r0, [sp, #84]	; 0x54
 800544c:	f7fa ffea 	bl	8000424 <__aeabi_i2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005458:	f7fa fe96 	bl	8000188 <__aeabi_dsub>
 800545c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800545e:	4606      	mov	r6, r0
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	f804 3b01 	strb.w	r3, [r4], #1
 8005466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005468:	460f      	mov	r7, r1
 800546a:	429c      	cmp	r4, r3
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	d124      	bne.n	80054bc <_dtoa_r+0x64c>
 8005472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005476:	4bb3      	ldr	r3, [pc, #716]	; (8005744 <_dtoa_r+0x8d4>)
 8005478:	f7fa fe88 	bl	800018c <__adddf3>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fb fac8 	bl	8000a18 <__aeabi_dcmpgt>
 8005488:	2800      	cmp	r0, #0
 800548a:	d162      	bne.n	8005552 <_dtoa_r+0x6e2>
 800548c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005490:	2000      	movs	r0, #0
 8005492:	49ac      	ldr	r1, [pc, #688]	; (8005744 <_dtoa_r+0x8d4>)
 8005494:	f7fa fe78 	bl	8000188 <__aeabi_dsub>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fa9c 	bl	80009dc <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f af1d 	beq.w	80052e4 <_dtoa_r+0x474>
 80054aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054ac:	1e7b      	subs	r3, r7, #1
 80054ae:	9314      	str	r3, [sp, #80]	; 0x50
 80054b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d0f8      	beq.n	80054aa <_dtoa_r+0x63a>
 80054b8:	46c1      	mov	r9, r8
 80054ba:	e03a      	b.n	8005532 <_dtoa_r+0x6c2>
 80054bc:	4ba2      	ldr	r3, [pc, #648]	; (8005748 <_dtoa_r+0x8d8>)
 80054be:	f7fb f81b 	bl	80004f8 <__aeabi_dmul>
 80054c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c6:	e7bc      	b.n	8005442 <_dtoa_r+0x5d2>
 80054c8:	9f08      	ldr	r7, [sp, #32]
 80054ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d2:	f7fb f93b 	bl	800074c <__aeabi_ddiv>
 80054d6:	f7fb fabf 	bl	8000a58 <__aeabi_d2iz>
 80054da:	4604      	mov	r4, r0
 80054dc:	f7fa ffa2 	bl	8000424 <__aeabi_i2d>
 80054e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e4:	f7fb f808 	bl	80004f8 <__aeabi_dmul>
 80054e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054ec:	460b      	mov	r3, r1
 80054ee:	4602      	mov	r2, r0
 80054f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f4:	f7fa fe48 	bl	8000188 <__aeabi_dsub>
 80054f8:	f807 6b01 	strb.w	r6, [r7], #1
 80054fc:	9e08      	ldr	r6, [sp, #32]
 80054fe:	9b02      	ldr	r3, [sp, #8]
 8005500:	1bbe      	subs	r6, r7, r6
 8005502:	42b3      	cmp	r3, r6
 8005504:	d13a      	bne.n	800557c <_dtoa_r+0x70c>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	f7fa fe3f 	bl	800018c <__adddf3>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005516:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800551a:	f7fb fa7d 	bl	8000a18 <__aeabi_dcmpgt>
 800551e:	bb58      	cbnz	r0, 8005578 <_dtoa_r+0x708>
 8005520:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005528:	f7fb fa4e 	bl	80009c8 <__aeabi_dcmpeq>
 800552c:	b108      	cbz	r0, 8005532 <_dtoa_r+0x6c2>
 800552e:	07e1      	lsls	r1, r4, #31
 8005530:	d422      	bmi.n	8005578 <_dtoa_r+0x708>
 8005532:	4628      	mov	r0, r5
 8005534:	4651      	mov	r1, sl
 8005536:	f001 f87b 	bl	8006630 <_Bfree>
 800553a:	2300      	movs	r3, #0
 800553c:	703b      	strb	r3, [r7, #0]
 800553e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005540:	f109 0001 	add.w	r0, r9, #1
 8005544:	6018      	str	r0, [r3, #0]
 8005546:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005548:	2b00      	cmp	r3, #0
 800554a:	f43f acdf 	beq.w	8004f0c <_dtoa_r+0x9c>
 800554e:	601f      	str	r7, [r3, #0]
 8005550:	e4dc      	b.n	8004f0c <_dtoa_r+0x9c>
 8005552:	4627      	mov	r7, r4
 8005554:	463b      	mov	r3, r7
 8005556:	461f      	mov	r7, r3
 8005558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800555c:	2a39      	cmp	r2, #57	; 0x39
 800555e:	d107      	bne.n	8005570 <_dtoa_r+0x700>
 8005560:	9a08      	ldr	r2, [sp, #32]
 8005562:	429a      	cmp	r2, r3
 8005564:	d1f7      	bne.n	8005556 <_dtoa_r+0x6e6>
 8005566:	2230      	movs	r2, #48	; 0x30
 8005568:	9908      	ldr	r1, [sp, #32]
 800556a:	f108 0801 	add.w	r8, r8, #1
 800556e:	700a      	strb	r2, [r1, #0]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	3201      	adds	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e79f      	b.n	80054b8 <_dtoa_r+0x648>
 8005578:	46c8      	mov	r8, r9
 800557a:	e7eb      	b.n	8005554 <_dtoa_r+0x6e4>
 800557c:	2200      	movs	r2, #0
 800557e:	4b72      	ldr	r3, [pc, #456]	; (8005748 <_dtoa_r+0x8d8>)
 8005580:	f7fa ffba 	bl	80004f8 <__aeabi_dmul>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	f7fb fa1a 	bl	80009c8 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d098      	beq.n	80054ca <_dtoa_r+0x65a>
 8005598:	e7cb      	b.n	8005532 <_dtoa_r+0x6c2>
 800559a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800559c:	2a00      	cmp	r2, #0
 800559e:	f000 80cd 	beq.w	800573c <_dtoa_r+0x8cc>
 80055a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055a4:	2a01      	cmp	r2, #1
 80055a6:	f300 80af 	bgt.w	8005708 <_dtoa_r+0x898>
 80055aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	f000 80a7 	beq.w	8005700 <_dtoa_r+0x890>
 80055b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055b8:	9f06      	ldr	r7, [sp, #24]
 80055ba:	9a06      	ldr	r2, [sp, #24]
 80055bc:	2101      	movs	r1, #1
 80055be:	441a      	add	r2, r3
 80055c0:	9206      	str	r2, [sp, #24]
 80055c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c4:	4628      	mov	r0, r5
 80055c6:	441a      	add	r2, r3
 80055c8:	9209      	str	r2, [sp, #36]	; 0x24
 80055ca:	f001 f935 	bl	8006838 <__i2b>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	dd0c      	ble.n	80055ee <_dtoa_r+0x77e>
 80055d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	dd09      	ble.n	80055ee <_dtoa_r+0x77e>
 80055da:	42bb      	cmp	r3, r7
 80055dc:	bfa8      	it	ge
 80055de:	463b      	movge	r3, r7
 80055e0:	9a06      	ldr	r2, [sp, #24]
 80055e2:	1aff      	subs	r7, r7, r3
 80055e4:	1ad2      	subs	r2, r2, r3
 80055e6:	9206      	str	r2, [sp, #24]
 80055e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	b1f3      	cbz	r3, 8005630 <_dtoa_r+0x7c0>
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a9 	beq.w	800574c <_dtoa_r+0x8dc>
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	dd10      	ble.n	8005620 <_dtoa_r+0x7b0>
 80055fe:	4631      	mov	r1, r6
 8005600:	4622      	mov	r2, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f001 f9d2 	bl	80069ac <__pow5mult>
 8005608:	4652      	mov	r2, sl
 800560a:	4601      	mov	r1, r0
 800560c:	4606      	mov	r6, r0
 800560e:	4628      	mov	r0, r5
 8005610:	f001 f928 	bl	8006864 <__multiply>
 8005614:	4680      	mov	r8, r0
 8005616:	4651      	mov	r1, sl
 8005618:	4628      	mov	r0, r5
 800561a:	f001 f809 	bl	8006630 <_Bfree>
 800561e:	46c2      	mov	sl, r8
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	1b1a      	subs	r2, r3, r4
 8005624:	d004      	beq.n	8005630 <_dtoa_r+0x7c0>
 8005626:	4651      	mov	r1, sl
 8005628:	4628      	mov	r0, r5
 800562a:	f001 f9bf 	bl	80069ac <__pow5mult>
 800562e:	4682      	mov	sl, r0
 8005630:	2101      	movs	r1, #1
 8005632:	4628      	mov	r0, r5
 8005634:	f001 f900 	bl	8006838 <__i2b>
 8005638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800563a:	4604      	mov	r4, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	f340 8087 	ble.w	8005750 <_dtoa_r+0x8e0>
 8005642:	461a      	mov	r2, r3
 8005644:	4601      	mov	r1, r0
 8005646:	4628      	mov	r0, r5
 8005648:	f001 f9b0 	bl	80069ac <__pow5mult>
 800564c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564e:	4604      	mov	r4, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	f340 8080 	ble.w	8005756 <_dtoa_r+0x8e6>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005660:	6918      	ldr	r0, [r3, #16]
 8005662:	f001 f89b 	bl	800679c <__hi0bits>
 8005666:	f1c0 0020 	rsb	r0, r0, #32
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	4418      	add	r0, r3
 800566e:	f010 001f 	ands.w	r0, r0, #31
 8005672:	f000 8092 	beq.w	800579a <_dtoa_r+0x92a>
 8005676:	f1c0 0320 	rsb	r3, r0, #32
 800567a:	2b04      	cmp	r3, #4
 800567c:	f340 808a 	ble.w	8005794 <_dtoa_r+0x924>
 8005680:	f1c0 001c 	rsb	r0, r0, #28
 8005684:	9b06      	ldr	r3, [sp, #24]
 8005686:	4407      	add	r7, r0
 8005688:	4403      	add	r3, r0
 800568a:	9306      	str	r3, [sp, #24]
 800568c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568e:	4403      	add	r3, r0
 8005690:	9309      	str	r3, [sp, #36]	; 0x24
 8005692:	9b06      	ldr	r3, [sp, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	dd05      	ble.n	80056a4 <_dtoa_r+0x834>
 8005698:	4651      	mov	r1, sl
 800569a:	461a      	mov	r2, r3
 800569c:	4628      	mov	r0, r5
 800569e:	f001 f9df 	bl	8006a60 <__lshift>
 80056a2:	4682      	mov	sl, r0
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd05      	ble.n	80056b6 <_dtoa_r+0x846>
 80056aa:	4621      	mov	r1, r4
 80056ac:	461a      	mov	r2, r3
 80056ae:	4628      	mov	r0, r5
 80056b0:	f001 f9d6 	bl	8006a60 <__lshift>
 80056b4:	4604      	mov	r4, r0
 80056b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d070      	beq.n	800579e <_dtoa_r+0x92e>
 80056bc:	4621      	mov	r1, r4
 80056be:	4650      	mov	r0, sl
 80056c0:	f001 fa3a 	bl	8006b38 <__mcmp>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	da6a      	bge.n	800579e <_dtoa_r+0x92e>
 80056c8:	2300      	movs	r3, #0
 80056ca:	4651      	mov	r1, sl
 80056cc:	220a      	movs	r2, #10
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 ffd0 	bl	8006674 <__multadd>
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d6:	4682      	mov	sl, r0
 80056d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8193 	beq.w	8005a08 <_dtoa_r+0xb98>
 80056e2:	4631      	mov	r1, r6
 80056e4:	2300      	movs	r3, #0
 80056e6:	220a      	movs	r2, #10
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 ffc3 	bl	8006674 <__multadd>
 80056ee:	f1bb 0f00 	cmp.w	fp, #0
 80056f2:	4606      	mov	r6, r0
 80056f4:	f300 8093 	bgt.w	800581e <_dtoa_r+0x9ae>
 80056f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	dc57      	bgt.n	80057ae <_dtoa_r+0x93e>
 80056fe:	e08e      	b.n	800581e <_dtoa_r+0x9ae>
 8005700:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005702:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005706:	e756      	b.n	80055b6 <_dtoa_r+0x746>
 8005708:	9b02      	ldr	r3, [sp, #8]
 800570a:	1e5c      	subs	r4, r3, #1
 800570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570e:	42a3      	cmp	r3, r4
 8005710:	bfb7      	itett	lt
 8005712:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005714:	1b1c      	subge	r4, r3, r4
 8005716:	1ae2      	sublt	r2, r4, r3
 8005718:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800571a:	bfbe      	ittt	lt
 800571c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800571e:	189b      	addlt	r3, r3, r2
 8005720:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	bfb8      	it	lt
 8005726:	2400      	movlt	r4, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfbb      	ittet	lt
 800572c:	9b06      	ldrlt	r3, [sp, #24]
 800572e:	9a02      	ldrlt	r2, [sp, #8]
 8005730:	9f06      	ldrge	r7, [sp, #24]
 8005732:	1a9f      	sublt	r7, r3, r2
 8005734:	bfac      	ite	ge
 8005736:	9b02      	ldrge	r3, [sp, #8]
 8005738:	2300      	movlt	r3, #0
 800573a:	e73e      	b.n	80055ba <_dtoa_r+0x74a>
 800573c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800573e:	9f06      	ldr	r7, [sp, #24]
 8005740:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005742:	e745      	b.n	80055d0 <_dtoa_r+0x760>
 8005744:	3fe00000 	.word	0x3fe00000
 8005748:	40240000 	.word	0x40240000
 800574c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800574e:	e76a      	b.n	8005626 <_dtoa_r+0x7b6>
 8005750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005752:	2b01      	cmp	r3, #1
 8005754:	dc19      	bgt.n	800578a <_dtoa_r+0x91a>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	b9bb      	cbnz	r3, 800578a <_dtoa_r+0x91a>
 800575a:	9b05      	ldr	r3, [sp, #20]
 800575c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005760:	b99b      	cbnz	r3, 800578a <_dtoa_r+0x91a>
 8005762:	9b05      	ldr	r3, [sp, #20]
 8005764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005768:	0d1b      	lsrs	r3, r3, #20
 800576a:	051b      	lsls	r3, r3, #20
 800576c:	b183      	cbz	r3, 8005790 <_dtoa_r+0x920>
 800576e:	f04f 0801 	mov.w	r8, #1
 8005772:	9b06      	ldr	r3, [sp, #24]
 8005774:	3301      	adds	r3, #1
 8005776:	9306      	str	r3, [sp, #24]
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	3301      	adds	r3, #1
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	f47f af6a 	bne.w	800565a <_dtoa_r+0x7ea>
 8005786:	2001      	movs	r0, #1
 8005788:	e76f      	b.n	800566a <_dtoa_r+0x7fa>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	e7f6      	b.n	800577e <_dtoa_r+0x90e>
 8005790:	4698      	mov	r8, r3
 8005792:	e7f4      	b.n	800577e <_dtoa_r+0x90e>
 8005794:	f43f af7d 	beq.w	8005692 <_dtoa_r+0x822>
 8005798:	4618      	mov	r0, r3
 800579a:	301c      	adds	r0, #28
 800579c:	e772      	b.n	8005684 <_dtoa_r+0x814>
 800579e:	9b02      	ldr	r3, [sp, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dc36      	bgt.n	8005812 <_dtoa_r+0x9a2>
 80057a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	dd33      	ble.n	8005812 <_dtoa_r+0x9a2>
 80057aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80057ae:	f1bb 0f00 	cmp.w	fp, #0
 80057b2:	d10d      	bne.n	80057d0 <_dtoa_r+0x960>
 80057b4:	4621      	mov	r1, r4
 80057b6:	465b      	mov	r3, fp
 80057b8:	2205      	movs	r2, #5
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 ff5a 	bl	8006674 <__multadd>
 80057c0:	4601      	mov	r1, r0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4650      	mov	r0, sl
 80057c6:	f001 f9b7 	bl	8006b38 <__mcmp>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f73f adb6 	bgt.w	800533c <_dtoa_r+0x4cc>
 80057d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057d2:	9f08      	ldr	r7, [sp, #32]
 80057d4:	ea6f 0903 	mvn.w	r9, r3
 80057d8:	f04f 0800 	mov.w	r8, #0
 80057dc:	4621      	mov	r1, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 ff26 	bl	8006630 <_Bfree>
 80057e4:	2e00      	cmp	r6, #0
 80057e6:	f43f aea4 	beq.w	8005532 <_dtoa_r+0x6c2>
 80057ea:	f1b8 0f00 	cmp.w	r8, #0
 80057ee:	d005      	beq.n	80057fc <_dtoa_r+0x98c>
 80057f0:	45b0      	cmp	r8, r6
 80057f2:	d003      	beq.n	80057fc <_dtoa_r+0x98c>
 80057f4:	4641      	mov	r1, r8
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 ff1a 	bl	8006630 <_Bfree>
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 ff16 	bl	8006630 <_Bfree>
 8005804:	e695      	b.n	8005532 <_dtoa_r+0x6c2>
 8005806:	2400      	movs	r4, #0
 8005808:	4626      	mov	r6, r4
 800580a:	e7e1      	b.n	80057d0 <_dtoa_r+0x960>
 800580c:	46c1      	mov	r9, r8
 800580e:	4626      	mov	r6, r4
 8005810:	e594      	b.n	800533c <_dtoa_r+0x4cc>
 8005812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005814:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80fc 	beq.w	8005a16 <_dtoa_r+0xba6>
 800581e:	2f00      	cmp	r7, #0
 8005820:	dd05      	ble.n	800582e <_dtoa_r+0x9be>
 8005822:	4631      	mov	r1, r6
 8005824:	463a      	mov	r2, r7
 8005826:	4628      	mov	r0, r5
 8005828:	f001 f91a 	bl	8006a60 <__lshift>
 800582c:	4606      	mov	r6, r0
 800582e:	f1b8 0f00 	cmp.w	r8, #0
 8005832:	d05c      	beq.n	80058ee <_dtoa_r+0xa7e>
 8005834:	4628      	mov	r0, r5
 8005836:	6871      	ldr	r1, [r6, #4]
 8005838:	f000 feba 	bl	80065b0 <_Balloc>
 800583c:	4607      	mov	r7, r0
 800583e:	b928      	cbnz	r0, 800584c <_dtoa_r+0x9dc>
 8005840:	4602      	mov	r2, r0
 8005842:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005846:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <_dtoa_r+0xbd0>)
 8005848:	f7ff bb26 	b.w	8004e98 <_dtoa_r+0x28>
 800584c:	6932      	ldr	r2, [r6, #16]
 800584e:	f106 010c 	add.w	r1, r6, #12
 8005852:	3202      	adds	r2, #2
 8005854:	0092      	lsls	r2, r2, #2
 8005856:	300c      	adds	r0, #12
 8005858:	f7fd fc34 	bl	80030c4 <memcpy>
 800585c:	2201      	movs	r2, #1
 800585e:	4639      	mov	r1, r7
 8005860:	4628      	mov	r0, r5
 8005862:	f001 f8fd 	bl	8006a60 <__lshift>
 8005866:	46b0      	mov	r8, r6
 8005868:	4606      	mov	r6, r0
 800586a:	9b08      	ldr	r3, [sp, #32]
 800586c:	3301      	adds	r3, #1
 800586e:	9302      	str	r3, [sp, #8]
 8005870:	9b08      	ldr	r3, [sp, #32]
 8005872:	445b      	add	r3, fp
 8005874:	930a      	str	r3, [sp, #40]	; 0x28
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	9309      	str	r3, [sp, #36]	; 0x24
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	4621      	mov	r1, r4
 8005882:	4650      	mov	r0, sl
 8005884:	f103 3bff 	add.w	fp, r3, #4294967295
 8005888:	f7ff fa64 	bl	8004d54 <quorem>
 800588c:	4603      	mov	r3, r0
 800588e:	4641      	mov	r1, r8
 8005890:	3330      	adds	r3, #48	; 0x30
 8005892:	9004      	str	r0, [sp, #16]
 8005894:	4650      	mov	r0, sl
 8005896:	930b      	str	r3, [sp, #44]	; 0x2c
 8005898:	f001 f94e 	bl	8006b38 <__mcmp>
 800589c:	4632      	mov	r2, r6
 800589e:	9006      	str	r0, [sp, #24]
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f001 f964 	bl	8006b70 <__mdiff>
 80058a8:	68c2      	ldr	r2, [r0, #12]
 80058aa:	4607      	mov	r7, r0
 80058ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ae:	bb02      	cbnz	r2, 80058f2 <_dtoa_r+0xa82>
 80058b0:	4601      	mov	r1, r0
 80058b2:	4650      	mov	r0, sl
 80058b4:	f001 f940 	bl	8006b38 <__mcmp>
 80058b8:	4602      	mov	r2, r0
 80058ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058bc:	4639      	mov	r1, r7
 80058be:	4628      	mov	r0, r5
 80058c0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80058c4:	f000 feb4 	bl	8006630 <_Bfree>
 80058c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058cc:	9f02      	ldr	r7, [sp, #8]
 80058ce:	ea43 0102 	orr.w	r1, r3, r2
 80058d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d4:	430b      	orrs	r3, r1
 80058d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d8:	d10d      	bne.n	80058f6 <_dtoa_r+0xa86>
 80058da:	2b39      	cmp	r3, #57	; 0x39
 80058dc:	d027      	beq.n	800592e <_dtoa_r+0xabe>
 80058de:	9a06      	ldr	r2, [sp, #24]
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	dd01      	ble.n	80058e8 <_dtoa_r+0xa78>
 80058e4:	9b04      	ldr	r3, [sp, #16]
 80058e6:	3331      	adds	r3, #49	; 0x31
 80058e8:	f88b 3000 	strb.w	r3, [fp]
 80058ec:	e776      	b.n	80057dc <_dtoa_r+0x96c>
 80058ee:	4630      	mov	r0, r6
 80058f0:	e7b9      	b.n	8005866 <_dtoa_r+0x9f6>
 80058f2:	2201      	movs	r2, #1
 80058f4:	e7e2      	b.n	80058bc <_dtoa_r+0xa4c>
 80058f6:	9906      	ldr	r1, [sp, #24]
 80058f8:	2900      	cmp	r1, #0
 80058fa:	db04      	blt.n	8005906 <_dtoa_r+0xa96>
 80058fc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80058fe:	4301      	orrs	r1, r0
 8005900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005902:	4301      	orrs	r1, r0
 8005904:	d120      	bne.n	8005948 <_dtoa_r+0xad8>
 8005906:	2a00      	cmp	r2, #0
 8005908:	ddee      	ble.n	80058e8 <_dtoa_r+0xa78>
 800590a:	4651      	mov	r1, sl
 800590c:	2201      	movs	r2, #1
 800590e:	4628      	mov	r0, r5
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	f001 f8a5 	bl	8006a60 <__lshift>
 8005916:	4621      	mov	r1, r4
 8005918:	4682      	mov	sl, r0
 800591a:	f001 f90d 	bl	8006b38 <__mcmp>
 800591e:	2800      	cmp	r0, #0
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	dc02      	bgt.n	800592a <_dtoa_r+0xaba>
 8005924:	d1e0      	bne.n	80058e8 <_dtoa_r+0xa78>
 8005926:	07da      	lsls	r2, r3, #31
 8005928:	d5de      	bpl.n	80058e8 <_dtoa_r+0xa78>
 800592a:	2b39      	cmp	r3, #57	; 0x39
 800592c:	d1da      	bne.n	80058e4 <_dtoa_r+0xa74>
 800592e:	2339      	movs	r3, #57	; 0x39
 8005930:	f88b 3000 	strb.w	r3, [fp]
 8005934:	463b      	mov	r3, r7
 8005936:	461f      	mov	r7, r3
 8005938:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800593c:	3b01      	subs	r3, #1
 800593e:	2a39      	cmp	r2, #57	; 0x39
 8005940:	d050      	beq.n	80059e4 <_dtoa_r+0xb74>
 8005942:	3201      	adds	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e749      	b.n	80057dc <_dtoa_r+0x96c>
 8005948:	2a00      	cmp	r2, #0
 800594a:	dd03      	ble.n	8005954 <_dtoa_r+0xae4>
 800594c:	2b39      	cmp	r3, #57	; 0x39
 800594e:	d0ee      	beq.n	800592e <_dtoa_r+0xabe>
 8005950:	3301      	adds	r3, #1
 8005952:	e7c9      	b.n	80058e8 <_dtoa_r+0xa78>
 8005954:	9a02      	ldr	r2, [sp, #8]
 8005956:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005958:	f802 3c01 	strb.w	r3, [r2, #-1]
 800595c:	428a      	cmp	r2, r1
 800595e:	d02a      	beq.n	80059b6 <_dtoa_r+0xb46>
 8005960:	4651      	mov	r1, sl
 8005962:	2300      	movs	r3, #0
 8005964:	220a      	movs	r2, #10
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fe84 	bl	8006674 <__multadd>
 800596c:	45b0      	cmp	r8, r6
 800596e:	4682      	mov	sl, r0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	f04f 020a 	mov.w	r2, #10
 8005978:	4641      	mov	r1, r8
 800597a:	4628      	mov	r0, r5
 800597c:	d107      	bne.n	800598e <_dtoa_r+0xb1e>
 800597e:	f000 fe79 	bl	8006674 <__multadd>
 8005982:	4680      	mov	r8, r0
 8005984:	4606      	mov	r6, r0
 8005986:	9b02      	ldr	r3, [sp, #8]
 8005988:	3301      	adds	r3, #1
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	e777      	b.n	800587e <_dtoa_r+0xa0e>
 800598e:	f000 fe71 	bl	8006674 <__multadd>
 8005992:	4631      	mov	r1, r6
 8005994:	4680      	mov	r8, r0
 8005996:	2300      	movs	r3, #0
 8005998:	220a      	movs	r2, #10
 800599a:	4628      	mov	r0, r5
 800599c:	f000 fe6a 	bl	8006674 <__multadd>
 80059a0:	4606      	mov	r6, r0
 80059a2:	e7f0      	b.n	8005986 <_dtoa_r+0xb16>
 80059a4:	f1bb 0f00 	cmp.w	fp, #0
 80059a8:	bfcc      	ite	gt
 80059aa:	465f      	movgt	r7, fp
 80059ac:	2701      	movle	r7, #1
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	9a08      	ldr	r2, [sp, #32]
 80059b4:	4417      	add	r7, r2
 80059b6:	4651      	mov	r1, sl
 80059b8:	2201      	movs	r2, #1
 80059ba:	4628      	mov	r0, r5
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	f001 f84f 	bl	8006a60 <__lshift>
 80059c2:	4621      	mov	r1, r4
 80059c4:	4682      	mov	sl, r0
 80059c6:	f001 f8b7 	bl	8006b38 <__mcmp>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	dcb2      	bgt.n	8005934 <_dtoa_r+0xac4>
 80059ce:	d102      	bne.n	80059d6 <_dtoa_r+0xb66>
 80059d0:	9b02      	ldr	r3, [sp, #8]
 80059d2:	07db      	lsls	r3, r3, #31
 80059d4:	d4ae      	bmi.n	8005934 <_dtoa_r+0xac4>
 80059d6:	463b      	mov	r3, r7
 80059d8:	461f      	mov	r7, r3
 80059da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059de:	2a30      	cmp	r2, #48	; 0x30
 80059e0:	d0fa      	beq.n	80059d8 <_dtoa_r+0xb68>
 80059e2:	e6fb      	b.n	80057dc <_dtoa_r+0x96c>
 80059e4:	9a08      	ldr	r2, [sp, #32]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d1a5      	bne.n	8005936 <_dtoa_r+0xac6>
 80059ea:	2331      	movs	r3, #49	; 0x31
 80059ec:	f109 0901 	add.w	r9, r9, #1
 80059f0:	7013      	strb	r3, [r2, #0]
 80059f2:	e6f3      	b.n	80057dc <_dtoa_r+0x96c>
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <_dtoa_r+0xbd4>)
 80059f6:	f7ff baa7 	b.w	8004f48 <_dtoa_r+0xd8>
 80059fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f aa80 	bne.w	8004f02 <_dtoa_r+0x92>
 8005a02:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <_dtoa_r+0xbd8>)
 8005a04:	f7ff baa0 	b.w	8004f48 <_dtoa_r+0xd8>
 8005a08:	f1bb 0f00 	cmp.w	fp, #0
 8005a0c:	dc03      	bgt.n	8005a16 <_dtoa_r+0xba6>
 8005a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	f73f aecc 	bgt.w	80057ae <_dtoa_r+0x93e>
 8005a16:	9f08      	ldr	r7, [sp, #32]
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f7ff f99a 	bl	8004d54 <quorem>
 8005a20:	9a08      	ldr	r2, [sp, #32]
 8005a22:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a26:	f807 3b01 	strb.w	r3, [r7], #1
 8005a2a:	1aba      	subs	r2, r7, r2
 8005a2c:	4593      	cmp	fp, r2
 8005a2e:	ddb9      	ble.n	80059a4 <_dtoa_r+0xb34>
 8005a30:	4651      	mov	r1, sl
 8005a32:	2300      	movs	r3, #0
 8005a34:	220a      	movs	r2, #10
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 fe1c 	bl	8006674 <__multadd>
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	e7eb      	b.n	8005a18 <_dtoa_r+0xba8>
 8005a40:	080083fc 	.word	0x080083fc
 8005a44:	080081f8 	.word	0x080081f8
 8005a48:	08008379 	.word	0x08008379

08005a4c <__sflush_r>:
 8005a4c:	898a      	ldrh	r2, [r1, #12]
 8005a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	4605      	mov	r5, r0
 8005a54:	0710      	lsls	r0, r2, #28
 8005a56:	460c      	mov	r4, r1
 8005a58:	d458      	bmi.n	8005b0c <__sflush_r+0xc0>
 8005a5a:	684b      	ldr	r3, [r1, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc05      	bgt.n	8005a6c <__sflush_r+0x20>
 8005a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dc02      	bgt.n	8005a6c <__sflush_r+0x20>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a6e:	2e00      	cmp	r6, #0
 8005a70:	d0f9      	beq.n	8005a66 <__sflush_r+0x1a>
 8005a72:	2300      	movs	r3, #0
 8005a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a78:	682f      	ldr	r7, [r5, #0]
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	d032      	beq.n	8005ae4 <__sflush_r+0x98>
 8005a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	075a      	lsls	r2, r3, #29
 8005a84:	d505      	bpl.n	8005a92 <__sflush_r+0x46>
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	1ac0      	subs	r0, r0, r3
 8005a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a8c:	b10b      	cbz	r3, 8005a92 <__sflush_r+0x46>
 8005a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a90:	1ac0      	subs	r0, r0, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	4602      	mov	r2, r0
 8005a96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a98:	4628      	mov	r0, r5
 8005a9a:	6a21      	ldr	r1, [r4, #32]
 8005a9c:	47b0      	blx	r6
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	d106      	bne.n	8005ab2 <__sflush_r+0x66>
 8005aa4:	6829      	ldr	r1, [r5, #0]
 8005aa6:	291d      	cmp	r1, #29
 8005aa8:	d82c      	bhi.n	8005b04 <__sflush_r+0xb8>
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <__sflush_r+0x108>)
 8005aac:	40ca      	lsrs	r2, r1
 8005aae:	07d6      	lsls	r6, r2, #31
 8005ab0:	d528      	bpl.n	8005b04 <__sflush_r+0xb8>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	6062      	str	r2, [r4, #4]
 8005ab6:	6922      	ldr	r2, [r4, #16]
 8005ab8:	04d9      	lsls	r1, r3, #19
 8005aba:	6022      	str	r2, [r4, #0]
 8005abc:	d504      	bpl.n	8005ac8 <__sflush_r+0x7c>
 8005abe:	1c42      	adds	r2, r0, #1
 8005ac0:	d101      	bne.n	8005ac6 <__sflush_r+0x7a>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	b903      	cbnz	r3, 8005ac8 <__sflush_r+0x7c>
 8005ac6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aca:	602f      	str	r7, [r5, #0]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d0ca      	beq.n	8005a66 <__sflush_r+0x1a>
 8005ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad4:	4299      	cmp	r1, r3
 8005ad6:	d002      	beq.n	8005ade <__sflush_r+0x92>
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f001 fa2f 	bl	8006f3c <_free_r>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ae2:	e7c1      	b.n	8005a68 <__sflush_r+0x1c>
 8005ae4:	6a21      	ldr	r1, [r4, #32]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b0      	blx	r6
 8005aec:	1c41      	adds	r1, r0, #1
 8005aee:	d1c7      	bne.n	8005a80 <__sflush_r+0x34>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0c4      	beq.n	8005a80 <__sflush_r+0x34>
 8005af6:	2b1d      	cmp	r3, #29
 8005af8:	d001      	beq.n	8005afe <__sflush_r+0xb2>
 8005afa:	2b16      	cmp	r3, #22
 8005afc:	d101      	bne.n	8005b02 <__sflush_r+0xb6>
 8005afe:	602f      	str	r7, [r5, #0]
 8005b00:	e7b1      	b.n	8005a66 <__sflush_r+0x1a>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	e7ad      	b.n	8005a68 <__sflush_r+0x1c>
 8005b0c:	690f      	ldr	r7, [r1, #16]
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d0a9      	beq.n	8005a66 <__sflush_r+0x1a>
 8005b12:	0793      	lsls	r3, r2, #30
 8005b14:	bf18      	it	ne
 8005b16:	2300      	movne	r3, #0
 8005b18:	680e      	ldr	r6, [r1, #0]
 8005b1a:	bf08      	it	eq
 8005b1c:	694b      	ldreq	r3, [r1, #20]
 8005b1e:	eba6 0807 	sub.w	r8, r6, r7
 8005b22:	600f      	str	r7, [r1, #0]
 8005b24:	608b      	str	r3, [r1, #8]
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	dd9c      	ble.n	8005a66 <__sflush_r+0x1a>
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	463a      	mov	r2, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	6a21      	ldr	r1, [r4, #32]
 8005b34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b36:	47b0      	blx	r6
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	dc06      	bgt.n	8005b4a <__sflush_r+0xfe>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	e78e      	b.n	8005a68 <__sflush_r+0x1c>
 8005b4a:	4407      	add	r7, r0
 8005b4c:	eba8 0800 	sub.w	r8, r8, r0
 8005b50:	e7e9      	b.n	8005b26 <__sflush_r+0xda>
 8005b52:	bf00      	nop
 8005b54:	20400001 	.word	0x20400001

08005b58 <_fflush_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	690b      	ldr	r3, [r1, #16]
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	b913      	cbnz	r3, 8005b68 <_fflush_r+0x10>
 8005b62:	2500      	movs	r5, #0
 8005b64:	4628      	mov	r0, r5
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	b118      	cbz	r0, 8005b72 <_fflush_r+0x1a>
 8005b6a:	6983      	ldr	r3, [r0, #24]
 8005b6c:	b90b      	cbnz	r3, 8005b72 <_fflush_r+0x1a>
 8005b6e:	f000 f887 	bl	8005c80 <__sinit>
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <_fflush_r+0x6c>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d11b      	bne.n	8005bb0 <_fflush_r+0x58>
 8005b78:	686c      	ldr	r4, [r5, #4]
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ef      	beq.n	8005b62 <_fflush_r+0xa>
 8005b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b84:	07d0      	lsls	r0, r2, #31
 8005b86:	d404      	bmi.n	8005b92 <_fflush_r+0x3a>
 8005b88:	0599      	lsls	r1, r3, #22
 8005b8a:	d402      	bmi.n	8005b92 <_fflush_r+0x3a>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8e:	f000 fc80 	bl	8006492 <__retarget_lock_acquire_recursive>
 8005b92:	4628      	mov	r0, r5
 8005b94:	4621      	mov	r1, r4
 8005b96:	f7ff ff59 	bl	8005a4c <__sflush_r>
 8005b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	07da      	lsls	r2, r3, #31
 8005ba0:	d4e0      	bmi.n	8005b64 <_fflush_r+0xc>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	059b      	lsls	r3, r3, #22
 8005ba6:	d4dd      	bmi.n	8005b64 <_fflush_r+0xc>
 8005ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005baa:	f000 fc73 	bl	8006494 <__retarget_lock_release_recursive>
 8005bae:	e7d9      	b.n	8005b64 <_fflush_r+0xc>
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <_fflush_r+0x70>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <_fflush_r+0x62>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7df      	b.n	8005b7a <_fflush_r+0x22>
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <_fflush_r+0x74>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7da      	b.n	8005b7a <_fflush_r+0x22>
 8005bc4:	08008430 	.word	0x08008430
 8005bc8:	08008450 	.word	0x08008450
 8005bcc:	08008410 	.word	0x08008410

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	; 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	; 0x5c
 8005bee:	f7fd fa77 	bl	80030e0 <memset>
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <std+0x38>)
 8005bf4:	6224      	str	r4, [r4, #32]
 8005bf6:	6263      	str	r3, [r4, #36]	; 0x24
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <std+0x3c>)
 8005bfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <std+0x40>)
 8005bfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <std+0x44>)
 8005c02:	6323      	str	r3, [r4, #48]	; 0x30
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	bf00      	nop
 8005c08:	0800736d 	.word	0x0800736d
 8005c0c:	0800738f 	.word	0x0800738f
 8005c10:	080073c7 	.word	0x080073c7
 8005c14:	080073eb 	.word	0x080073eb

08005c18 <_cleanup_r>:
 8005c18:	4901      	ldr	r1, [pc, #4]	; (8005c20 <_cleanup_r+0x8>)
 8005c1a:	f000 b8af 	b.w	8005d7c <_fwalk_reent>
 8005c1e:	bf00      	nop
 8005c20:	08005b59 	.word	0x08005b59

08005c24 <__sfmoreglue>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	2568      	movs	r5, #104	; 0x68
 8005c28:	1e4a      	subs	r2, r1, #1
 8005c2a:	4355      	muls	r5, r2
 8005c2c:	460e      	mov	r6, r1
 8005c2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c32:	f001 f9cf 	bl	8006fd4 <_malloc_r>
 8005c36:	4604      	mov	r4, r0
 8005c38:	b140      	cbz	r0, 8005c4c <__sfmoreglue+0x28>
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c40:	300c      	adds	r0, #12
 8005c42:	60a0      	str	r0, [r4, #8]
 8005c44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c48:	f7fd fa4a 	bl	80030e0 <memset>
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}

08005c50 <__sfp_lock_acquire>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sfp_lock_acquire+0x8>)
 8005c52:	f000 bc1e 	b.w	8006492 <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	200008e8 	.word	0x200008e8

08005c5c <__sfp_lock_release>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__sfp_lock_release+0x8>)
 8005c5e:	f000 bc19 	b.w	8006494 <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	200008e8 	.word	0x200008e8

08005c68 <__sinit_lock_acquire>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__sinit_lock_acquire+0x8>)
 8005c6a:	f000 bc12 	b.w	8006492 <__retarget_lock_acquire_recursive>
 8005c6e:	bf00      	nop
 8005c70:	200008e3 	.word	0x200008e3

08005c74 <__sinit_lock_release>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__sinit_lock_release+0x8>)
 8005c76:	f000 bc0d 	b.w	8006494 <__retarget_lock_release_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	200008e3 	.word	0x200008e3

08005c80 <__sinit>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4604      	mov	r4, r0
 8005c84:	f7ff fff0 	bl	8005c68 <__sinit_lock_acquire>
 8005c88:	69a3      	ldr	r3, [r4, #24]
 8005c8a:	b11b      	cbz	r3, 8005c94 <__sinit+0x14>
 8005c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c90:	f7ff bff0 	b.w	8005c74 <__sinit_lock_release>
 8005c94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c98:	6523      	str	r3, [r4, #80]	; 0x50
 8005c9a:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <__sinit+0x68>)
 8005c9c:	4a13      	ldr	r2, [pc, #76]	; (8005cec <__sinit+0x6c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	bf08      	it	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	bf08      	it	eq
 8005cac:	61a3      	streq	r3, [r4, #24]
 8005cae:	f000 f81f 	bl	8005cf0 <__sfp>
 8005cb2:	6060      	str	r0, [r4, #4]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 f81b 	bl	8005cf0 <__sfp>
 8005cba:	60a0      	str	r0, [r4, #8]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 f817 	bl	8005cf0 <__sfp>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	60e0      	str	r0, [r4, #12]
 8005cc8:	6860      	ldr	r0, [r4, #4]
 8005cca:	f7ff ff81 	bl	8005bd0 <std>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	2109      	movs	r1, #9
 8005cd2:	68a0      	ldr	r0, [r4, #8]
 8005cd4:	f7ff ff7c 	bl	8005bd0 <std>
 8005cd8:	2202      	movs	r2, #2
 8005cda:	2112      	movs	r1, #18
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	f7ff ff77 	bl	8005bd0 <std>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	61a3      	str	r3, [r4, #24]
 8005ce6:	e7d1      	b.n	8005c8c <__sinit+0xc>
 8005ce8:	080081e4 	.word	0x080081e4
 8005cec:	08005c19 	.word	0x08005c19

08005cf0 <__sfp>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	f7ff ffac 	bl	8005c50 <__sfp_lock_acquire>
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <__sfp+0x84>)
 8005cfa:	681e      	ldr	r6, [r3, #0]
 8005cfc:	69b3      	ldr	r3, [r6, #24]
 8005cfe:	b913      	cbnz	r3, 8005d06 <__sfp+0x16>
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff ffbd 	bl	8005c80 <__sinit>
 8005d06:	3648      	adds	r6, #72	; 0x48
 8005d08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	d503      	bpl.n	8005d18 <__sfp+0x28>
 8005d10:	6833      	ldr	r3, [r6, #0]
 8005d12:	b30b      	cbz	r3, 8005d58 <__sfp+0x68>
 8005d14:	6836      	ldr	r6, [r6, #0]
 8005d16:	e7f7      	b.n	8005d08 <__sfp+0x18>
 8005d18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d1c:	b9d5      	cbnz	r5, 8005d54 <__sfp+0x64>
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <__sfp+0x88>)
 8005d20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d24:	60e3      	str	r3, [r4, #12]
 8005d26:	6665      	str	r5, [r4, #100]	; 0x64
 8005d28:	f000 fbb2 	bl	8006490 <__retarget_lock_init_recursive>
 8005d2c:	f7ff ff96 	bl	8005c5c <__sfp_lock_release>
 8005d30:	2208      	movs	r2, #8
 8005d32:	4629      	mov	r1, r5
 8005d34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d3c:	6025      	str	r5, [r4, #0]
 8005d3e:	61a5      	str	r5, [r4, #24]
 8005d40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d44:	f7fd f9cc 	bl	80030e0 <memset>
 8005d48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d50:	4620      	mov	r0, r4
 8005d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d54:	3468      	adds	r4, #104	; 0x68
 8005d56:	e7d9      	b.n	8005d0c <__sfp+0x1c>
 8005d58:	2104      	movs	r1, #4
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7ff ff62 	bl	8005c24 <__sfmoreglue>
 8005d60:	4604      	mov	r4, r0
 8005d62:	6030      	str	r0, [r6, #0]
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d1d5      	bne.n	8005d14 <__sfp+0x24>
 8005d68:	f7ff ff78 	bl	8005c5c <__sfp_lock_release>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	e7ee      	b.n	8005d50 <__sfp+0x60>
 8005d72:	bf00      	nop
 8005d74:	080081e4 	.word	0x080081e4
 8005d78:	ffff0001 	.word	0xffff0001

08005d7c <_fwalk_reent>:
 8005d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d80:	4606      	mov	r6, r0
 8005d82:	4688      	mov	r8, r1
 8005d84:	2700      	movs	r7, #0
 8005d86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d8e:	f1b9 0901 	subs.w	r9, r9, #1
 8005d92:	d505      	bpl.n	8005da0 <_fwalk_reent+0x24>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d1f7      	bne.n	8005d8a <_fwalk_reent+0xe>
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d907      	bls.n	8005db6 <_fwalk_reent+0x3a>
 8005da6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005daa:	3301      	adds	r3, #1
 8005dac:	d003      	beq.n	8005db6 <_fwalk_reent+0x3a>
 8005dae:	4629      	mov	r1, r5
 8005db0:	4630      	mov	r0, r6
 8005db2:	47c0      	blx	r8
 8005db4:	4307      	orrs	r7, r0
 8005db6:	3568      	adds	r5, #104	; 0x68
 8005db8:	e7e9      	b.n	8005d8e <_fwalk_reent+0x12>

08005dba <rshift>:
 8005dba:	6903      	ldr	r3, [r0, #16]
 8005dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dc0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005dc4:	f100 0414 	add.w	r4, r0, #20
 8005dc8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005dcc:	dd46      	ble.n	8005e5c <rshift+0xa2>
 8005dce:	f011 011f 	ands.w	r1, r1, #31
 8005dd2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005dd6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005dda:	d10c      	bne.n	8005df6 <rshift+0x3c>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f100 0710 	add.w	r7, r0, #16
 8005de2:	42b1      	cmp	r1, r6
 8005de4:	d335      	bcc.n	8005e52 <rshift+0x98>
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	1eea      	subs	r2, r5, #3
 8005dec:	4296      	cmp	r6, r2
 8005dee:	bf38      	it	cc
 8005df0:	2300      	movcc	r3, #0
 8005df2:	4423      	add	r3, r4
 8005df4:	e015      	b.n	8005e22 <rshift+0x68>
 8005df6:	46a1      	mov	r9, r4
 8005df8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005dfc:	f1c1 0820 	rsb	r8, r1, #32
 8005e00:	40cf      	lsrs	r7, r1
 8005e02:	f105 0e04 	add.w	lr, r5, #4
 8005e06:	4576      	cmp	r6, lr
 8005e08:	46f4      	mov	ip, lr
 8005e0a:	d816      	bhi.n	8005e3a <rshift+0x80>
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009a      	lsls	r2, r3, #2
 8005e10:	3a04      	subs	r2, #4
 8005e12:	3501      	adds	r5, #1
 8005e14:	42ae      	cmp	r6, r5
 8005e16:	bf38      	it	cc
 8005e18:	2200      	movcc	r2, #0
 8005e1a:	18a3      	adds	r3, r4, r2
 8005e1c:	50a7      	str	r7, [r4, r2]
 8005e1e:	b107      	cbz	r7, 8005e22 <rshift+0x68>
 8005e20:	3304      	adds	r3, #4
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	eba3 0204 	sub.w	r2, r3, r4
 8005e28:	bf08      	it	eq
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005e30:	6102      	str	r2, [r0, #16]
 8005e32:	bf08      	it	eq
 8005e34:	6143      	streq	r3, [r0, #20]
 8005e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e3a:	f8dc c000 	ldr.w	ip, [ip]
 8005e3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005e42:	ea4c 0707 	orr.w	r7, ip, r7
 8005e46:	f849 7b04 	str.w	r7, [r9], #4
 8005e4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e4e:	40cf      	lsrs	r7, r1
 8005e50:	e7d9      	b.n	8005e06 <rshift+0x4c>
 8005e52:	f851 cb04 	ldr.w	ip, [r1], #4
 8005e56:	f847 cf04 	str.w	ip, [r7, #4]!
 8005e5a:	e7c2      	b.n	8005de2 <rshift+0x28>
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	e7e0      	b.n	8005e22 <rshift+0x68>

08005e60 <__hexdig_fun>:
 8005e60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d802      	bhi.n	8005e6e <__hexdig_fun+0xe>
 8005e68:	3820      	subs	r0, #32
 8005e6a:	b2c0      	uxtb	r0, r0
 8005e6c:	4770      	bx	lr
 8005e6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d801      	bhi.n	8005e7a <__hexdig_fun+0x1a>
 8005e76:	3847      	subs	r0, #71	; 0x47
 8005e78:	e7f7      	b.n	8005e6a <__hexdig_fun+0xa>
 8005e7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d801      	bhi.n	8005e86 <__hexdig_fun+0x26>
 8005e82:	3827      	subs	r0, #39	; 0x27
 8005e84:	e7f1      	b.n	8005e6a <__hexdig_fun+0xa>
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr
	...

08005e8c <__gethex>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	b08b      	sub	sp, #44	; 0x2c
 8005e92:	9306      	str	r3, [sp, #24]
 8005e94:	4bb9      	ldr	r3, [pc, #740]	; (800617c <__gethex+0x2f0>)
 8005e96:	9002      	str	r0, [sp, #8]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	468b      	mov	fp, r1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	f7fa f965 	bl	8000170 <strlen>
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	f8db 2000 	ldr.w	r2, [fp]
 8005eae:	4403      	add	r3, r0
 8005eb0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	1c93      	adds	r3, r2, #2
 8005eb8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005ebc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005ec0:	32fe      	adds	r2, #254	; 0xfe
 8005ec2:	18d1      	adds	r1, r2, r3
 8005ec4:	461f      	mov	r7, r3
 8005ec6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005eca:	9101      	str	r1, [sp, #4]
 8005ecc:	2830      	cmp	r0, #48	; 0x30
 8005ece:	d0f8      	beq.n	8005ec2 <__gethex+0x36>
 8005ed0:	f7ff ffc6 	bl	8005e60 <__hexdig_fun>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d13a      	bne.n	8005f50 <__gethex+0xc4>
 8005eda:	4652      	mov	r2, sl
 8005edc:	4638      	mov	r0, r7
 8005ede:	9903      	ldr	r1, [sp, #12]
 8005ee0:	f001 fa87 	bl	80073f2 <strncmp>
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d166      	bne.n	8005fb8 <__gethex+0x12c>
 8005eea:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005eee:	eb07 060a 	add.w	r6, r7, sl
 8005ef2:	f7ff ffb5 	bl	8005e60 <__hexdig_fun>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d060      	beq.n	8005fbc <__gethex+0x130>
 8005efa:	4633      	mov	r3, r6
 8005efc:	7818      	ldrb	r0, [r3, #0]
 8005efe:	461f      	mov	r7, r3
 8005f00:	2830      	cmp	r0, #48	; 0x30
 8005f02:	f103 0301 	add.w	r3, r3, #1
 8005f06:	d0f9      	beq.n	8005efc <__gethex+0x70>
 8005f08:	f7ff ffaa 	bl	8005e60 <__hexdig_fun>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	fab0 f480 	clz	r4, r0
 8005f12:	4635      	mov	r5, r6
 8005f14:	0964      	lsrs	r4, r4, #5
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	7830      	ldrb	r0, [r6, #0]
 8005f1e:	3201      	adds	r2, #1
 8005f20:	f7ff ff9e 	bl	8005e60 <__hexdig_fun>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1f8      	bne.n	8005f1a <__gethex+0x8e>
 8005f28:	4652      	mov	r2, sl
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	9903      	ldr	r1, [sp, #12]
 8005f2e:	f001 fa60 	bl	80073f2 <strncmp>
 8005f32:	b980      	cbnz	r0, 8005f56 <__gethex+0xca>
 8005f34:	b94d      	cbnz	r5, 8005f4a <__gethex+0xbe>
 8005f36:	eb06 050a 	add.w	r5, r6, sl
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	7830      	ldrb	r0, [r6, #0]
 8005f40:	3201      	adds	r2, #1
 8005f42:	f7ff ff8d 	bl	8005e60 <__hexdig_fun>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1f8      	bne.n	8005f3c <__gethex+0xb0>
 8005f4a:	1bad      	subs	r5, r5, r6
 8005f4c:	00ad      	lsls	r5, r5, #2
 8005f4e:	e004      	b.n	8005f5a <__gethex+0xce>
 8005f50:	2400      	movs	r4, #0
 8005f52:	4625      	mov	r5, r4
 8005f54:	e7e0      	b.n	8005f18 <__gethex+0x8c>
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	d1f7      	bne.n	8005f4a <__gethex+0xbe>
 8005f5a:	7833      	ldrb	r3, [r6, #0]
 8005f5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f60:	2b50      	cmp	r3, #80	; 0x50
 8005f62:	d139      	bne.n	8005fd8 <__gethex+0x14c>
 8005f64:	7873      	ldrb	r3, [r6, #1]
 8005f66:	2b2b      	cmp	r3, #43	; 0x2b
 8005f68:	d02a      	beq.n	8005fc0 <__gethex+0x134>
 8005f6a:	2b2d      	cmp	r3, #45	; 0x2d
 8005f6c:	d02c      	beq.n	8005fc8 <__gethex+0x13c>
 8005f6e:	f04f 0900 	mov.w	r9, #0
 8005f72:	1c71      	adds	r1, r6, #1
 8005f74:	7808      	ldrb	r0, [r1, #0]
 8005f76:	f7ff ff73 	bl	8005e60 <__hexdig_fun>
 8005f7a:	1e43      	subs	r3, r0, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b18      	cmp	r3, #24
 8005f80:	d82a      	bhi.n	8005fd8 <__gethex+0x14c>
 8005f82:	f1a0 0210 	sub.w	r2, r0, #16
 8005f86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f8a:	f7ff ff69 	bl	8005e60 <__hexdig_fun>
 8005f8e:	1e43      	subs	r3, r0, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b18      	cmp	r3, #24
 8005f94:	d91b      	bls.n	8005fce <__gethex+0x142>
 8005f96:	f1b9 0f00 	cmp.w	r9, #0
 8005f9a:	d000      	beq.n	8005f9e <__gethex+0x112>
 8005f9c:	4252      	negs	r2, r2
 8005f9e:	4415      	add	r5, r2
 8005fa0:	f8cb 1000 	str.w	r1, [fp]
 8005fa4:	b1d4      	cbz	r4, 8005fdc <__gethex+0x150>
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf14      	ite	ne
 8005fac:	2700      	movne	r7, #0
 8005fae:	2706      	moveq	r7, #6
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	b00b      	add	sp, #44	; 0x2c
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	463e      	mov	r6, r7
 8005fba:	4625      	mov	r5, r4
 8005fbc:	2401      	movs	r4, #1
 8005fbe:	e7cc      	b.n	8005f5a <__gethex+0xce>
 8005fc0:	f04f 0900 	mov.w	r9, #0
 8005fc4:	1cb1      	adds	r1, r6, #2
 8005fc6:	e7d5      	b.n	8005f74 <__gethex+0xe8>
 8005fc8:	f04f 0901 	mov.w	r9, #1
 8005fcc:	e7fa      	b.n	8005fc4 <__gethex+0x138>
 8005fce:	230a      	movs	r3, #10
 8005fd0:	fb03 0202 	mla	r2, r3, r2, r0
 8005fd4:	3a10      	subs	r2, #16
 8005fd6:	e7d6      	b.n	8005f86 <__gethex+0xfa>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	e7e1      	b.n	8005fa0 <__gethex+0x114>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	1bf3      	subs	r3, r6, r7
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	dc0a      	bgt.n	8005ffc <__gethex+0x170>
 8005fe6:	9802      	ldr	r0, [sp, #8]
 8005fe8:	f000 fae2 	bl	80065b0 <_Balloc>
 8005fec:	4604      	mov	r4, r0
 8005fee:	b940      	cbnz	r0, 8006002 <__gethex+0x176>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	21de      	movs	r1, #222	; 0xde
 8005ff4:	4b62      	ldr	r3, [pc, #392]	; (8006180 <__gethex+0x2f4>)
 8005ff6:	4863      	ldr	r0, [pc, #396]	; (8006184 <__gethex+0x2f8>)
 8005ff8:	f001 fa2c 	bl	8007454 <__assert_func>
 8005ffc:	3101      	adds	r1, #1
 8005ffe:	105b      	asrs	r3, r3, #1
 8006000:	e7ef      	b.n	8005fe2 <__gethex+0x156>
 8006002:	f04f 0b00 	mov.w	fp, #0
 8006006:	f100 0914 	add.w	r9, r0, #20
 800600a:	f1ca 0301 	rsb	r3, sl, #1
 800600e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006012:	f8cd b004 	str.w	fp, [sp, #4]
 8006016:	9308      	str	r3, [sp, #32]
 8006018:	42b7      	cmp	r7, r6
 800601a:	d33f      	bcc.n	800609c <__gethex+0x210>
 800601c:	9f04      	ldr	r7, [sp, #16]
 800601e:	9b01      	ldr	r3, [sp, #4]
 8006020:	f847 3b04 	str.w	r3, [r7], #4
 8006024:	eba7 0709 	sub.w	r7, r7, r9
 8006028:	10bf      	asrs	r7, r7, #2
 800602a:	6127      	str	r7, [r4, #16]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fbb5 	bl	800679c <__hi0bits>
 8006032:	017f      	lsls	r7, r7, #5
 8006034:	f8d8 6000 	ldr.w	r6, [r8]
 8006038:	1a3f      	subs	r7, r7, r0
 800603a:	42b7      	cmp	r7, r6
 800603c:	dd62      	ble.n	8006104 <__gethex+0x278>
 800603e:	1bbf      	subs	r7, r7, r6
 8006040:	4639      	mov	r1, r7
 8006042:	4620      	mov	r0, r4
 8006044:	f000 ff4b 	bl	8006ede <__any_on>
 8006048:	4682      	mov	sl, r0
 800604a:	b1a8      	cbz	r0, 8006078 <__gethex+0x1ec>
 800604c:	f04f 0a01 	mov.w	sl, #1
 8006050:	1e7b      	subs	r3, r7, #1
 8006052:	1159      	asrs	r1, r3, #5
 8006054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006058:	f003 021f 	and.w	r2, r3, #31
 800605c:	fa0a f202 	lsl.w	r2, sl, r2
 8006060:	420a      	tst	r2, r1
 8006062:	d009      	beq.n	8006078 <__gethex+0x1ec>
 8006064:	4553      	cmp	r3, sl
 8006066:	dd05      	ble.n	8006074 <__gethex+0x1e8>
 8006068:	4620      	mov	r0, r4
 800606a:	1eb9      	subs	r1, r7, #2
 800606c:	f000 ff37 	bl	8006ede <__any_on>
 8006070:	2800      	cmp	r0, #0
 8006072:	d144      	bne.n	80060fe <__gethex+0x272>
 8006074:	f04f 0a02 	mov.w	sl, #2
 8006078:	4639      	mov	r1, r7
 800607a:	4620      	mov	r0, r4
 800607c:	f7ff fe9d 	bl	8005dba <rshift>
 8006080:	443d      	add	r5, r7
 8006082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006086:	42ab      	cmp	r3, r5
 8006088:	da4a      	bge.n	8006120 <__gethex+0x294>
 800608a:	4621      	mov	r1, r4
 800608c:	9802      	ldr	r0, [sp, #8]
 800608e:	f000 facf 	bl	8006630 <_Bfree>
 8006092:	2300      	movs	r3, #0
 8006094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006096:	27a3      	movs	r7, #163	; 0xa3
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e789      	b.n	8005fb0 <__gethex+0x124>
 800609c:	1e73      	subs	r3, r6, #1
 800609e:	9a07      	ldr	r2, [sp, #28]
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d019      	beq.n	80060de <__gethex+0x252>
 80060aa:	f1bb 0f20 	cmp.w	fp, #32
 80060ae:	d107      	bne.n	80060c0 <__gethex+0x234>
 80060b0:	9b04      	ldr	r3, [sp, #16]
 80060b2:	9a01      	ldr	r2, [sp, #4]
 80060b4:	f843 2b04 	str.w	r2, [r3], #4
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	2300      	movs	r3, #0
 80060bc:	469b      	mov	fp, r3
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80060c4:	f7ff fecc 	bl	8005e60 <__hexdig_fun>
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	f000 000f 	and.w	r0, r0, #15
 80060ce:	fa00 f00b 	lsl.w	r0, r0, fp
 80060d2:	4303      	orrs	r3, r0
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	f10b 0b04 	add.w	fp, fp, #4
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	e00d      	b.n	80060fa <__gethex+0x26e>
 80060de:	9b05      	ldr	r3, [sp, #20]
 80060e0:	9a08      	ldr	r2, [sp, #32]
 80060e2:	4413      	add	r3, r2
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	d3e0      	bcc.n	80060aa <__gethex+0x21e>
 80060e8:	4618      	mov	r0, r3
 80060ea:	4652      	mov	r2, sl
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	9309      	str	r3, [sp, #36]	; 0x24
 80060f0:	f001 f97f 	bl	80073f2 <strncmp>
 80060f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d1d7      	bne.n	80060aa <__gethex+0x21e>
 80060fa:	461e      	mov	r6, r3
 80060fc:	e78c      	b.n	8006018 <__gethex+0x18c>
 80060fe:	f04f 0a03 	mov.w	sl, #3
 8006102:	e7b9      	b.n	8006078 <__gethex+0x1ec>
 8006104:	da09      	bge.n	800611a <__gethex+0x28e>
 8006106:	1bf7      	subs	r7, r6, r7
 8006108:	4621      	mov	r1, r4
 800610a:	463a      	mov	r2, r7
 800610c:	9802      	ldr	r0, [sp, #8]
 800610e:	f000 fca7 	bl	8006a60 <__lshift>
 8006112:	4604      	mov	r4, r0
 8006114:	1bed      	subs	r5, r5, r7
 8006116:	f100 0914 	add.w	r9, r0, #20
 800611a:	f04f 0a00 	mov.w	sl, #0
 800611e:	e7b0      	b.n	8006082 <__gethex+0x1f6>
 8006120:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006124:	42a8      	cmp	r0, r5
 8006126:	dd71      	ble.n	800620c <__gethex+0x380>
 8006128:	1b45      	subs	r5, r0, r5
 800612a:	42ae      	cmp	r6, r5
 800612c:	dc34      	bgt.n	8006198 <__gethex+0x30c>
 800612e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d028      	beq.n	8006188 <__gethex+0x2fc>
 8006136:	2b03      	cmp	r3, #3
 8006138:	d02a      	beq.n	8006190 <__gethex+0x304>
 800613a:	2b01      	cmp	r3, #1
 800613c:	d115      	bne.n	800616a <__gethex+0x2de>
 800613e:	42ae      	cmp	r6, r5
 8006140:	d113      	bne.n	800616a <__gethex+0x2de>
 8006142:	2e01      	cmp	r6, #1
 8006144:	d10b      	bne.n	800615e <__gethex+0x2d2>
 8006146:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800614a:	9a06      	ldr	r2, [sp, #24]
 800614c:	2762      	movs	r7, #98	; 0x62
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	2301      	movs	r3, #1
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f8c9 3000 	str.w	r3, [r9]
 8006158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800615a:	601c      	str	r4, [r3, #0]
 800615c:	e728      	b.n	8005fb0 <__gethex+0x124>
 800615e:	4620      	mov	r0, r4
 8006160:	1e71      	subs	r1, r6, #1
 8006162:	f000 febc 	bl	8006ede <__any_on>
 8006166:	2800      	cmp	r0, #0
 8006168:	d1ed      	bne.n	8006146 <__gethex+0x2ba>
 800616a:	4621      	mov	r1, r4
 800616c:	9802      	ldr	r0, [sp, #8]
 800616e:	f000 fa5f 	bl	8006630 <_Bfree>
 8006172:	2300      	movs	r3, #0
 8006174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006176:	2750      	movs	r7, #80	; 0x50
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e719      	b.n	8005fb0 <__gethex+0x124>
 800617c:	080084dc 	.word	0x080084dc
 8006180:	080083fc 	.word	0x080083fc
 8006184:	08008470 	.word	0x08008470
 8006188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1ed      	bne.n	800616a <__gethex+0x2de>
 800618e:	e7da      	b.n	8006146 <__gethex+0x2ba>
 8006190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1d7      	bne.n	8006146 <__gethex+0x2ba>
 8006196:	e7e8      	b.n	800616a <__gethex+0x2de>
 8006198:	1e6f      	subs	r7, r5, #1
 800619a:	f1ba 0f00 	cmp.w	sl, #0
 800619e:	d132      	bne.n	8006206 <__gethex+0x37a>
 80061a0:	b127      	cbz	r7, 80061ac <__gethex+0x320>
 80061a2:	4639      	mov	r1, r7
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 fe9a 	bl	8006ede <__any_on>
 80061aa:	4682      	mov	sl, r0
 80061ac:	2101      	movs	r1, #1
 80061ae:	117b      	asrs	r3, r7, #5
 80061b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80061b4:	f007 071f 	and.w	r7, r7, #31
 80061b8:	fa01 f707 	lsl.w	r7, r1, r7
 80061bc:	421f      	tst	r7, r3
 80061be:	f04f 0702 	mov.w	r7, #2
 80061c2:	4629      	mov	r1, r5
 80061c4:	4620      	mov	r0, r4
 80061c6:	bf18      	it	ne
 80061c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80061cc:	1b76      	subs	r6, r6, r5
 80061ce:	f7ff fdf4 	bl	8005dba <rshift>
 80061d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80061d6:	f1ba 0f00 	cmp.w	sl, #0
 80061da:	d048      	beq.n	800626e <__gethex+0x3e2>
 80061dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d015      	beq.n	8006210 <__gethex+0x384>
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d017      	beq.n	8006218 <__gethex+0x38c>
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d109      	bne.n	8006200 <__gethex+0x374>
 80061ec:	f01a 0f02 	tst.w	sl, #2
 80061f0:	d006      	beq.n	8006200 <__gethex+0x374>
 80061f2:	f8d9 0000 	ldr.w	r0, [r9]
 80061f6:	ea4a 0a00 	orr.w	sl, sl, r0
 80061fa:	f01a 0f01 	tst.w	sl, #1
 80061fe:	d10e      	bne.n	800621e <__gethex+0x392>
 8006200:	f047 0710 	orr.w	r7, r7, #16
 8006204:	e033      	b.n	800626e <__gethex+0x3e2>
 8006206:	f04f 0a01 	mov.w	sl, #1
 800620a:	e7cf      	b.n	80061ac <__gethex+0x320>
 800620c:	2701      	movs	r7, #1
 800620e:	e7e2      	b.n	80061d6 <__gethex+0x34a>
 8006210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006212:	f1c3 0301 	rsb	r3, r3, #1
 8006216:	9315      	str	r3, [sp, #84]	; 0x54
 8006218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <__gethex+0x374>
 800621e:	f04f 0c00 	mov.w	ip, #0
 8006222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006226:	f104 0314 	add.w	r3, r4, #20
 800622a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800622e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006232:	4618      	mov	r0, r3
 8006234:	f853 2b04 	ldr.w	r2, [r3], #4
 8006238:	f1b2 3fff 	cmp.w	r2, #4294967295
 800623c:	d01c      	beq.n	8006278 <__gethex+0x3ec>
 800623e:	3201      	adds	r2, #1
 8006240:	6002      	str	r2, [r0, #0]
 8006242:	2f02      	cmp	r7, #2
 8006244:	f104 0314 	add.w	r3, r4, #20
 8006248:	d13d      	bne.n	80062c6 <__gethex+0x43a>
 800624a:	f8d8 2000 	ldr.w	r2, [r8]
 800624e:	3a01      	subs	r2, #1
 8006250:	42b2      	cmp	r2, r6
 8006252:	d10a      	bne.n	800626a <__gethex+0x3de>
 8006254:	2201      	movs	r2, #1
 8006256:	1171      	asrs	r1, r6, #5
 8006258:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800625c:	f006 061f 	and.w	r6, r6, #31
 8006260:	fa02 f606 	lsl.w	r6, r2, r6
 8006264:	421e      	tst	r6, r3
 8006266:	bf18      	it	ne
 8006268:	4617      	movne	r7, r2
 800626a:	f047 0720 	orr.w	r7, r7, #32
 800626e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006270:	601c      	str	r4, [r3, #0]
 8006272:	9b06      	ldr	r3, [sp, #24]
 8006274:	601d      	str	r5, [r3, #0]
 8006276:	e69b      	b.n	8005fb0 <__gethex+0x124>
 8006278:	4299      	cmp	r1, r3
 800627a:	f843 cc04 	str.w	ip, [r3, #-4]
 800627e:	d8d8      	bhi.n	8006232 <__gethex+0x3a6>
 8006280:	68a3      	ldr	r3, [r4, #8]
 8006282:	459b      	cmp	fp, r3
 8006284:	db17      	blt.n	80062b6 <__gethex+0x42a>
 8006286:	6861      	ldr	r1, [r4, #4]
 8006288:	9802      	ldr	r0, [sp, #8]
 800628a:	3101      	adds	r1, #1
 800628c:	f000 f990 	bl	80065b0 <_Balloc>
 8006290:	4681      	mov	r9, r0
 8006292:	b918      	cbnz	r0, 800629c <__gethex+0x410>
 8006294:	4602      	mov	r2, r0
 8006296:	2184      	movs	r1, #132	; 0x84
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <__gethex+0x474>)
 800629a:	e6ac      	b.n	8005ff6 <__gethex+0x16a>
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	f104 010c 	add.w	r1, r4, #12
 80062a2:	3202      	adds	r2, #2
 80062a4:	0092      	lsls	r2, r2, #2
 80062a6:	300c      	adds	r0, #12
 80062a8:	f7fc ff0c 	bl	80030c4 <memcpy>
 80062ac:	4621      	mov	r1, r4
 80062ae:	9802      	ldr	r0, [sp, #8]
 80062b0:	f000 f9be 	bl	8006630 <_Bfree>
 80062b4:	464c      	mov	r4, r9
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	2201      	movs	r2, #1
 80062be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062c2:	615a      	str	r2, [r3, #20]
 80062c4:	e7bd      	b.n	8006242 <__gethex+0x3b6>
 80062c6:	6922      	ldr	r2, [r4, #16]
 80062c8:	455a      	cmp	r2, fp
 80062ca:	dd0b      	ble.n	80062e4 <__gethex+0x458>
 80062cc:	2101      	movs	r1, #1
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff fd73 	bl	8005dba <rshift>
 80062d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062d8:	3501      	adds	r5, #1
 80062da:	42ab      	cmp	r3, r5
 80062dc:	f6ff aed5 	blt.w	800608a <__gethex+0x1fe>
 80062e0:	2701      	movs	r7, #1
 80062e2:	e7c2      	b.n	800626a <__gethex+0x3de>
 80062e4:	f016 061f 	ands.w	r6, r6, #31
 80062e8:	d0fa      	beq.n	80062e0 <__gethex+0x454>
 80062ea:	449a      	add	sl, r3
 80062ec:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80062f0:	f000 fa54 	bl	800679c <__hi0bits>
 80062f4:	f1c6 0620 	rsb	r6, r6, #32
 80062f8:	42b0      	cmp	r0, r6
 80062fa:	dbe7      	blt.n	80062cc <__gethex+0x440>
 80062fc:	e7f0      	b.n	80062e0 <__gethex+0x454>
 80062fe:	bf00      	nop
 8006300:	080083fc 	.word	0x080083fc

08006304 <L_shift>:
 8006304:	f1c2 0208 	rsb	r2, r2, #8
 8006308:	0092      	lsls	r2, r2, #2
 800630a:	b570      	push	{r4, r5, r6, lr}
 800630c:	f1c2 0620 	rsb	r6, r2, #32
 8006310:	6843      	ldr	r3, [r0, #4]
 8006312:	6804      	ldr	r4, [r0, #0]
 8006314:	fa03 f506 	lsl.w	r5, r3, r6
 8006318:	432c      	orrs	r4, r5
 800631a:	40d3      	lsrs	r3, r2
 800631c:	6004      	str	r4, [r0, #0]
 800631e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006322:	4288      	cmp	r0, r1
 8006324:	d3f4      	bcc.n	8006310 <L_shift+0xc>
 8006326:	bd70      	pop	{r4, r5, r6, pc}

08006328 <__match>:
 8006328:	b530      	push	{r4, r5, lr}
 800632a:	6803      	ldr	r3, [r0, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006332:	b914      	cbnz	r4, 800633a <__match+0x12>
 8006334:	6003      	str	r3, [r0, #0]
 8006336:	2001      	movs	r0, #1
 8006338:	bd30      	pop	{r4, r5, pc}
 800633a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800633e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006342:	2d19      	cmp	r5, #25
 8006344:	bf98      	it	ls
 8006346:	3220      	addls	r2, #32
 8006348:	42a2      	cmp	r2, r4
 800634a:	d0f0      	beq.n	800632e <__match+0x6>
 800634c:	2000      	movs	r0, #0
 800634e:	e7f3      	b.n	8006338 <__match+0x10>

08006350 <__hexnan>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	2500      	movs	r5, #0
 8006356:	680b      	ldr	r3, [r1, #0]
 8006358:	4682      	mov	sl, r0
 800635a:	115e      	asrs	r6, r3, #5
 800635c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006360:	f013 031f 	ands.w	r3, r3, #31
 8006364:	bf18      	it	ne
 8006366:	3604      	addne	r6, #4
 8006368:	1f37      	subs	r7, r6, #4
 800636a:	4690      	mov	r8, r2
 800636c:	46b9      	mov	r9, r7
 800636e:	463c      	mov	r4, r7
 8006370:	46ab      	mov	fp, r5
 8006372:	b087      	sub	sp, #28
 8006374:	6801      	ldr	r1, [r0, #0]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	f846 5c04 	str.w	r5, [r6, #-4]
 800637c:	9502      	str	r5, [sp, #8]
 800637e:	784a      	ldrb	r2, [r1, #1]
 8006380:	1c4b      	adds	r3, r1, #1
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	b342      	cbz	r2, 80063d8 <__hexnan+0x88>
 8006386:	4610      	mov	r0, r2
 8006388:	9105      	str	r1, [sp, #20]
 800638a:	9204      	str	r2, [sp, #16]
 800638c:	f7ff fd68 	bl	8005e60 <__hexdig_fun>
 8006390:	2800      	cmp	r0, #0
 8006392:	d14f      	bne.n	8006434 <__hexnan+0xe4>
 8006394:	9a04      	ldr	r2, [sp, #16]
 8006396:	9905      	ldr	r1, [sp, #20]
 8006398:	2a20      	cmp	r2, #32
 800639a:	d818      	bhi.n	80063ce <__hexnan+0x7e>
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	459b      	cmp	fp, r3
 80063a0:	dd13      	ble.n	80063ca <__hexnan+0x7a>
 80063a2:	454c      	cmp	r4, r9
 80063a4:	d206      	bcs.n	80063b4 <__hexnan+0x64>
 80063a6:	2d07      	cmp	r5, #7
 80063a8:	dc04      	bgt.n	80063b4 <__hexnan+0x64>
 80063aa:	462a      	mov	r2, r5
 80063ac:	4649      	mov	r1, r9
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff ffa8 	bl	8006304 <L_shift>
 80063b4:	4544      	cmp	r4, r8
 80063b6:	d950      	bls.n	800645a <__hexnan+0x10a>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f1a4 0904 	sub.w	r9, r4, #4
 80063be:	f844 3c04 	str.w	r3, [r4, #-4]
 80063c2:	461d      	mov	r5, r3
 80063c4:	464c      	mov	r4, r9
 80063c6:	f8cd b008 	str.w	fp, [sp, #8]
 80063ca:	9903      	ldr	r1, [sp, #12]
 80063cc:	e7d7      	b.n	800637e <__hexnan+0x2e>
 80063ce:	2a29      	cmp	r2, #41	; 0x29
 80063d0:	d156      	bne.n	8006480 <__hexnan+0x130>
 80063d2:	3102      	adds	r1, #2
 80063d4:	f8ca 1000 	str.w	r1, [sl]
 80063d8:	f1bb 0f00 	cmp.w	fp, #0
 80063dc:	d050      	beq.n	8006480 <__hexnan+0x130>
 80063de:	454c      	cmp	r4, r9
 80063e0:	d206      	bcs.n	80063f0 <__hexnan+0xa0>
 80063e2:	2d07      	cmp	r5, #7
 80063e4:	dc04      	bgt.n	80063f0 <__hexnan+0xa0>
 80063e6:	462a      	mov	r2, r5
 80063e8:	4649      	mov	r1, r9
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7ff ff8a 	bl	8006304 <L_shift>
 80063f0:	4544      	cmp	r4, r8
 80063f2:	d934      	bls.n	800645e <__hexnan+0x10e>
 80063f4:	4623      	mov	r3, r4
 80063f6:	f1a8 0204 	sub.w	r2, r8, #4
 80063fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80063fe:	429f      	cmp	r7, r3
 8006400:	f842 1f04 	str.w	r1, [r2, #4]!
 8006404:	d2f9      	bcs.n	80063fa <__hexnan+0xaa>
 8006406:	1b3b      	subs	r3, r7, r4
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	3304      	adds	r3, #4
 800640e:	3401      	adds	r4, #1
 8006410:	3e03      	subs	r6, #3
 8006412:	42b4      	cmp	r4, r6
 8006414:	bf88      	it	hi
 8006416:	2304      	movhi	r3, #4
 8006418:	2200      	movs	r2, #0
 800641a:	4443      	add	r3, r8
 800641c:	f843 2b04 	str.w	r2, [r3], #4
 8006420:	429f      	cmp	r7, r3
 8006422:	d2fb      	bcs.n	800641c <__hexnan+0xcc>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	b91b      	cbnz	r3, 8006430 <__hexnan+0xe0>
 8006428:	4547      	cmp	r7, r8
 800642a:	d127      	bne.n	800647c <__hexnan+0x12c>
 800642c:	2301      	movs	r3, #1
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	2005      	movs	r0, #5
 8006432:	e026      	b.n	8006482 <__hexnan+0x132>
 8006434:	3501      	adds	r5, #1
 8006436:	2d08      	cmp	r5, #8
 8006438:	f10b 0b01 	add.w	fp, fp, #1
 800643c:	dd06      	ble.n	800644c <__hexnan+0xfc>
 800643e:	4544      	cmp	r4, r8
 8006440:	d9c3      	bls.n	80063ca <__hexnan+0x7a>
 8006442:	2300      	movs	r3, #0
 8006444:	2501      	movs	r5, #1
 8006446:	f844 3c04 	str.w	r3, [r4, #-4]
 800644a:	3c04      	subs	r4, #4
 800644c:	6822      	ldr	r2, [r4, #0]
 800644e:	f000 000f 	and.w	r0, r0, #15
 8006452:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006456:	6022      	str	r2, [r4, #0]
 8006458:	e7b7      	b.n	80063ca <__hexnan+0x7a>
 800645a:	2508      	movs	r5, #8
 800645c:	e7b5      	b.n	80063ca <__hexnan+0x7a>
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0df      	beq.n	8006424 <__hexnan+0xd4>
 8006464:	f04f 32ff 	mov.w	r2, #4294967295
 8006468:	f1c3 0320 	rsb	r3, r3, #32
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
 8006470:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006474:	401a      	ands	r2, r3
 8006476:	f846 2c04 	str.w	r2, [r6, #-4]
 800647a:	e7d3      	b.n	8006424 <__hexnan+0xd4>
 800647c:	3f04      	subs	r7, #4
 800647e:	e7d1      	b.n	8006424 <__hexnan+0xd4>
 8006480:	2004      	movs	r0, #4
 8006482:	b007      	add	sp, #28
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006488 <_localeconv_r>:
 8006488:	4800      	ldr	r0, [pc, #0]	; (800648c <_localeconv_r+0x4>)
 800648a:	4770      	bx	lr
 800648c:	20000168 	.word	0x20000168

08006490 <__retarget_lock_init_recursive>:
 8006490:	4770      	bx	lr

08006492 <__retarget_lock_acquire_recursive>:
 8006492:	4770      	bx	lr

08006494 <__retarget_lock_release_recursive>:
 8006494:	4770      	bx	lr

08006496 <__swhatbuf_r>:
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	460e      	mov	r6, r1
 800649a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649e:	4614      	mov	r4, r2
 80064a0:	2900      	cmp	r1, #0
 80064a2:	461d      	mov	r5, r3
 80064a4:	b096      	sub	sp, #88	; 0x58
 80064a6:	da07      	bge.n	80064b8 <__swhatbuf_r+0x22>
 80064a8:	2300      	movs	r3, #0
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	89b3      	ldrh	r3, [r6, #12]
 80064ae:	061a      	lsls	r2, r3, #24
 80064b0:	d410      	bmi.n	80064d4 <__swhatbuf_r+0x3e>
 80064b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b6:	e00e      	b.n	80064d6 <__swhatbuf_r+0x40>
 80064b8:	466a      	mov	r2, sp
 80064ba:	f001 f80b 	bl	80074d4 <_fstat_r>
 80064be:	2800      	cmp	r0, #0
 80064c0:	dbf2      	blt.n	80064a8 <__swhatbuf_r+0x12>
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064cc:	425a      	negs	r2, r3
 80064ce:	415a      	adcs	r2, r3
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	e7ee      	b.n	80064b2 <__swhatbuf_r+0x1c>
 80064d4:	2340      	movs	r3, #64	; 0x40
 80064d6:	2000      	movs	r0, #0
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	b016      	add	sp, #88	; 0x58
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080064e0 <__smakebuf_r>:
 80064e0:	898b      	ldrh	r3, [r1, #12]
 80064e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064e4:	079d      	lsls	r5, r3, #30
 80064e6:	4606      	mov	r6, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	d507      	bpl.n	80064fc <__smakebuf_r+0x1c>
 80064ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	6123      	str	r3, [r4, #16]
 80064f4:	2301      	movs	r3, #1
 80064f6:	6163      	str	r3, [r4, #20]
 80064f8:	b002      	add	sp, #8
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	466a      	mov	r2, sp
 80064fe:	ab01      	add	r3, sp, #4
 8006500:	f7ff ffc9 	bl	8006496 <__swhatbuf_r>
 8006504:	9900      	ldr	r1, [sp, #0]
 8006506:	4605      	mov	r5, r0
 8006508:	4630      	mov	r0, r6
 800650a:	f000 fd63 	bl	8006fd4 <_malloc_r>
 800650e:	b948      	cbnz	r0, 8006524 <__smakebuf_r+0x44>
 8006510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006514:	059a      	lsls	r2, r3, #22
 8006516:	d4ef      	bmi.n	80064f8 <__smakebuf_r+0x18>
 8006518:	f023 0303 	bic.w	r3, r3, #3
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	e7e3      	b.n	80064ec <__smakebuf_r+0xc>
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <__smakebuf_r+0x7c>)
 8006526:	62b3      	str	r3, [r6, #40]	; 0x28
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	6020      	str	r0, [r4, #0]
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	6120      	str	r0, [r4, #16]
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	b15b      	cbz	r3, 8006554 <__smakebuf_r+0x74>
 800653c:	4630      	mov	r0, r6
 800653e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006542:	f000 ffd9 	bl	80074f8 <_isatty_r>
 8006546:	b128      	cbz	r0, 8006554 <__smakebuf_r+0x74>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	89a0      	ldrh	r0, [r4, #12]
 8006556:	4305      	orrs	r5, r0
 8006558:	81a5      	strh	r5, [r4, #12]
 800655a:	e7cd      	b.n	80064f8 <__smakebuf_r+0x18>
 800655c:	08005c19 	.word	0x08005c19

08006560 <malloc>:
 8006560:	4b02      	ldr	r3, [pc, #8]	; (800656c <malloc+0xc>)
 8006562:	4601      	mov	r1, r0
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	f000 bd35 	b.w	8006fd4 <_malloc_r>
 800656a:	bf00      	nop
 800656c:	20000010 	.word	0x20000010

08006570 <__ascii_mbtowc>:
 8006570:	b082      	sub	sp, #8
 8006572:	b901      	cbnz	r1, 8006576 <__ascii_mbtowc+0x6>
 8006574:	a901      	add	r1, sp, #4
 8006576:	b142      	cbz	r2, 800658a <__ascii_mbtowc+0x1a>
 8006578:	b14b      	cbz	r3, 800658e <__ascii_mbtowc+0x1e>
 800657a:	7813      	ldrb	r3, [r2, #0]
 800657c:	600b      	str	r3, [r1, #0]
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	1e10      	subs	r0, r2, #0
 8006582:	bf18      	it	ne
 8006584:	2001      	movne	r0, #1
 8006586:	b002      	add	sp, #8
 8006588:	4770      	bx	lr
 800658a:	4610      	mov	r0, r2
 800658c:	e7fb      	b.n	8006586 <__ascii_mbtowc+0x16>
 800658e:	f06f 0001 	mvn.w	r0, #1
 8006592:	e7f8      	b.n	8006586 <__ascii_mbtowc+0x16>

08006594 <memchr>:
 8006594:	4603      	mov	r3, r0
 8006596:	b510      	push	{r4, lr}
 8006598:	b2c9      	uxtb	r1, r1
 800659a:	4402      	add	r2, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	d101      	bne.n	80065a6 <memchr+0x12>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e003      	b.n	80065ae <memchr+0x1a>
 80065a6:	7804      	ldrb	r4, [r0, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	428c      	cmp	r4, r1
 80065ac:	d1f6      	bne.n	800659c <memchr+0x8>
 80065ae:	bd10      	pop	{r4, pc}

080065b0 <_Balloc>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065b4:	4604      	mov	r4, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	b976      	cbnz	r6, 80065d8 <_Balloc+0x28>
 80065ba:	2010      	movs	r0, #16
 80065bc:	f7ff ffd0 	bl	8006560 <malloc>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6260      	str	r0, [r4, #36]	; 0x24
 80065c4:	b920      	cbnz	r0, 80065d0 <_Balloc+0x20>
 80065c6:	2166      	movs	r1, #102	; 0x66
 80065c8:	4b17      	ldr	r3, [pc, #92]	; (8006628 <_Balloc+0x78>)
 80065ca:	4818      	ldr	r0, [pc, #96]	; (800662c <_Balloc+0x7c>)
 80065cc:	f000 ff42 	bl	8007454 <__assert_func>
 80065d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065d4:	6006      	str	r6, [r0, #0]
 80065d6:	60c6      	str	r6, [r0, #12]
 80065d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065da:	68f3      	ldr	r3, [r6, #12]
 80065dc:	b183      	cbz	r3, 8006600 <_Balloc+0x50>
 80065de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065e6:	b9b8      	cbnz	r0, 8006618 <_Balloc+0x68>
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f605 	lsl.w	r6, r1, r5
 80065ee:	1d72      	adds	r2, r6, #5
 80065f0:	4620      	mov	r0, r4
 80065f2:	0092      	lsls	r2, r2, #2
 80065f4:	f000 fc94 	bl	8006f20 <_calloc_r>
 80065f8:	b160      	cbz	r0, 8006614 <_Balloc+0x64>
 80065fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065fe:	e00e      	b.n	800661e <_Balloc+0x6e>
 8006600:	2221      	movs	r2, #33	; 0x21
 8006602:	2104      	movs	r1, #4
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fc8b 	bl	8006f20 <_calloc_r>
 800660a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660c:	60f0      	str	r0, [r6, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e4      	bne.n	80065de <_Balloc+0x2e>
 8006614:	2000      	movs	r0, #0
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	6802      	ldr	r2, [r0, #0]
 800661a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800661e:	2300      	movs	r3, #0
 8006620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006624:	e7f7      	b.n	8006616 <_Balloc+0x66>
 8006626:	bf00      	nop
 8006628:	08008386 	.word	0x08008386
 800662c:	080084f0 	.word	0x080084f0

08006630 <_Bfree>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	b976      	cbnz	r6, 8006658 <_Bfree+0x28>
 800663a:	2010      	movs	r0, #16
 800663c:	f7ff ff90 	bl	8006560 <malloc>
 8006640:	4602      	mov	r2, r0
 8006642:	6268      	str	r0, [r5, #36]	; 0x24
 8006644:	b920      	cbnz	r0, 8006650 <_Bfree+0x20>
 8006646:	218a      	movs	r1, #138	; 0x8a
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <_Bfree+0x3c>)
 800664a:	4809      	ldr	r0, [pc, #36]	; (8006670 <_Bfree+0x40>)
 800664c:	f000 ff02 	bl	8007454 <__assert_func>
 8006650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006654:	6006      	str	r6, [r0, #0]
 8006656:	60c6      	str	r6, [r0, #12]
 8006658:	b13c      	cbz	r4, 800666a <_Bfree+0x3a>
 800665a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800665c:	6862      	ldr	r2, [r4, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006664:	6021      	str	r1, [r4, #0]
 8006666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	08008386 	.word	0x08008386
 8006670:	080084f0 	.word	0x080084f0

08006674 <__multadd>:
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	4698      	mov	r8, r3
 800667a:	460c      	mov	r4, r1
 800667c:	2300      	movs	r3, #0
 800667e:	690e      	ldr	r6, [r1, #16]
 8006680:	4607      	mov	r7, r0
 8006682:	f101 0014 	add.w	r0, r1, #20
 8006686:	6805      	ldr	r5, [r0, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	b2a9      	uxth	r1, r5
 800668c:	fb02 8101 	mla	r1, r2, r1, r8
 8006690:	0c2d      	lsrs	r5, r5, #16
 8006692:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006696:	fb02 c505 	mla	r5, r2, r5, ip
 800669a:	b289      	uxth	r1, r1
 800669c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80066a0:	429e      	cmp	r6, r3
 80066a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066a6:	f840 1b04 	str.w	r1, [r0], #4
 80066aa:	dcec      	bgt.n	8006686 <__multadd+0x12>
 80066ac:	f1b8 0f00 	cmp.w	r8, #0
 80066b0:	d022      	beq.n	80066f8 <__multadd+0x84>
 80066b2:	68a3      	ldr	r3, [r4, #8]
 80066b4:	42b3      	cmp	r3, r6
 80066b6:	dc19      	bgt.n	80066ec <__multadd+0x78>
 80066b8:	6861      	ldr	r1, [r4, #4]
 80066ba:	4638      	mov	r0, r7
 80066bc:	3101      	adds	r1, #1
 80066be:	f7ff ff77 	bl	80065b0 <_Balloc>
 80066c2:	4605      	mov	r5, r0
 80066c4:	b928      	cbnz	r0, 80066d2 <__multadd+0x5e>
 80066c6:	4602      	mov	r2, r0
 80066c8:	21b5      	movs	r1, #181	; 0xb5
 80066ca:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <__multadd+0x8c>)
 80066cc:	480d      	ldr	r0, [pc, #52]	; (8006704 <__multadd+0x90>)
 80066ce:	f000 fec1 	bl	8007454 <__assert_func>
 80066d2:	6922      	ldr	r2, [r4, #16]
 80066d4:	f104 010c 	add.w	r1, r4, #12
 80066d8:	3202      	adds	r2, #2
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	300c      	adds	r0, #12
 80066de:	f7fc fcf1 	bl	80030c4 <memcpy>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ffa3 	bl	8006630 <_Bfree>
 80066ea:	462c      	mov	r4, r5
 80066ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80066f0:	3601      	adds	r6, #1
 80066f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80066f6:	6126      	str	r6, [r4, #16]
 80066f8:	4620      	mov	r0, r4
 80066fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fe:	bf00      	nop
 8006700:	080083fc 	.word	0x080083fc
 8006704:	080084f0 	.word	0x080084f0

08006708 <__s2b>:
 8006708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800670c:	4615      	mov	r5, r2
 800670e:	2209      	movs	r2, #9
 8006710:	461f      	mov	r7, r3
 8006712:	3308      	adds	r3, #8
 8006714:	460c      	mov	r4, r1
 8006716:	fb93 f3f2 	sdiv	r3, r3, r2
 800671a:	4606      	mov	r6, r0
 800671c:	2201      	movs	r2, #1
 800671e:	2100      	movs	r1, #0
 8006720:	429a      	cmp	r2, r3
 8006722:	db09      	blt.n	8006738 <__s2b+0x30>
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff ff43 	bl	80065b0 <_Balloc>
 800672a:	b940      	cbnz	r0, 800673e <__s2b+0x36>
 800672c:	4602      	mov	r2, r0
 800672e:	21ce      	movs	r1, #206	; 0xce
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <__s2b+0x8c>)
 8006732:	4819      	ldr	r0, [pc, #100]	; (8006798 <__s2b+0x90>)
 8006734:	f000 fe8e 	bl	8007454 <__assert_func>
 8006738:	0052      	lsls	r2, r2, #1
 800673a:	3101      	adds	r1, #1
 800673c:	e7f0      	b.n	8006720 <__s2b+0x18>
 800673e:	9b08      	ldr	r3, [sp, #32]
 8006740:	2d09      	cmp	r5, #9
 8006742:	6143      	str	r3, [r0, #20]
 8006744:	f04f 0301 	mov.w	r3, #1
 8006748:	6103      	str	r3, [r0, #16]
 800674a:	dd16      	ble.n	800677a <__s2b+0x72>
 800674c:	f104 0909 	add.w	r9, r4, #9
 8006750:	46c8      	mov	r8, r9
 8006752:	442c      	add	r4, r5
 8006754:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006758:	4601      	mov	r1, r0
 800675a:	220a      	movs	r2, #10
 800675c:	4630      	mov	r0, r6
 800675e:	3b30      	subs	r3, #48	; 0x30
 8006760:	f7ff ff88 	bl	8006674 <__multadd>
 8006764:	45a0      	cmp	r8, r4
 8006766:	d1f5      	bne.n	8006754 <__s2b+0x4c>
 8006768:	f1a5 0408 	sub.w	r4, r5, #8
 800676c:	444c      	add	r4, r9
 800676e:	1b2d      	subs	r5, r5, r4
 8006770:	1963      	adds	r3, r4, r5
 8006772:	42bb      	cmp	r3, r7
 8006774:	db04      	blt.n	8006780 <__s2b+0x78>
 8006776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677a:	2509      	movs	r5, #9
 800677c:	340a      	adds	r4, #10
 800677e:	e7f6      	b.n	800676e <__s2b+0x66>
 8006780:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006784:	4601      	mov	r1, r0
 8006786:	220a      	movs	r2, #10
 8006788:	4630      	mov	r0, r6
 800678a:	3b30      	subs	r3, #48	; 0x30
 800678c:	f7ff ff72 	bl	8006674 <__multadd>
 8006790:	e7ee      	b.n	8006770 <__s2b+0x68>
 8006792:	bf00      	nop
 8006794:	080083fc 	.word	0x080083fc
 8006798:	080084f0 	.word	0x080084f0

0800679c <__hi0bits>:
 800679c:	0c02      	lsrs	r2, r0, #16
 800679e:	0412      	lsls	r2, r2, #16
 80067a0:	4603      	mov	r3, r0
 80067a2:	b9ca      	cbnz	r2, 80067d8 <__hi0bits+0x3c>
 80067a4:	0403      	lsls	r3, r0, #16
 80067a6:	2010      	movs	r0, #16
 80067a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067ac:	bf04      	itt	eq
 80067ae:	021b      	lsleq	r3, r3, #8
 80067b0:	3008      	addeq	r0, #8
 80067b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067b6:	bf04      	itt	eq
 80067b8:	011b      	lsleq	r3, r3, #4
 80067ba:	3004      	addeq	r0, #4
 80067bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067c0:	bf04      	itt	eq
 80067c2:	009b      	lsleq	r3, r3, #2
 80067c4:	3002      	addeq	r0, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	db05      	blt.n	80067d6 <__hi0bits+0x3a>
 80067ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80067ce:	f100 0001 	add.w	r0, r0, #1
 80067d2:	bf08      	it	eq
 80067d4:	2020      	moveq	r0, #32
 80067d6:	4770      	bx	lr
 80067d8:	2000      	movs	r0, #0
 80067da:	e7e5      	b.n	80067a8 <__hi0bits+0xc>

080067dc <__lo0bits>:
 80067dc:	6803      	ldr	r3, [r0, #0]
 80067de:	4602      	mov	r2, r0
 80067e0:	f013 0007 	ands.w	r0, r3, #7
 80067e4:	d00b      	beq.n	80067fe <__lo0bits+0x22>
 80067e6:	07d9      	lsls	r1, r3, #31
 80067e8:	d422      	bmi.n	8006830 <__lo0bits+0x54>
 80067ea:	0798      	lsls	r0, r3, #30
 80067ec:	bf49      	itett	mi
 80067ee:	085b      	lsrmi	r3, r3, #1
 80067f0:	089b      	lsrpl	r3, r3, #2
 80067f2:	2001      	movmi	r0, #1
 80067f4:	6013      	strmi	r3, [r2, #0]
 80067f6:	bf5c      	itt	pl
 80067f8:	2002      	movpl	r0, #2
 80067fa:	6013      	strpl	r3, [r2, #0]
 80067fc:	4770      	bx	lr
 80067fe:	b299      	uxth	r1, r3
 8006800:	b909      	cbnz	r1, 8006806 <__lo0bits+0x2a>
 8006802:	2010      	movs	r0, #16
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	f013 0fff 	tst.w	r3, #255	; 0xff
 800680a:	bf04      	itt	eq
 800680c:	0a1b      	lsreq	r3, r3, #8
 800680e:	3008      	addeq	r0, #8
 8006810:	0719      	lsls	r1, r3, #28
 8006812:	bf04      	itt	eq
 8006814:	091b      	lsreq	r3, r3, #4
 8006816:	3004      	addeq	r0, #4
 8006818:	0799      	lsls	r1, r3, #30
 800681a:	bf04      	itt	eq
 800681c:	089b      	lsreq	r3, r3, #2
 800681e:	3002      	addeq	r0, #2
 8006820:	07d9      	lsls	r1, r3, #31
 8006822:	d403      	bmi.n	800682c <__lo0bits+0x50>
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	f100 0001 	add.w	r0, r0, #1
 800682a:	d003      	beq.n	8006834 <__lo0bits+0x58>
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4770      	bx	lr
 8006830:	2000      	movs	r0, #0
 8006832:	4770      	bx	lr
 8006834:	2020      	movs	r0, #32
 8006836:	4770      	bx	lr

08006838 <__i2b>:
 8006838:	b510      	push	{r4, lr}
 800683a:	460c      	mov	r4, r1
 800683c:	2101      	movs	r1, #1
 800683e:	f7ff feb7 	bl	80065b0 <_Balloc>
 8006842:	4602      	mov	r2, r0
 8006844:	b928      	cbnz	r0, 8006852 <__i2b+0x1a>
 8006846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800684a:	4b04      	ldr	r3, [pc, #16]	; (800685c <__i2b+0x24>)
 800684c:	4804      	ldr	r0, [pc, #16]	; (8006860 <__i2b+0x28>)
 800684e:	f000 fe01 	bl	8007454 <__assert_func>
 8006852:	2301      	movs	r3, #1
 8006854:	6144      	str	r4, [r0, #20]
 8006856:	6103      	str	r3, [r0, #16]
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	080083fc 	.word	0x080083fc
 8006860:	080084f0 	.word	0x080084f0

08006864 <__multiply>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	4614      	mov	r4, r2
 800686a:	690a      	ldr	r2, [r1, #16]
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	460d      	mov	r5, r1
 8006870:	429a      	cmp	r2, r3
 8006872:	bfbe      	ittt	lt
 8006874:	460b      	movlt	r3, r1
 8006876:	4625      	movlt	r5, r4
 8006878:	461c      	movlt	r4, r3
 800687a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800687e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006882:	68ab      	ldr	r3, [r5, #8]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	eb0a 0709 	add.w	r7, sl, r9
 800688a:	42bb      	cmp	r3, r7
 800688c:	b085      	sub	sp, #20
 800688e:	bfb8      	it	lt
 8006890:	3101      	addlt	r1, #1
 8006892:	f7ff fe8d 	bl	80065b0 <_Balloc>
 8006896:	b930      	cbnz	r0, 80068a6 <__multiply+0x42>
 8006898:	4602      	mov	r2, r0
 800689a:	f240 115d 	movw	r1, #349	; 0x15d
 800689e:	4b41      	ldr	r3, [pc, #260]	; (80069a4 <__multiply+0x140>)
 80068a0:	4841      	ldr	r0, [pc, #260]	; (80069a8 <__multiply+0x144>)
 80068a2:	f000 fdd7 	bl	8007454 <__assert_func>
 80068a6:	f100 0614 	add.w	r6, r0, #20
 80068aa:	4633      	mov	r3, r6
 80068ac:	2200      	movs	r2, #0
 80068ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80068b2:	4543      	cmp	r3, r8
 80068b4:	d31e      	bcc.n	80068f4 <__multiply+0x90>
 80068b6:	f105 0c14 	add.w	ip, r5, #20
 80068ba:	f104 0314 	add.w	r3, r4, #20
 80068be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80068c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80068c6:	9202      	str	r2, [sp, #8]
 80068c8:	ebac 0205 	sub.w	r2, ip, r5
 80068cc:	3a15      	subs	r2, #21
 80068ce:	f022 0203 	bic.w	r2, r2, #3
 80068d2:	3204      	adds	r2, #4
 80068d4:	f105 0115 	add.w	r1, r5, #21
 80068d8:	458c      	cmp	ip, r1
 80068da:	bf38      	it	cc
 80068dc:	2204      	movcc	r2, #4
 80068de:	9201      	str	r2, [sp, #4]
 80068e0:	9a02      	ldr	r2, [sp, #8]
 80068e2:	9303      	str	r3, [sp, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d808      	bhi.n	80068fa <__multiply+0x96>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	dc55      	bgt.n	8006998 <__multiply+0x134>
 80068ec:	6107      	str	r7, [r0, #16]
 80068ee:	b005      	add	sp, #20
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	f843 2b04 	str.w	r2, [r3], #4
 80068f8:	e7db      	b.n	80068b2 <__multiply+0x4e>
 80068fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80068fe:	f1ba 0f00 	cmp.w	sl, #0
 8006902:	d020      	beq.n	8006946 <__multiply+0xe2>
 8006904:	46b1      	mov	r9, r6
 8006906:	2200      	movs	r2, #0
 8006908:	f105 0e14 	add.w	lr, r5, #20
 800690c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006910:	f8d9 b000 	ldr.w	fp, [r9]
 8006914:	b2a1      	uxth	r1, r4
 8006916:	fa1f fb8b 	uxth.w	fp, fp
 800691a:	fb0a b101 	mla	r1, sl, r1, fp
 800691e:	4411      	add	r1, r2
 8006920:	f8d9 2000 	ldr.w	r2, [r9]
 8006924:	0c24      	lsrs	r4, r4, #16
 8006926:	0c12      	lsrs	r2, r2, #16
 8006928:	fb0a 2404 	mla	r4, sl, r4, r2
 800692c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006930:	b289      	uxth	r1, r1
 8006932:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006936:	45f4      	cmp	ip, lr
 8006938:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800693c:	f849 1b04 	str.w	r1, [r9], #4
 8006940:	d8e4      	bhi.n	800690c <__multiply+0xa8>
 8006942:	9901      	ldr	r1, [sp, #4]
 8006944:	5072      	str	r2, [r6, r1]
 8006946:	9a03      	ldr	r2, [sp, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800694e:	f1b9 0f00 	cmp.w	r9, #0
 8006952:	d01f      	beq.n	8006994 <__multiply+0x130>
 8006954:	46b6      	mov	lr, r6
 8006956:	f04f 0a00 	mov.w	sl, #0
 800695a:	6834      	ldr	r4, [r6, #0]
 800695c:	f105 0114 	add.w	r1, r5, #20
 8006960:	880a      	ldrh	r2, [r1, #0]
 8006962:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006966:	b2a4      	uxth	r4, r4
 8006968:	fb09 b202 	mla	r2, r9, r2, fp
 800696c:	4492      	add	sl, r2
 800696e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006972:	f84e 4b04 	str.w	r4, [lr], #4
 8006976:	f851 4b04 	ldr.w	r4, [r1], #4
 800697a:	f8be 2000 	ldrh.w	r2, [lr]
 800697e:	0c24      	lsrs	r4, r4, #16
 8006980:	fb09 2404 	mla	r4, r9, r4, r2
 8006984:	458c      	cmp	ip, r1
 8006986:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800698a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800698e:	d8e7      	bhi.n	8006960 <__multiply+0xfc>
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	50b4      	str	r4, [r6, r2]
 8006994:	3604      	adds	r6, #4
 8006996:	e7a3      	b.n	80068e0 <__multiply+0x7c>
 8006998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1a5      	bne.n	80068ec <__multiply+0x88>
 80069a0:	3f01      	subs	r7, #1
 80069a2:	e7a1      	b.n	80068e8 <__multiply+0x84>
 80069a4:	080083fc 	.word	0x080083fc
 80069a8:	080084f0 	.word	0x080084f0

080069ac <__pow5mult>:
 80069ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b0:	4615      	mov	r5, r2
 80069b2:	f012 0203 	ands.w	r2, r2, #3
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	d007      	beq.n	80069cc <__pow5mult+0x20>
 80069bc:	4c25      	ldr	r4, [pc, #148]	; (8006a54 <__pow5mult+0xa8>)
 80069be:	3a01      	subs	r2, #1
 80069c0:	2300      	movs	r3, #0
 80069c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069c6:	f7ff fe55 	bl	8006674 <__multadd>
 80069ca:	4607      	mov	r7, r0
 80069cc:	10ad      	asrs	r5, r5, #2
 80069ce:	d03d      	beq.n	8006a4c <__pow5mult+0xa0>
 80069d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069d2:	b97c      	cbnz	r4, 80069f4 <__pow5mult+0x48>
 80069d4:	2010      	movs	r0, #16
 80069d6:	f7ff fdc3 	bl	8006560 <malloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	6270      	str	r0, [r6, #36]	; 0x24
 80069de:	b928      	cbnz	r0, 80069ec <__pow5mult+0x40>
 80069e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069e4:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <__pow5mult+0xac>)
 80069e6:	481d      	ldr	r0, [pc, #116]	; (8006a5c <__pow5mult+0xb0>)
 80069e8:	f000 fd34 	bl	8007454 <__assert_func>
 80069ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f0:	6004      	str	r4, [r0, #0]
 80069f2:	60c4      	str	r4, [r0, #12]
 80069f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069fc:	b94c      	cbnz	r4, 8006a12 <__pow5mult+0x66>
 80069fe:	f240 2171 	movw	r1, #625	; 0x271
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff ff18 	bl	8006838 <__i2b>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	f04f 0900 	mov.w	r9, #0
 8006a16:	07eb      	lsls	r3, r5, #31
 8006a18:	d50a      	bpl.n	8006a30 <__pow5mult+0x84>
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ff20 	bl	8006864 <__multiply>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4639      	mov	r1, r7
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff fe01 	bl	8006630 <_Bfree>
 8006a2e:	4647      	mov	r7, r8
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	d00b      	beq.n	8006a4c <__pow5mult+0xa0>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	b938      	cbnz	r0, 8006a48 <__pow5mult+0x9c>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff ff11 	bl	8006864 <__multiply>
 8006a42:	6020      	str	r0, [r4, #0]
 8006a44:	f8c0 9000 	str.w	r9, [r0]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e7e4      	b.n	8006a16 <__pow5mult+0x6a>
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	bf00      	nop
 8006a54:	08008640 	.word	0x08008640
 8006a58:	08008386 	.word	0x08008386
 8006a5c:	080084f0 	.word	0x080084f0

08006a60 <__lshift>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	4607      	mov	r7, r0
 8006a68:	4691      	mov	r9, r2
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	6849      	ldr	r1, [r1, #4]
 8006a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a78:	f108 0601 	add.w	r6, r8, #1
 8006a7c:	42b3      	cmp	r3, r6
 8006a7e:	db0b      	blt.n	8006a98 <__lshift+0x38>
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fd95 	bl	80065b0 <_Balloc>
 8006a86:	4605      	mov	r5, r0
 8006a88:	b948      	cbnz	r0, 8006a9e <__lshift+0x3e>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <__lshift+0xd0>)
 8006a92:	4828      	ldr	r0, [pc, #160]	; (8006b34 <__lshift+0xd4>)
 8006a94:	f000 fcde 	bl	8007454 <__assert_func>
 8006a98:	3101      	adds	r1, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	e7ee      	b.n	8006a7c <__lshift+0x1c>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f100 0114 	add.w	r1, r0, #20
 8006aa4:	f100 0210 	add.w	r2, r0, #16
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	4553      	cmp	r3, sl
 8006aac:	db33      	blt.n	8006b16 <__lshift+0xb6>
 8006aae:	6920      	ldr	r0, [r4, #16]
 8006ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ab4:	f104 0314 	add.w	r3, r4, #20
 8006ab8:	f019 091f 	ands.w	r9, r9, #31
 8006abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ac4:	d02b      	beq.n	8006b1e <__lshift+0xbe>
 8006ac6:	468a      	mov	sl, r1
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f1c9 0e20 	rsb	lr, r9, #32
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ad4:	4302      	orrs	r2, r0
 8006ad6:	f84a 2b04 	str.w	r2, [sl], #4
 8006ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ade:	459c      	cmp	ip, r3
 8006ae0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ae4:	d8f3      	bhi.n	8006ace <__lshift+0x6e>
 8006ae6:	ebac 0304 	sub.w	r3, ip, r4
 8006aea:	3b15      	subs	r3, #21
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	3304      	adds	r3, #4
 8006af2:	f104 0015 	add.w	r0, r4, #21
 8006af6:	4584      	cmp	ip, r0
 8006af8:	bf38      	it	cc
 8006afa:	2304      	movcc	r3, #4
 8006afc:	50ca      	str	r2, [r1, r3]
 8006afe:	b10a      	cbz	r2, 8006b04 <__lshift+0xa4>
 8006b00:	f108 0602 	add.w	r6, r8, #2
 8006b04:	3e01      	subs	r6, #1
 8006b06:	4638      	mov	r0, r7
 8006b08:	4621      	mov	r1, r4
 8006b0a:	612e      	str	r6, [r5, #16]
 8006b0c:	f7ff fd90 	bl	8006630 <_Bfree>
 8006b10:	4628      	mov	r0, r5
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	e7c5      	b.n	8006aaa <__lshift+0x4a>
 8006b1e:	3904      	subs	r1, #4
 8006b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b24:	459c      	cmp	ip, r3
 8006b26:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b2a:	d8f9      	bhi.n	8006b20 <__lshift+0xc0>
 8006b2c:	e7ea      	b.n	8006b04 <__lshift+0xa4>
 8006b2e:	bf00      	nop
 8006b30:	080083fc 	.word	0x080083fc
 8006b34:	080084f0 	.word	0x080084f0

08006b38 <__mcmp>:
 8006b38:	4603      	mov	r3, r0
 8006b3a:	690a      	ldr	r2, [r1, #16]
 8006b3c:	6900      	ldr	r0, [r0, #16]
 8006b3e:	b530      	push	{r4, r5, lr}
 8006b40:	1a80      	subs	r0, r0, r2
 8006b42:	d10d      	bne.n	8006b60 <__mcmp+0x28>
 8006b44:	3314      	adds	r3, #20
 8006b46:	3114      	adds	r1, #20
 8006b48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b58:	4295      	cmp	r5, r2
 8006b5a:	d002      	beq.n	8006b62 <__mcmp+0x2a>
 8006b5c:	d304      	bcc.n	8006b68 <__mcmp+0x30>
 8006b5e:	2001      	movs	r0, #1
 8006b60:	bd30      	pop	{r4, r5, pc}
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d3f4      	bcc.n	8006b50 <__mcmp+0x18>
 8006b66:	e7fb      	b.n	8006b60 <__mcmp+0x28>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e7f8      	b.n	8006b60 <__mcmp+0x28>
	...

08006b70 <__mdiff>:
 8006b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	460c      	mov	r4, r1
 8006b76:	4606      	mov	r6, r0
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	4692      	mov	sl, r2
 8006b7e:	f7ff ffdb 	bl	8006b38 <__mcmp>
 8006b82:	1e05      	subs	r5, r0, #0
 8006b84:	d111      	bne.n	8006baa <__mdiff+0x3a>
 8006b86:	4629      	mov	r1, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff fd11 	bl	80065b0 <_Balloc>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	b928      	cbnz	r0, 8006b9e <__mdiff+0x2e>
 8006b92:	f240 2132 	movw	r1, #562	; 0x232
 8006b96:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <__mdiff+0x118>)
 8006b98:	483c      	ldr	r0, [pc, #240]	; (8006c8c <__mdiff+0x11c>)
 8006b9a:	f000 fc5b 	bl	8007454 <__assert_func>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	bfa4      	itt	ge
 8006bac:	4653      	movge	r3, sl
 8006bae:	46a2      	movge	sl, r4
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006bb6:	bfa6      	itte	ge
 8006bb8:	461c      	movge	r4, r3
 8006bba:	2500      	movge	r5, #0
 8006bbc:	2501      	movlt	r5, #1
 8006bbe:	f7ff fcf7 	bl	80065b0 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b918      	cbnz	r0, 8006bce <__mdiff+0x5e>
 8006bc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <__mdiff+0x118>)
 8006bcc:	e7e4      	b.n	8006b98 <__mdiff+0x28>
 8006bce:	f100 0814 	add.w	r8, r0, #20
 8006bd2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006bd6:	60c5      	str	r5, [r0, #12]
 8006bd8:	f04f 0c00 	mov.w	ip, #0
 8006bdc:	f10a 0514 	add.w	r5, sl, #20
 8006be0:	f10a 0010 	add.w	r0, sl, #16
 8006be4:	46c2      	mov	sl, r8
 8006be6:	6926      	ldr	r6, [r4, #16]
 8006be8:	f104 0914 	add.w	r9, r4, #20
 8006bec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006bf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bf4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006bf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bfc:	fa1f f18b 	uxth.w	r1, fp
 8006c00:	4461      	add	r1, ip
 8006c02:	fa1f fc83 	uxth.w	ip, r3
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	eba1 010c 	sub.w	r1, r1, ip
 8006c0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c14:	b289      	uxth	r1, r1
 8006c16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c1a:	454e      	cmp	r6, r9
 8006c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c20:	f84a 3b04 	str.w	r3, [sl], #4
 8006c24:	d8e6      	bhi.n	8006bf4 <__mdiff+0x84>
 8006c26:	1b33      	subs	r3, r6, r4
 8006c28:	3b15      	subs	r3, #21
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	3415      	adds	r4, #21
 8006c30:	3304      	adds	r3, #4
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	bf38      	it	cc
 8006c36:	2304      	movcc	r3, #4
 8006c38:	441d      	add	r5, r3
 8006c3a:	4443      	add	r3, r8
 8006c3c:	461e      	mov	r6, r3
 8006c3e:	462c      	mov	r4, r5
 8006c40:	4574      	cmp	r4, lr
 8006c42:	d30e      	bcc.n	8006c62 <__mdiff+0xf2>
 8006c44:	f10e 0103 	add.w	r1, lr, #3
 8006c48:	1b49      	subs	r1, r1, r5
 8006c4a:	f021 0103 	bic.w	r1, r1, #3
 8006c4e:	3d03      	subs	r5, #3
 8006c50:	45ae      	cmp	lr, r5
 8006c52:	bf38      	it	cc
 8006c54:	2100      	movcc	r1, #0
 8006c56:	4419      	add	r1, r3
 8006c58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c5c:	b18b      	cbz	r3, 8006c82 <__mdiff+0x112>
 8006c5e:	6117      	str	r7, [r2, #16]
 8006c60:	e7a0      	b.n	8006ba4 <__mdiff+0x34>
 8006c62:	f854 8b04 	ldr.w	r8, [r4], #4
 8006c66:	fa1f f188 	uxth.w	r1, r8
 8006c6a:	4461      	add	r1, ip
 8006c6c:	1408      	asrs	r0, r1, #16
 8006c6e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006c72:	b289      	uxth	r1, r1
 8006c74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c7c:	f846 1b04 	str.w	r1, [r6], #4
 8006c80:	e7de      	b.n	8006c40 <__mdiff+0xd0>
 8006c82:	3f01      	subs	r7, #1
 8006c84:	e7e8      	b.n	8006c58 <__mdiff+0xe8>
 8006c86:	bf00      	nop
 8006c88:	080083fc 	.word	0x080083fc
 8006c8c:	080084f0 	.word	0x080084f0

08006c90 <__ulp>:
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <__ulp+0x48>)
 8006c92:	400b      	ands	r3, r1
 8006c94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dd02      	ble.n	8006ca2 <__ulp+0x12>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4770      	bx	lr
 8006ca2:	425b      	negs	r3, r3
 8006ca4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ca8:	f04f 0000 	mov.w	r0, #0
 8006cac:	f04f 0100 	mov.w	r1, #0
 8006cb0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cb4:	da04      	bge.n	8006cc0 <__ulp+0x30>
 8006cb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006cba:	fa43 f102 	asr.w	r1, r3, r2
 8006cbe:	4770      	bx	lr
 8006cc0:	f1a2 0314 	sub.w	r3, r2, #20
 8006cc4:	2b1e      	cmp	r3, #30
 8006cc6:	bfd6      	itet	le
 8006cc8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ccc:	2301      	movgt	r3, #1
 8006cce:	fa22 f303 	lsrle.w	r3, r2, r3
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	7ff00000 	.word	0x7ff00000

08006cdc <__b2d>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	6907      	ldr	r7, [r0, #16]
 8006ce2:	f100 0914 	add.w	r9, r0, #20
 8006ce6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006cea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006cee:	f1a7 0804 	sub.w	r8, r7, #4
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff fd52 	bl	800679c <__hi0bits>
 8006cf8:	f1c0 0320 	rsb	r3, r0, #32
 8006cfc:	280a      	cmp	r0, #10
 8006cfe:	600b      	str	r3, [r1, #0]
 8006d00:	491f      	ldr	r1, [pc, #124]	; (8006d80 <__b2d+0xa4>)
 8006d02:	dc17      	bgt.n	8006d34 <__b2d+0x58>
 8006d04:	45c1      	cmp	r9, r8
 8006d06:	bf28      	it	cs
 8006d08:	2200      	movcs	r2, #0
 8006d0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006d0e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006d12:	bf38      	it	cc
 8006d14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d18:	ea43 0501 	orr.w	r5, r3, r1
 8006d1c:	f100 0315 	add.w	r3, r0, #21
 8006d20:	fa06 f303 	lsl.w	r3, r6, r3
 8006d24:	fa22 f20c 	lsr.w	r2, r2, ip
 8006d28:	ea43 0402 	orr.w	r4, r3, r2
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d34:	45c1      	cmp	r9, r8
 8006d36:	bf2e      	itee	cs
 8006d38:	2200      	movcs	r2, #0
 8006d3a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d3e:	f1a7 0808 	subcc.w	r8, r7, #8
 8006d42:	f1b0 030b 	subs.w	r3, r0, #11
 8006d46:	d016      	beq.n	8006d76 <__b2d+0x9a>
 8006d48:	f1c3 0720 	rsb	r7, r3, #32
 8006d4c:	fa22 f107 	lsr.w	r1, r2, r7
 8006d50:	45c8      	cmp	r8, r9
 8006d52:	fa06 f603 	lsl.w	r6, r6, r3
 8006d56:	ea46 0601 	orr.w	r6, r6, r1
 8006d5a:	bf94      	ite	ls
 8006d5c:	2100      	movls	r1, #0
 8006d5e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006d62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006d66:	fa02 f003 	lsl.w	r0, r2, r3
 8006d6a:	40f9      	lsrs	r1, r7
 8006d6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d70:	ea40 0401 	orr.w	r4, r0, r1
 8006d74:	e7da      	b.n	8006d2c <__b2d+0x50>
 8006d76:	4614      	mov	r4, r2
 8006d78:	ea46 0501 	orr.w	r5, r6, r1
 8006d7c:	e7d6      	b.n	8006d2c <__b2d+0x50>
 8006d7e:	bf00      	nop
 8006d80:	3ff00000 	.word	0x3ff00000

08006d84 <__d2b>:
 8006d84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d88:	2101      	movs	r1, #1
 8006d8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d8e:	4690      	mov	r8, r2
 8006d90:	461d      	mov	r5, r3
 8006d92:	f7ff fc0d 	bl	80065b0 <_Balloc>
 8006d96:	4604      	mov	r4, r0
 8006d98:	b930      	cbnz	r0, 8006da8 <__d2b+0x24>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	f240 310a 	movw	r1, #778	; 0x30a
 8006da0:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <__d2b+0xb0>)
 8006da2:	4825      	ldr	r0, [pc, #148]	; (8006e38 <__d2b+0xb4>)
 8006da4:	f000 fb56 	bl	8007454 <__assert_func>
 8006da8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006dac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006db0:	bb2d      	cbnz	r5, 8006dfe <__d2b+0x7a>
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f1b8 0300 	subs.w	r3, r8, #0
 8006db8:	d026      	beq.n	8006e08 <__d2b+0x84>
 8006dba:	4668      	mov	r0, sp
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	f7ff fd0d 	bl	80067dc <__lo0bits>
 8006dc2:	9900      	ldr	r1, [sp, #0]
 8006dc4:	b1f0      	cbz	r0, 8006e04 <__d2b+0x80>
 8006dc6:	9a01      	ldr	r2, [sp, #4]
 8006dc8:	f1c0 0320 	rsb	r3, r0, #32
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	40c2      	lsrs	r2, r0
 8006dd4:	6163      	str	r3, [r4, #20]
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bf14      	ite	ne
 8006dde:	2102      	movne	r1, #2
 8006de0:	2101      	moveq	r1, #1
 8006de2:	61a3      	str	r3, [r4, #24]
 8006de4:	6121      	str	r1, [r4, #16]
 8006de6:	b1c5      	cbz	r5, 8006e1a <__d2b+0x96>
 8006de8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dec:	4405      	add	r5, r0
 8006dee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006df2:	603d      	str	r5, [r7, #0]
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	4620      	mov	r0, r4
 8006df8:	b002      	add	sp, #8
 8006dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e02:	e7d6      	b.n	8006db2 <__d2b+0x2e>
 8006e04:	6161      	str	r1, [r4, #20]
 8006e06:	e7e7      	b.n	8006dd8 <__d2b+0x54>
 8006e08:	a801      	add	r0, sp, #4
 8006e0a:	f7ff fce7 	bl	80067dc <__lo0bits>
 8006e0e:	2101      	movs	r1, #1
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	6121      	str	r1, [r4, #16]
 8006e14:	6163      	str	r3, [r4, #20]
 8006e16:	3020      	adds	r0, #32
 8006e18:	e7e5      	b.n	8006de6 <__d2b+0x62>
 8006e1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e22:	6038      	str	r0, [r7, #0]
 8006e24:	6918      	ldr	r0, [r3, #16]
 8006e26:	f7ff fcb9 	bl	800679c <__hi0bits>
 8006e2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e2e:	6031      	str	r1, [r6, #0]
 8006e30:	e7e1      	b.n	8006df6 <__d2b+0x72>
 8006e32:	bf00      	nop
 8006e34:	080083fc 	.word	0x080083fc
 8006e38:	080084f0 	.word	0x080084f0

08006e3c <__ratio>:
 8006e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4688      	mov	r8, r1
 8006e42:	4669      	mov	r1, sp
 8006e44:	4681      	mov	r9, r0
 8006e46:	f7ff ff49 	bl	8006cdc <__b2d>
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4640      	mov	r0, r8
 8006e52:	a901      	add	r1, sp, #4
 8006e54:	f7ff ff42 	bl	8006cdc <__b2d>
 8006e58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e60:	468b      	mov	fp, r1
 8006e62:	eba3 0c02 	sub.w	ip, r3, r2
 8006e66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfd5      	itete	le
 8006e74:	460a      	movle	r2, r1
 8006e76:	462a      	movgt	r2, r5
 8006e78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e7c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e80:	bfd8      	it	le
 8006e82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e86:	465b      	mov	r3, fp
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f7f9 fc5d 	bl	800074c <__aeabi_ddiv>
 8006e92:	b003      	add	sp, #12
 8006e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e98 <__copybits>:
 8006e98:	3901      	subs	r1, #1
 8006e9a:	b570      	push	{r4, r5, r6, lr}
 8006e9c:	1149      	asrs	r1, r1, #5
 8006e9e:	6914      	ldr	r4, [r2, #16]
 8006ea0:	3101      	adds	r1, #1
 8006ea2:	f102 0314 	add.w	r3, r2, #20
 8006ea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006eaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006eae:	1f05      	subs	r5, r0, #4
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	d30c      	bcc.n	8006ece <__copybits+0x36>
 8006eb4:	1aa3      	subs	r3, r4, r2
 8006eb6:	3b11      	subs	r3, #17
 8006eb8:	f023 0303 	bic.w	r3, r3, #3
 8006ebc:	3211      	adds	r2, #17
 8006ebe:	42a2      	cmp	r2, r4
 8006ec0:	bf88      	it	hi
 8006ec2:	2300      	movhi	r3, #0
 8006ec4:	4418      	add	r0, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4288      	cmp	r0, r1
 8006eca:	d305      	bcc.n	8006ed8 <__copybits+0x40>
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ed2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006ed6:	e7eb      	b.n	8006eb0 <__copybits+0x18>
 8006ed8:	f840 3b04 	str.w	r3, [r0], #4
 8006edc:	e7f4      	b.n	8006ec8 <__copybits+0x30>

08006ede <__any_on>:
 8006ede:	f100 0214 	add.w	r2, r0, #20
 8006ee2:	6900      	ldr	r0, [r0, #16]
 8006ee4:	114b      	asrs	r3, r1, #5
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	db11      	blt.n	8006f10 <__any_on+0x32>
 8006eec:	dd0a      	ble.n	8006f04 <__any_on+0x26>
 8006eee:	f011 011f 	ands.w	r1, r1, #31
 8006ef2:	d007      	beq.n	8006f04 <__any_on+0x26>
 8006ef4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ef8:	fa24 f001 	lsr.w	r0, r4, r1
 8006efc:	fa00 f101 	lsl.w	r1, r0, r1
 8006f00:	428c      	cmp	r4, r1
 8006f02:	d10b      	bne.n	8006f1c <__any_on+0x3e>
 8006f04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d803      	bhi.n	8006f14 <__any_on+0x36>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	bd10      	pop	{r4, pc}
 8006f10:	4603      	mov	r3, r0
 8006f12:	e7f7      	b.n	8006f04 <__any_on+0x26>
 8006f14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d0f5      	beq.n	8006f08 <__any_on+0x2a>
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7f6      	b.n	8006f0e <__any_on+0x30>

08006f20 <_calloc_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	fb02 f501 	mul.w	r5, r2, r1
 8006f26:	4629      	mov	r1, r5
 8006f28:	f000 f854 	bl	8006fd4 <_malloc_r>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	b118      	cbz	r0, 8006f38 <_calloc_r+0x18>
 8006f30:	462a      	mov	r2, r5
 8006f32:	2100      	movs	r1, #0
 8006f34:	f7fc f8d4 	bl	80030e0 <memset>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}

08006f3c <_free_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4605      	mov	r5, r0
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d043      	beq.n	8006fcc <_free_r+0x90>
 8006f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f48:	1f0c      	subs	r4, r1, #4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfb8      	it	lt
 8006f4e:	18e4      	addlt	r4, r4, r3
 8006f50:	f000 fb0e 	bl	8007570 <__malloc_lock>
 8006f54:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <_free_r+0x94>)
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	4610      	mov	r0, r2
 8006f5a:	b933      	cbnz	r3, 8006f6a <_free_r+0x2e>
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6014      	str	r4, [r2, #0]
 8006f60:	4628      	mov	r0, r5
 8006f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f66:	f000 bb09 	b.w	800757c <__malloc_unlock>
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	d90a      	bls.n	8006f84 <_free_r+0x48>
 8006f6e:	6821      	ldr	r1, [r4, #0]
 8006f70:	1862      	adds	r2, r4, r1
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bf01      	itttt	eq
 8006f76:	681a      	ldreq	r2, [r3, #0]
 8006f78:	685b      	ldreq	r3, [r3, #4]
 8006f7a:	1852      	addeq	r2, r2, r1
 8006f7c:	6022      	streq	r2, [r4, #0]
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	6004      	str	r4, [r0, #0]
 8006f82:	e7ed      	b.n	8006f60 <_free_r+0x24>
 8006f84:	461a      	mov	r2, r3
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	b10b      	cbz	r3, 8006f8e <_free_r+0x52>
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	d9fa      	bls.n	8006f84 <_free_r+0x48>
 8006f8e:	6811      	ldr	r1, [r2, #0]
 8006f90:	1850      	adds	r0, r2, r1
 8006f92:	42a0      	cmp	r0, r4
 8006f94:	d10b      	bne.n	8006fae <_free_r+0x72>
 8006f96:	6820      	ldr	r0, [r4, #0]
 8006f98:	4401      	add	r1, r0
 8006f9a:	1850      	adds	r0, r2, r1
 8006f9c:	4283      	cmp	r3, r0
 8006f9e:	6011      	str	r1, [r2, #0]
 8006fa0:	d1de      	bne.n	8006f60 <_free_r+0x24>
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	6053      	str	r3, [r2, #4]
 8006fac:	e7d8      	b.n	8006f60 <_free_r+0x24>
 8006fae:	d902      	bls.n	8006fb6 <_free_r+0x7a>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	e7d4      	b.n	8006f60 <_free_r+0x24>
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	1821      	adds	r1, r4, r0
 8006fba:	428b      	cmp	r3, r1
 8006fbc:	bf01      	itttt	eq
 8006fbe:	6819      	ldreq	r1, [r3, #0]
 8006fc0:	685b      	ldreq	r3, [r3, #4]
 8006fc2:	1809      	addeq	r1, r1, r0
 8006fc4:	6021      	streq	r1, [r4, #0]
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7c9      	b.n	8006f60 <_free_r+0x24>
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000658 	.word	0x20000658

08006fd4 <_malloc_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	1ccd      	adds	r5, r1, #3
 8006fd8:	f025 0503 	bic.w	r5, r5, #3
 8006fdc:	3508      	adds	r5, #8
 8006fde:	2d0c      	cmp	r5, #12
 8006fe0:	bf38      	it	cc
 8006fe2:	250c      	movcc	r5, #12
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	db01      	blt.n	8006fee <_malloc_r+0x1a>
 8006fea:	42a9      	cmp	r1, r5
 8006fec:	d903      	bls.n	8006ff6 <_malloc_r+0x22>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff6:	f000 fabb 	bl	8007570 <__malloc_lock>
 8006ffa:	4921      	ldr	r1, [pc, #132]	; (8007080 <_malloc_r+0xac>)
 8006ffc:	680a      	ldr	r2, [r1, #0]
 8006ffe:	4614      	mov	r4, r2
 8007000:	b99c      	cbnz	r4, 800702a <_malloc_r+0x56>
 8007002:	4f20      	ldr	r7, [pc, #128]	; (8007084 <_malloc_r+0xb0>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	b923      	cbnz	r3, 8007012 <_malloc_r+0x3e>
 8007008:	4621      	mov	r1, r4
 800700a:	4630      	mov	r0, r6
 800700c:	f000 f99e 	bl	800734c <_sbrk_r>
 8007010:	6038      	str	r0, [r7, #0]
 8007012:	4629      	mov	r1, r5
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f999 	bl	800734c <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d123      	bne.n	8007066 <_malloc_r+0x92>
 800701e:	230c      	movs	r3, #12
 8007020:	4630      	mov	r0, r6
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	f000 faaa 	bl	800757c <__malloc_unlock>
 8007028:	e7e3      	b.n	8006ff2 <_malloc_r+0x1e>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	1b5b      	subs	r3, r3, r5
 800702e:	d417      	bmi.n	8007060 <_malloc_r+0x8c>
 8007030:	2b0b      	cmp	r3, #11
 8007032:	d903      	bls.n	800703c <_malloc_r+0x68>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	441c      	add	r4, r3
 8007038:	6025      	str	r5, [r4, #0]
 800703a:	e004      	b.n	8007046 <_malloc_r+0x72>
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	42a2      	cmp	r2, r4
 8007040:	bf0c      	ite	eq
 8007042:	600b      	streq	r3, [r1, #0]
 8007044:	6053      	strne	r3, [r2, #4]
 8007046:	4630      	mov	r0, r6
 8007048:	f000 fa98 	bl	800757c <__malloc_unlock>
 800704c:	f104 000b 	add.w	r0, r4, #11
 8007050:	1d23      	adds	r3, r4, #4
 8007052:	f020 0007 	bic.w	r0, r0, #7
 8007056:	1ac2      	subs	r2, r0, r3
 8007058:	d0cc      	beq.n	8006ff4 <_malloc_r+0x20>
 800705a:	1a1b      	subs	r3, r3, r0
 800705c:	50a3      	str	r3, [r4, r2]
 800705e:	e7c9      	b.n	8006ff4 <_malloc_r+0x20>
 8007060:	4622      	mov	r2, r4
 8007062:	6864      	ldr	r4, [r4, #4]
 8007064:	e7cc      	b.n	8007000 <_malloc_r+0x2c>
 8007066:	1cc4      	adds	r4, r0, #3
 8007068:	f024 0403 	bic.w	r4, r4, #3
 800706c:	42a0      	cmp	r0, r4
 800706e:	d0e3      	beq.n	8007038 <_malloc_r+0x64>
 8007070:	1a21      	subs	r1, r4, r0
 8007072:	4630      	mov	r0, r6
 8007074:	f000 f96a 	bl	800734c <_sbrk_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d1dd      	bne.n	8007038 <_malloc_r+0x64>
 800707c:	e7cf      	b.n	800701e <_malloc_r+0x4a>
 800707e:	bf00      	nop
 8007080:	20000658 	.word	0x20000658
 8007084:	2000065c 	.word	0x2000065c

08007088 <__ssputs_r>:
 8007088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	688e      	ldr	r6, [r1, #8]
 800708e:	4682      	mov	sl, r0
 8007090:	429e      	cmp	r6, r3
 8007092:	460c      	mov	r4, r1
 8007094:	4690      	mov	r8, r2
 8007096:	461f      	mov	r7, r3
 8007098:	d838      	bhi.n	800710c <__ssputs_r+0x84>
 800709a:	898a      	ldrh	r2, [r1, #12]
 800709c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070a0:	d032      	beq.n	8007108 <__ssputs_r+0x80>
 80070a2:	6825      	ldr	r5, [r4, #0]
 80070a4:	6909      	ldr	r1, [r1, #16]
 80070a6:	3301      	adds	r3, #1
 80070a8:	eba5 0901 	sub.w	r9, r5, r1
 80070ac:	6965      	ldr	r5, [r4, #20]
 80070ae:	444b      	add	r3, r9
 80070b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070b8:	106d      	asrs	r5, r5, #1
 80070ba:	429d      	cmp	r5, r3
 80070bc:	bf38      	it	cc
 80070be:	461d      	movcc	r5, r3
 80070c0:	0553      	lsls	r3, r2, #21
 80070c2:	d531      	bpl.n	8007128 <__ssputs_r+0xa0>
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7ff ff85 	bl	8006fd4 <_malloc_r>
 80070ca:	4606      	mov	r6, r0
 80070cc:	b950      	cbnz	r0, 80070e4 <__ssputs_r+0x5c>
 80070ce:	230c      	movs	r3, #12
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	f8ca 3000 	str.w	r3, [sl]
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e4:	464a      	mov	r2, r9
 80070e6:	6921      	ldr	r1, [r4, #16]
 80070e8:	f7fb ffec 	bl	80030c4 <memcpy>
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	6126      	str	r6, [r4, #16]
 80070fa:	444e      	add	r6, r9
 80070fc:	6026      	str	r6, [r4, #0]
 80070fe:	463e      	mov	r6, r7
 8007100:	6165      	str	r5, [r4, #20]
 8007102:	eba5 0509 	sub.w	r5, r5, r9
 8007106:	60a5      	str	r5, [r4, #8]
 8007108:	42be      	cmp	r6, r7
 800710a:	d900      	bls.n	800710e <__ssputs_r+0x86>
 800710c:	463e      	mov	r6, r7
 800710e:	4632      	mov	r2, r6
 8007110:	4641      	mov	r1, r8
 8007112:	6820      	ldr	r0, [r4, #0]
 8007114:	f000 fa12 	bl	800753c <memmove>
 8007118:	68a3      	ldr	r3, [r4, #8]
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	1b9b      	subs	r3, r3, r6
 800711e:	4432      	add	r2, r6
 8007120:	2000      	movs	r0, #0
 8007122:	60a3      	str	r3, [r4, #8]
 8007124:	6022      	str	r2, [r4, #0]
 8007126:	e7db      	b.n	80070e0 <__ssputs_r+0x58>
 8007128:	462a      	mov	r2, r5
 800712a:	f000 fa2d 	bl	8007588 <_realloc_r>
 800712e:	4606      	mov	r6, r0
 8007130:	2800      	cmp	r0, #0
 8007132:	d1e1      	bne.n	80070f8 <__ssputs_r+0x70>
 8007134:	4650      	mov	r0, sl
 8007136:	6921      	ldr	r1, [r4, #16]
 8007138:	f7ff ff00 	bl	8006f3c <_free_r>
 800713c:	e7c7      	b.n	80070ce <__ssputs_r+0x46>
	...

08007140 <_svfiprintf_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	4698      	mov	r8, r3
 8007146:	898b      	ldrh	r3, [r1, #12]
 8007148:	4607      	mov	r7, r0
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	460d      	mov	r5, r1
 800714e:	4614      	mov	r4, r2
 8007150:	b09d      	sub	sp, #116	; 0x74
 8007152:	d50e      	bpl.n	8007172 <_svfiprintf_r+0x32>
 8007154:	690b      	ldr	r3, [r1, #16]
 8007156:	b963      	cbnz	r3, 8007172 <_svfiprintf_r+0x32>
 8007158:	2140      	movs	r1, #64	; 0x40
 800715a:	f7ff ff3b 	bl	8006fd4 <_malloc_r>
 800715e:	6028      	str	r0, [r5, #0]
 8007160:	6128      	str	r0, [r5, #16]
 8007162:	b920      	cbnz	r0, 800716e <_svfiprintf_r+0x2e>
 8007164:	230c      	movs	r3, #12
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	e0d1      	b.n	8007312 <_svfiprintf_r+0x1d2>
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	616b      	str	r3, [r5, #20]
 8007172:	2300      	movs	r3, #0
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
 8007176:	2320      	movs	r3, #32
 8007178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800717c:	2330      	movs	r3, #48	; 0x30
 800717e:	f04f 0901 	mov.w	r9, #1
 8007182:	f8cd 800c 	str.w	r8, [sp, #12]
 8007186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800732c <_svfiprintf_r+0x1ec>
 800718a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800718e:	4623      	mov	r3, r4
 8007190:	469a      	mov	sl, r3
 8007192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007196:	b10a      	cbz	r2, 800719c <_svfiprintf_r+0x5c>
 8007198:	2a25      	cmp	r2, #37	; 0x25
 800719a:	d1f9      	bne.n	8007190 <_svfiprintf_r+0x50>
 800719c:	ebba 0b04 	subs.w	fp, sl, r4
 80071a0:	d00b      	beq.n	80071ba <_svfiprintf_r+0x7a>
 80071a2:	465b      	mov	r3, fp
 80071a4:	4622      	mov	r2, r4
 80071a6:	4629      	mov	r1, r5
 80071a8:	4638      	mov	r0, r7
 80071aa:	f7ff ff6d 	bl	8007088 <__ssputs_r>
 80071ae:	3001      	adds	r0, #1
 80071b0:	f000 80aa 	beq.w	8007308 <_svfiprintf_r+0x1c8>
 80071b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b6:	445a      	add	r2, fp
 80071b8:	9209      	str	r2, [sp, #36]	; 0x24
 80071ba:	f89a 3000 	ldrb.w	r3, [sl]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80a2 	beq.w	8007308 <_svfiprintf_r+0x1c8>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ce:	f10a 0a01 	add.w	sl, sl, #1
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	9307      	str	r3, [sp, #28]
 80071d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071da:	931a      	str	r3, [sp, #104]	; 0x68
 80071dc:	4654      	mov	r4, sl
 80071de:	2205      	movs	r2, #5
 80071e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e4:	4851      	ldr	r0, [pc, #324]	; (800732c <_svfiprintf_r+0x1ec>)
 80071e6:	f7ff f9d5 	bl	8006594 <memchr>
 80071ea:	9a04      	ldr	r2, [sp, #16]
 80071ec:	b9d8      	cbnz	r0, 8007226 <_svfiprintf_r+0xe6>
 80071ee:	06d0      	lsls	r0, r2, #27
 80071f0:	bf44      	itt	mi
 80071f2:	2320      	movmi	r3, #32
 80071f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f8:	0711      	lsls	r1, r2, #28
 80071fa:	bf44      	itt	mi
 80071fc:	232b      	movmi	r3, #43	; 0x2b
 80071fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007202:	f89a 3000 	ldrb.w	r3, [sl]
 8007206:	2b2a      	cmp	r3, #42	; 0x2a
 8007208:	d015      	beq.n	8007236 <_svfiprintf_r+0xf6>
 800720a:	4654      	mov	r4, sl
 800720c:	2000      	movs	r0, #0
 800720e:	f04f 0c0a 	mov.w	ip, #10
 8007212:	9a07      	ldr	r2, [sp, #28]
 8007214:	4621      	mov	r1, r4
 8007216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800721a:	3b30      	subs	r3, #48	; 0x30
 800721c:	2b09      	cmp	r3, #9
 800721e:	d94e      	bls.n	80072be <_svfiprintf_r+0x17e>
 8007220:	b1b0      	cbz	r0, 8007250 <_svfiprintf_r+0x110>
 8007222:	9207      	str	r2, [sp, #28]
 8007224:	e014      	b.n	8007250 <_svfiprintf_r+0x110>
 8007226:	eba0 0308 	sub.w	r3, r0, r8
 800722a:	fa09 f303 	lsl.w	r3, r9, r3
 800722e:	4313      	orrs	r3, r2
 8007230:	46a2      	mov	sl, r4
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	e7d2      	b.n	80071dc <_svfiprintf_r+0x9c>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	1d19      	adds	r1, r3, #4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	9103      	str	r1, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	bfbb      	ittet	lt
 8007242:	425b      	neglt	r3, r3
 8007244:	f042 0202 	orrlt.w	r2, r2, #2
 8007248:	9307      	strge	r3, [sp, #28]
 800724a:	9307      	strlt	r3, [sp, #28]
 800724c:	bfb8      	it	lt
 800724e:	9204      	strlt	r2, [sp, #16]
 8007250:	7823      	ldrb	r3, [r4, #0]
 8007252:	2b2e      	cmp	r3, #46	; 0x2e
 8007254:	d10c      	bne.n	8007270 <_svfiprintf_r+0x130>
 8007256:	7863      	ldrb	r3, [r4, #1]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d135      	bne.n	80072c8 <_svfiprintf_r+0x188>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	3402      	adds	r4, #2
 8007260:	1d1a      	adds	r2, r3, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	9203      	str	r2, [sp, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfb8      	it	lt
 800726a:	f04f 33ff 	movlt.w	r3, #4294967295
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800733c <_svfiprintf_r+0x1fc>
 8007274:	2203      	movs	r2, #3
 8007276:	4650      	mov	r0, sl
 8007278:	7821      	ldrb	r1, [r4, #0]
 800727a:	f7ff f98b 	bl	8006594 <memchr>
 800727e:	b140      	cbz	r0, 8007292 <_svfiprintf_r+0x152>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	eba0 000a 	sub.w	r0, r0, sl
 8007286:	fa03 f000 	lsl.w	r0, r3, r0
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	3401      	adds	r4, #1
 800728e:	4303      	orrs	r3, r0
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007296:	2206      	movs	r2, #6
 8007298:	4825      	ldr	r0, [pc, #148]	; (8007330 <_svfiprintf_r+0x1f0>)
 800729a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800729e:	f7ff f979 	bl	8006594 <memchr>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d038      	beq.n	8007318 <_svfiprintf_r+0x1d8>
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <_svfiprintf_r+0x1f4>)
 80072a8:	bb1b      	cbnz	r3, 80072f2 <_svfiprintf_r+0x1b2>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	3307      	adds	r3, #7
 80072ae:	f023 0307 	bic.w	r3, r3, #7
 80072b2:	3308      	adds	r3, #8
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	4433      	add	r3, r6
 80072ba:	9309      	str	r3, [sp, #36]	; 0x24
 80072bc:	e767      	b.n	800718e <_svfiprintf_r+0x4e>
 80072be:	460c      	mov	r4, r1
 80072c0:	2001      	movs	r0, #1
 80072c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c6:	e7a5      	b.n	8007214 <_svfiprintf_r+0xd4>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f04f 0c0a 	mov.w	ip, #10
 80072ce:	4619      	mov	r1, r3
 80072d0:	3401      	adds	r4, #1
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	4620      	mov	r0, r4
 80072d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072da:	3a30      	subs	r2, #48	; 0x30
 80072dc:	2a09      	cmp	r2, #9
 80072de:	d903      	bls.n	80072e8 <_svfiprintf_r+0x1a8>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0c5      	beq.n	8007270 <_svfiprintf_r+0x130>
 80072e4:	9105      	str	r1, [sp, #20]
 80072e6:	e7c3      	b.n	8007270 <_svfiprintf_r+0x130>
 80072e8:	4604      	mov	r4, r0
 80072ea:	2301      	movs	r3, #1
 80072ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f0:	e7f0      	b.n	80072d4 <_svfiprintf_r+0x194>
 80072f2:	ab03      	add	r3, sp, #12
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	462a      	mov	r2, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <_svfiprintf_r+0x1f8>)
 80072fc:	a904      	add	r1, sp, #16
 80072fe:	f7fb ff95 	bl	800322c <_printf_float>
 8007302:	1c42      	adds	r2, r0, #1
 8007304:	4606      	mov	r6, r0
 8007306:	d1d6      	bne.n	80072b6 <_svfiprintf_r+0x176>
 8007308:	89ab      	ldrh	r3, [r5, #12]
 800730a:	065b      	lsls	r3, r3, #25
 800730c:	f53f af2c 	bmi.w	8007168 <_svfiprintf_r+0x28>
 8007310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007312:	b01d      	add	sp, #116	; 0x74
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	ab03      	add	r3, sp, #12
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	462a      	mov	r2, r5
 800731e:	4638      	mov	r0, r7
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <_svfiprintf_r+0x1f8>)
 8007322:	a904      	add	r1, sp, #16
 8007324:	f7fc fa1e 	bl	8003764 <_printf_i>
 8007328:	e7eb      	b.n	8007302 <_svfiprintf_r+0x1c2>
 800732a:	bf00      	nop
 800732c:	0800864c 	.word	0x0800864c
 8007330:	08008656 	.word	0x08008656
 8007334:	0800322d 	.word	0x0800322d
 8007338:	08007089 	.word	0x08007089
 800733c:	08008652 	.word	0x08008652

08007340 <nan>:
 8007340:	2000      	movs	r0, #0
 8007342:	4901      	ldr	r1, [pc, #4]	; (8007348 <nan+0x8>)
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	7ff80000 	.word	0x7ff80000

0800734c <_sbrk_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	2300      	movs	r3, #0
 8007350:	4d05      	ldr	r5, [pc, #20]	; (8007368 <_sbrk_r+0x1c>)
 8007352:	4604      	mov	r4, r0
 8007354:	4608      	mov	r0, r1
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	f7fb fe24 	bl	8002fa4 <_sbrk>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_sbrk_r+0x1a>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_sbrk_r+0x1a>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	200008ec 	.word	0x200008ec

0800736c <__sread>:
 800736c:	b510      	push	{r4, lr}
 800736e:	460c      	mov	r4, r1
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	f000 fa86 	bl	8007884 <_read_r>
 8007378:	2800      	cmp	r0, #0
 800737a:	bfab      	itete	ge
 800737c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800737e:	89a3      	ldrhlt	r3, [r4, #12]
 8007380:	181b      	addge	r3, r3, r0
 8007382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007386:	bfac      	ite	ge
 8007388:	6563      	strge	r3, [r4, #84]	; 0x54
 800738a:	81a3      	strhlt	r3, [r4, #12]
 800738c:	bd10      	pop	{r4, pc}

0800738e <__swrite>:
 800738e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	461f      	mov	r7, r3
 8007394:	898b      	ldrh	r3, [r1, #12]
 8007396:	4605      	mov	r5, r0
 8007398:	05db      	lsls	r3, r3, #23
 800739a:	460c      	mov	r4, r1
 800739c:	4616      	mov	r6, r2
 800739e:	d505      	bpl.n	80073ac <__swrite+0x1e>
 80073a0:	2302      	movs	r3, #2
 80073a2:	2200      	movs	r2, #0
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	f000 f8b6 	bl	8007518 <_lseek_r>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	4632      	mov	r2, r6
 80073b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	4628      	mov	r0, r5
 80073b8:	463b      	mov	r3, r7
 80073ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	f000 b835 	b.w	8007430 <_write_r>

080073c6 <__sseek>:
 80073c6:	b510      	push	{r4, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ce:	f000 f8a3 	bl	8007518 <_lseek_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	bf15      	itete	ne
 80073d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80073da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073e2:	81a3      	strheq	r3, [r4, #12]
 80073e4:	bf18      	it	ne
 80073e6:	81a3      	strhne	r3, [r4, #12]
 80073e8:	bd10      	pop	{r4, pc}

080073ea <__sclose>:
 80073ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ee:	f000 b84f 	b.w	8007490 <_close_r>

080073f2 <strncmp>:
 80073f2:	b510      	push	{r4, lr}
 80073f4:	b16a      	cbz	r2, 8007412 <strncmp+0x20>
 80073f6:	3901      	subs	r1, #1
 80073f8:	1884      	adds	r4, r0, r2
 80073fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80073fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007402:	4293      	cmp	r3, r2
 8007404:	d103      	bne.n	800740e <strncmp+0x1c>
 8007406:	42a0      	cmp	r0, r4
 8007408:	d001      	beq.n	800740e <strncmp+0x1c>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f5      	bne.n	80073fa <strncmp+0x8>
 800740e:	1a98      	subs	r0, r3, r2
 8007410:	bd10      	pop	{r4, pc}
 8007412:	4610      	mov	r0, r2
 8007414:	e7fc      	b.n	8007410 <strncmp+0x1e>

08007416 <__ascii_wctomb>:
 8007416:	4603      	mov	r3, r0
 8007418:	4608      	mov	r0, r1
 800741a:	b141      	cbz	r1, 800742e <__ascii_wctomb+0x18>
 800741c:	2aff      	cmp	r2, #255	; 0xff
 800741e:	d904      	bls.n	800742a <__ascii_wctomb+0x14>
 8007420:	228a      	movs	r2, #138	; 0x8a
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	4770      	bx	lr
 800742a:	2001      	movs	r0, #1
 800742c:	700a      	strb	r2, [r1, #0]
 800742e:	4770      	bx	lr

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	2200      	movs	r2, #0
 800743a:	4d05      	ldr	r5, [pc, #20]	; (8007450 <_write_r+0x20>)
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fb fc46 	bl	8002cd0 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	200008ec 	.word	0x200008ec

08007454 <__assert_func>:
 8007454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007456:	4614      	mov	r4, r2
 8007458:	461a      	mov	r2, r3
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <__assert_func+0x2c>)
 800745c:	4605      	mov	r5, r0
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68d8      	ldr	r0, [r3, #12]
 8007462:	b14c      	cbz	r4, 8007478 <__assert_func+0x24>
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <__assert_func+0x30>)
 8007466:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800746a:	9100      	str	r1, [sp, #0]
 800746c:	462b      	mov	r3, r5
 800746e:	4906      	ldr	r1, [pc, #24]	; (8007488 <__assert_func+0x34>)
 8007470:	f000 f81e 	bl	80074b0 <fiprintf>
 8007474:	f000 fa18 	bl	80078a8 <abort>
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <__assert_func+0x38>)
 800747a:	461c      	mov	r4, r3
 800747c:	e7f3      	b.n	8007466 <__assert_func+0x12>
 800747e:	bf00      	nop
 8007480:	20000010 	.word	0x20000010
 8007484:	0800865d 	.word	0x0800865d
 8007488:	0800866a 	.word	0x0800866a
 800748c:	08008698 	.word	0x08008698

08007490 <_close_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	2300      	movs	r3, #0
 8007494:	4d05      	ldr	r5, [pc, #20]	; (80074ac <_close_r+0x1c>)
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fb fd52 	bl	8002f44 <_close>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_close_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_close_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	200008ec 	.word	0x200008ec

080074b0 <fiprintf>:
 80074b0:	b40e      	push	{r1, r2, r3}
 80074b2:	b503      	push	{r0, r1, lr}
 80074b4:	4601      	mov	r1, r0
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	4805      	ldr	r0, [pc, #20]	; (80074d0 <fiprintf+0x20>)
 80074ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80074be:	6800      	ldr	r0, [r0, #0]
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	f000 f8af 	bl	8007624 <_vfiprintf_r>
 80074c6:	b002      	add	sp, #8
 80074c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074cc:	b003      	add	sp, #12
 80074ce:	4770      	bx	lr
 80074d0:	20000010 	.word	0x20000010

080074d4 <_fstat_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	2300      	movs	r3, #0
 80074d8:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_fstat_r+0x20>)
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	f7fb fd3a 	bl	8002f5a <_fstat>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	d102      	bne.n	80074f0 <_fstat_r+0x1c>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	b103      	cbz	r3, 80074f0 <_fstat_r+0x1c>
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	bf00      	nop
 80074f4:	200008ec 	.word	0x200008ec

080074f8 <_isatty_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	2300      	movs	r3, #0
 80074fc:	4d05      	ldr	r5, [pc, #20]	; (8007514 <_isatty_r+0x1c>)
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fb fd38 	bl	8002f78 <_isatty>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_isatty_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_isatty_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200008ec 	.word	0x200008ec

08007518 <_lseek_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	2200      	movs	r2, #0
 8007522:	4d05      	ldr	r5, [pc, #20]	; (8007538 <_lseek_r+0x20>)
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fb fd30 	bl	8002f8c <_lseek>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_lseek_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_lseek_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200008ec 	.word	0x200008ec

0800753c <memmove>:
 800753c:	4288      	cmp	r0, r1
 800753e:	b510      	push	{r4, lr}
 8007540:	eb01 0402 	add.w	r4, r1, r2
 8007544:	d902      	bls.n	800754c <memmove+0x10>
 8007546:	4284      	cmp	r4, r0
 8007548:	4623      	mov	r3, r4
 800754a:	d807      	bhi.n	800755c <memmove+0x20>
 800754c:	1e43      	subs	r3, r0, #1
 800754e:	42a1      	cmp	r1, r4
 8007550:	d008      	beq.n	8007564 <memmove+0x28>
 8007552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755a:	e7f8      	b.n	800754e <memmove+0x12>
 800755c:	4601      	mov	r1, r0
 800755e:	4402      	add	r2, r0
 8007560:	428a      	cmp	r2, r1
 8007562:	d100      	bne.n	8007566 <memmove+0x2a>
 8007564:	bd10      	pop	{r4, pc}
 8007566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800756e:	e7f7      	b.n	8007560 <memmove+0x24>

08007570 <__malloc_lock>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__malloc_lock+0x8>)
 8007572:	f7fe bf8e 	b.w	8006492 <__retarget_lock_acquire_recursive>
 8007576:	bf00      	nop
 8007578:	200008e4 	.word	0x200008e4

0800757c <__malloc_unlock>:
 800757c:	4801      	ldr	r0, [pc, #4]	; (8007584 <__malloc_unlock+0x8>)
 800757e:	f7fe bf89 	b.w	8006494 <__retarget_lock_release_recursive>
 8007582:	bf00      	nop
 8007584:	200008e4 	.word	0x200008e4

08007588 <_realloc_r>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	4607      	mov	r7, r0
 800758c:	4614      	mov	r4, r2
 800758e:	460e      	mov	r6, r1
 8007590:	b921      	cbnz	r1, 800759c <_realloc_r+0x14>
 8007592:	4611      	mov	r1, r2
 8007594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007598:	f7ff bd1c 	b.w	8006fd4 <_malloc_r>
 800759c:	b922      	cbnz	r2, 80075a8 <_realloc_r+0x20>
 800759e:	f7ff fccd 	bl	8006f3c <_free_r>
 80075a2:	4625      	mov	r5, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a8:	f000 f985 	bl	80078b6 <_malloc_usable_size_r>
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d20f      	bcs.n	80075d0 <_realloc_r+0x48>
 80075b0:	4621      	mov	r1, r4
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7ff fd0e 	bl	8006fd4 <_malloc_r>
 80075b8:	4605      	mov	r5, r0
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0f2      	beq.n	80075a4 <_realloc_r+0x1c>
 80075be:	4631      	mov	r1, r6
 80075c0:	4622      	mov	r2, r4
 80075c2:	f7fb fd7f 	bl	80030c4 <memcpy>
 80075c6:	4631      	mov	r1, r6
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff fcb7 	bl	8006f3c <_free_r>
 80075ce:	e7e9      	b.n	80075a4 <_realloc_r+0x1c>
 80075d0:	4635      	mov	r5, r6
 80075d2:	e7e7      	b.n	80075a4 <_realloc_r+0x1c>

080075d4 <__sfputc_r>:
 80075d4:	6893      	ldr	r3, [r2, #8]
 80075d6:	b410      	push	{r4}
 80075d8:	3b01      	subs	r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	6093      	str	r3, [r2, #8]
 80075de:	da07      	bge.n	80075f0 <__sfputc_r+0x1c>
 80075e0:	6994      	ldr	r4, [r2, #24]
 80075e2:	42a3      	cmp	r3, r4
 80075e4:	db01      	blt.n	80075ea <__sfputc_r+0x16>
 80075e6:	290a      	cmp	r1, #10
 80075e8:	d102      	bne.n	80075f0 <__sfputc_r+0x1c>
 80075ea:	bc10      	pop	{r4}
 80075ec:	f7fd baf2 	b.w	8004bd4 <__swbuf_r>
 80075f0:	6813      	ldr	r3, [r2, #0]
 80075f2:	1c58      	adds	r0, r3, #1
 80075f4:	6010      	str	r0, [r2, #0]
 80075f6:	7019      	strb	r1, [r3, #0]
 80075f8:	4608      	mov	r0, r1
 80075fa:	bc10      	pop	{r4}
 80075fc:	4770      	bx	lr

080075fe <__sfputs_r>:
 80075fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007600:	4606      	mov	r6, r0
 8007602:	460f      	mov	r7, r1
 8007604:	4614      	mov	r4, r2
 8007606:	18d5      	adds	r5, r2, r3
 8007608:	42ac      	cmp	r4, r5
 800760a:	d101      	bne.n	8007610 <__sfputs_r+0x12>
 800760c:	2000      	movs	r0, #0
 800760e:	e007      	b.n	8007620 <__sfputs_r+0x22>
 8007610:	463a      	mov	r2, r7
 8007612:	4630      	mov	r0, r6
 8007614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007618:	f7ff ffdc 	bl	80075d4 <__sfputc_r>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d1f3      	bne.n	8007608 <__sfputs_r+0xa>
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007624 <_vfiprintf_r>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	460d      	mov	r5, r1
 800762a:	4614      	mov	r4, r2
 800762c:	4698      	mov	r8, r3
 800762e:	4606      	mov	r6, r0
 8007630:	b09d      	sub	sp, #116	; 0x74
 8007632:	b118      	cbz	r0, 800763c <_vfiprintf_r+0x18>
 8007634:	6983      	ldr	r3, [r0, #24]
 8007636:	b90b      	cbnz	r3, 800763c <_vfiprintf_r+0x18>
 8007638:	f7fe fb22 	bl	8005c80 <__sinit>
 800763c:	4b89      	ldr	r3, [pc, #548]	; (8007864 <_vfiprintf_r+0x240>)
 800763e:	429d      	cmp	r5, r3
 8007640:	d11b      	bne.n	800767a <_vfiprintf_r+0x56>
 8007642:	6875      	ldr	r5, [r6, #4]
 8007644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007646:	07d9      	lsls	r1, r3, #31
 8007648:	d405      	bmi.n	8007656 <_vfiprintf_r+0x32>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	059a      	lsls	r2, r3, #22
 800764e:	d402      	bmi.n	8007656 <_vfiprintf_r+0x32>
 8007650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007652:	f7fe ff1e 	bl	8006492 <__retarget_lock_acquire_recursive>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	d501      	bpl.n	8007660 <_vfiprintf_r+0x3c>
 800765c:	692b      	ldr	r3, [r5, #16]
 800765e:	b9eb      	cbnz	r3, 800769c <_vfiprintf_r+0x78>
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7fd fb08 	bl	8004c78 <__swsetup_r>
 8007668:	b1c0      	cbz	r0, 800769c <_vfiprintf_r+0x78>
 800766a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800766c:	07dc      	lsls	r4, r3, #31
 800766e:	d50e      	bpl.n	800768e <_vfiprintf_r+0x6a>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	b01d      	add	sp, #116	; 0x74
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	4b7b      	ldr	r3, [pc, #492]	; (8007868 <_vfiprintf_r+0x244>)
 800767c:	429d      	cmp	r5, r3
 800767e:	d101      	bne.n	8007684 <_vfiprintf_r+0x60>
 8007680:	68b5      	ldr	r5, [r6, #8]
 8007682:	e7df      	b.n	8007644 <_vfiprintf_r+0x20>
 8007684:	4b79      	ldr	r3, [pc, #484]	; (800786c <_vfiprintf_r+0x248>)
 8007686:	429d      	cmp	r5, r3
 8007688:	bf08      	it	eq
 800768a:	68f5      	ldreq	r5, [r6, #12]
 800768c:	e7da      	b.n	8007644 <_vfiprintf_r+0x20>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	0598      	lsls	r0, r3, #22
 8007692:	d4ed      	bmi.n	8007670 <_vfiprintf_r+0x4c>
 8007694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007696:	f7fe fefd 	bl	8006494 <__retarget_lock_release_recursive>
 800769a:	e7e9      	b.n	8007670 <_vfiprintf_r+0x4c>
 800769c:	2300      	movs	r3, #0
 800769e:	9309      	str	r3, [sp, #36]	; 0x24
 80076a0:	2320      	movs	r3, #32
 80076a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076a6:	2330      	movs	r3, #48	; 0x30
 80076a8:	f04f 0901 	mov.w	r9, #1
 80076ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007870 <_vfiprintf_r+0x24c>
 80076b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076b8:	4623      	mov	r3, r4
 80076ba:	469a      	mov	sl, r3
 80076bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c0:	b10a      	cbz	r2, 80076c6 <_vfiprintf_r+0xa2>
 80076c2:	2a25      	cmp	r2, #37	; 0x25
 80076c4:	d1f9      	bne.n	80076ba <_vfiprintf_r+0x96>
 80076c6:	ebba 0b04 	subs.w	fp, sl, r4
 80076ca:	d00b      	beq.n	80076e4 <_vfiprintf_r+0xc0>
 80076cc:	465b      	mov	r3, fp
 80076ce:	4622      	mov	r2, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff ff93 	bl	80075fe <__sfputs_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	f000 80aa 	beq.w	8007832 <_vfiprintf_r+0x20e>
 80076de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e0:	445a      	add	r2, fp
 80076e2:	9209      	str	r2, [sp, #36]	; 0x24
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80a2 	beq.w	8007832 <_vfiprintf_r+0x20e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f04f 32ff 	mov.w	r2, #4294967295
 80076f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f8:	f10a 0a01 	add.w	sl, sl, #1
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	9307      	str	r3, [sp, #28]
 8007700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007704:	931a      	str	r3, [sp, #104]	; 0x68
 8007706:	4654      	mov	r4, sl
 8007708:	2205      	movs	r2, #5
 800770a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770e:	4858      	ldr	r0, [pc, #352]	; (8007870 <_vfiprintf_r+0x24c>)
 8007710:	f7fe ff40 	bl	8006594 <memchr>
 8007714:	9a04      	ldr	r2, [sp, #16]
 8007716:	b9d8      	cbnz	r0, 8007750 <_vfiprintf_r+0x12c>
 8007718:	06d1      	lsls	r1, r2, #27
 800771a:	bf44      	itt	mi
 800771c:	2320      	movmi	r3, #32
 800771e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007722:	0713      	lsls	r3, r2, #28
 8007724:	bf44      	itt	mi
 8007726:	232b      	movmi	r3, #43	; 0x2b
 8007728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800772c:	f89a 3000 	ldrb.w	r3, [sl]
 8007730:	2b2a      	cmp	r3, #42	; 0x2a
 8007732:	d015      	beq.n	8007760 <_vfiprintf_r+0x13c>
 8007734:	4654      	mov	r4, sl
 8007736:	2000      	movs	r0, #0
 8007738:	f04f 0c0a 	mov.w	ip, #10
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4621      	mov	r1, r4
 8007740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007744:	3b30      	subs	r3, #48	; 0x30
 8007746:	2b09      	cmp	r3, #9
 8007748:	d94e      	bls.n	80077e8 <_vfiprintf_r+0x1c4>
 800774a:	b1b0      	cbz	r0, 800777a <_vfiprintf_r+0x156>
 800774c:	9207      	str	r2, [sp, #28]
 800774e:	e014      	b.n	800777a <_vfiprintf_r+0x156>
 8007750:	eba0 0308 	sub.w	r3, r0, r8
 8007754:	fa09 f303 	lsl.w	r3, r9, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	46a2      	mov	sl, r4
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	e7d2      	b.n	8007706 <_vfiprintf_r+0xe2>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	1d19      	adds	r1, r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	9103      	str	r1, [sp, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bfbb      	ittet	lt
 800776c:	425b      	neglt	r3, r3
 800776e:	f042 0202 	orrlt.w	r2, r2, #2
 8007772:	9307      	strge	r3, [sp, #28]
 8007774:	9307      	strlt	r3, [sp, #28]
 8007776:	bfb8      	it	lt
 8007778:	9204      	strlt	r2, [sp, #16]
 800777a:	7823      	ldrb	r3, [r4, #0]
 800777c:	2b2e      	cmp	r3, #46	; 0x2e
 800777e:	d10c      	bne.n	800779a <_vfiprintf_r+0x176>
 8007780:	7863      	ldrb	r3, [r4, #1]
 8007782:	2b2a      	cmp	r3, #42	; 0x2a
 8007784:	d135      	bne.n	80077f2 <_vfiprintf_r+0x1ce>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3402      	adds	r4, #2
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9203      	str	r2, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfb8      	it	lt
 8007794:	f04f 33ff 	movlt.w	r3, #4294967295
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007880 <_vfiprintf_r+0x25c>
 800779e:	2203      	movs	r2, #3
 80077a0:	4650      	mov	r0, sl
 80077a2:	7821      	ldrb	r1, [r4, #0]
 80077a4:	f7fe fef6 	bl	8006594 <memchr>
 80077a8:	b140      	cbz	r0, 80077bc <_vfiprintf_r+0x198>
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	eba0 000a 	sub.w	r0, r0, sl
 80077b0:	fa03 f000 	lsl.w	r0, r3, r0
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	3401      	adds	r4, #1
 80077b8:	4303      	orrs	r3, r0
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c0:	2206      	movs	r2, #6
 80077c2:	482c      	ldr	r0, [pc, #176]	; (8007874 <_vfiprintf_r+0x250>)
 80077c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c8:	f7fe fee4 	bl	8006594 <memchr>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d03f      	beq.n	8007850 <_vfiprintf_r+0x22c>
 80077d0:	4b29      	ldr	r3, [pc, #164]	; (8007878 <_vfiprintf_r+0x254>)
 80077d2:	bb1b      	cbnz	r3, 800781c <_vfiprintf_r+0x1f8>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	3307      	adds	r3, #7
 80077d8:	f023 0307 	bic.w	r3, r3, #7
 80077dc:	3308      	adds	r3, #8
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	443b      	add	r3, r7
 80077e4:	9309      	str	r3, [sp, #36]	; 0x24
 80077e6:	e767      	b.n	80076b8 <_vfiprintf_r+0x94>
 80077e8:	460c      	mov	r4, r1
 80077ea:	2001      	movs	r0, #1
 80077ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f0:	e7a5      	b.n	800773e <_vfiprintf_r+0x11a>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f04f 0c0a 	mov.w	ip, #10
 80077f8:	4619      	mov	r1, r3
 80077fa:	3401      	adds	r4, #1
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	4620      	mov	r0, r4
 8007800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007804:	3a30      	subs	r2, #48	; 0x30
 8007806:	2a09      	cmp	r2, #9
 8007808:	d903      	bls.n	8007812 <_vfiprintf_r+0x1ee>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0c5      	beq.n	800779a <_vfiprintf_r+0x176>
 800780e:	9105      	str	r1, [sp, #20]
 8007810:	e7c3      	b.n	800779a <_vfiprintf_r+0x176>
 8007812:	4604      	mov	r4, r0
 8007814:	2301      	movs	r3, #1
 8007816:	fb0c 2101 	mla	r1, ip, r1, r2
 800781a:	e7f0      	b.n	80077fe <_vfiprintf_r+0x1da>
 800781c:	ab03      	add	r3, sp, #12
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	462a      	mov	r2, r5
 8007822:	4630      	mov	r0, r6
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <_vfiprintf_r+0x258>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	f7fb fd00 	bl	800322c <_printf_float>
 800782c:	4607      	mov	r7, r0
 800782e:	1c78      	adds	r0, r7, #1
 8007830:	d1d6      	bne.n	80077e0 <_vfiprintf_r+0x1bc>
 8007832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d405      	bmi.n	8007844 <_vfiprintf_r+0x220>
 8007838:	89ab      	ldrh	r3, [r5, #12]
 800783a:	059a      	lsls	r2, r3, #22
 800783c:	d402      	bmi.n	8007844 <_vfiprintf_r+0x220>
 800783e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007840:	f7fe fe28 	bl	8006494 <__retarget_lock_release_recursive>
 8007844:	89ab      	ldrh	r3, [r5, #12]
 8007846:	065b      	lsls	r3, r3, #25
 8007848:	f53f af12 	bmi.w	8007670 <_vfiprintf_r+0x4c>
 800784c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800784e:	e711      	b.n	8007674 <_vfiprintf_r+0x50>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4630      	mov	r0, r6
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <_vfiprintf_r+0x258>)
 800785a:	a904      	add	r1, sp, #16
 800785c:	f7fb ff82 	bl	8003764 <_printf_i>
 8007860:	e7e4      	b.n	800782c <_vfiprintf_r+0x208>
 8007862:	bf00      	nop
 8007864:	08008430 	.word	0x08008430
 8007868:	08008450 	.word	0x08008450
 800786c:	08008410 	.word	0x08008410
 8007870:	0800864c 	.word	0x0800864c
 8007874:	08008656 	.word	0x08008656
 8007878:	0800322d 	.word	0x0800322d
 800787c:	080075ff 	.word	0x080075ff
 8007880:	08008652 	.word	0x08008652

08007884 <_read_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	2200      	movs	r2, #0
 800788e:	4d05      	ldr	r5, [pc, #20]	; (80078a4 <_read_r+0x20>)
 8007890:	602a      	str	r2, [r5, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f7fb fb39 	bl	8002f0a <_read>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_read_r+0x1e>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_read_r+0x1e>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	200008ec 	.word	0x200008ec

080078a8 <abort>:
 80078a8:	2006      	movs	r0, #6
 80078aa:	b508      	push	{r3, lr}
 80078ac:	f000 f834 	bl	8007918 <raise>
 80078b0:	2001      	movs	r0, #1
 80078b2:	f7fb fb20 	bl	8002ef6 <_exit>

080078b6 <_malloc_usable_size_r>:
 80078b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ba:	1f18      	subs	r0, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bfbc      	itt	lt
 80078c0:	580b      	ldrlt	r3, [r1, r0]
 80078c2:	18c0      	addlt	r0, r0, r3
 80078c4:	4770      	bx	lr

080078c6 <_raise_r>:
 80078c6:	291f      	cmp	r1, #31
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	d904      	bls.n	80078da <_raise_r+0x14>
 80078d0:	2316      	movs	r3, #22
 80078d2:	6003      	str	r3, [r0, #0]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078dc:	b112      	cbz	r2, 80078e4 <_raise_r+0x1e>
 80078de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078e2:	b94b      	cbnz	r3, 80078f8 <_raise_r+0x32>
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f831 	bl	800794c <_getpid_r>
 80078ea:	462a      	mov	r2, r5
 80078ec:	4601      	mov	r1, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f4:	f000 b818 	b.w	8007928 <_kill_r>
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d00a      	beq.n	8007912 <_raise_r+0x4c>
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	d103      	bne.n	8007908 <_raise_r+0x42>
 8007900:	2316      	movs	r3, #22
 8007902:	6003      	str	r3, [r0, #0]
 8007904:	2001      	movs	r0, #1
 8007906:	e7e7      	b.n	80078d8 <_raise_r+0x12>
 8007908:	2400      	movs	r4, #0
 800790a:	4628      	mov	r0, r5
 800790c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007910:	4798      	blx	r3
 8007912:	2000      	movs	r0, #0
 8007914:	e7e0      	b.n	80078d8 <_raise_r+0x12>
	...

08007918 <raise>:
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <raise+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f7ff bfd2 	b.w	80078c6 <_raise_r>
 8007922:	bf00      	nop
 8007924:	20000010 	.word	0x20000010

08007928 <_kill_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	2300      	movs	r3, #0
 800792c:	4d06      	ldr	r5, [pc, #24]	; (8007948 <_kill_r+0x20>)
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f7fb face 	bl	8002ed6 <_kill>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d102      	bne.n	8007944 <_kill_r+0x1c>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	b103      	cbz	r3, 8007944 <_kill_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	200008ec 	.word	0x200008ec

0800794c <_getpid_r>:
 800794c:	f7fb babc 	b.w	8002ec8 <_getpid>

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
