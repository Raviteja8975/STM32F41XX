
stm32f103_baremetal_esp8266_web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000177c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080018ac  080018ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bdc  08001bdc  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08001bdc  08001bdc  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bdc  08001bdc  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bdc  08001bdc  00011bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08001be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000230  08001e14  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08001e14  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004be6  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fb4  00000000  00000000  00024e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f8  00000000  00000000  00025df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  000260f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011cba  00000000  00000000  00026350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003e0d  00000000  00000000  0003800a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059424  00000000  00000000  0003be17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009523b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d6c  00000000  00000000  000952b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000230 	.word	0x20000230
 800014c:	00000000 	.word	0x00000000
 8000150:	08001894 	.word	0x08001894

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000234 	.word	0x20000234
 800016c:	08001894 	.word	0x08001894

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0e      	blt.n	80001b0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000192:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <__NVIC_GetActive+0x3c>)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	095b      	lsrs	r3, r3, #5
 800019a:	3380      	adds	r3, #128	; 0x80
 800019c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 031f 	and.w	r3, r3, #31
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	e000      	b.n	80001b2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80001b0:	2300      	movs	r3, #0
  }
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	e000e100 	.word	0xe000e100

080001c0 <USART2_IRQHandler>:
	_Bool gb_RX_Buffer_Overflow_UART2; // This flag is set on USART Receiver // buffer overflow
	char gb_rx_byte;
	char gb_RX_DATA_UART2[gb_RX_BUFFER_SIZE_UART2];

void USART2_IRQHandler(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	//  GB_UART_TxChar2('k');
	  if((__NVIC_GetActive(USART2_IRQn)) == 1)
 80001c4:	2026      	movs	r0, #38	; 0x26
 80001c6:	f7ff ffdb 	bl	8000180 <__NVIC_GetActive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d124      	bne.n	800021a <USART2_IRQHandler+0x5a>
    //check if we are here because of RXNE interrupt
         if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <USART2_IRQHandler+0x60>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d01e      	beq.n	800021a <USART2_IRQHandler+0x5a>
                {
                      gb_rx_byte = USART2->DR; //fetch the data received
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <USART2_IRQHandler+0x60>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <USART2_IRQHandler+0x64>)
 80001e4:	701a      	strb	r2, [r3, #0]
                      gb_Rx_Buffer_UART2[gb_RX_Wr_Index_UART2]= gb_rx_byte;   /* put received char in buffer */
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <USART2_IRQHandler+0x68>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <USART2_IRQHandler+0x64>)
 80001ee:	7819      	ldrb	r1, [r3, #0]
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <USART2_IRQHandler+0x6c>)
 80001f2:	5499      	strb	r1, [r3, r2]
  		              if(++gb_RX_Wr_Index_UART2 > gb_RX_BUFFER_SIZE_UART2)
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <USART2_IRQHandler+0x68>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	3301      	adds	r3, #1
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <USART2_IRQHandler+0x68>)
 80001fe:	701a      	strb	r2, [r3, #0]
  		              gb_RX_Wr_Index_UART2 = 0;
  		              if(gb_RX_Counter_UART2++ > gb_RX_BUFFER_SIZE_UART2) /* keep a character count */
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <USART2_IRQHandler+0x70>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <USART2_IRQHandler+0x70>)
 800020a:	701a      	strb	r2, [r3, #0]
  			                    gb_RX_Counter_UART2 = gb_RX_BUFFER_SIZE_UART2; /* if too many chars came */
  			                  gb_RX_Buffer_Overflow_UART2 = 1;            /* in before they could be used */
  			                }                                          /* that could cause an error!! */
  		              else
  		              {
  		            	gb_RX_Buffer_Overflow_UART2 = 0;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <USART2_IRQHandler+0x74>)
 800020e:	2200      	movs	r2, #0
 8000210:	701a      	strb	r2, [r3, #0]
  		              }

  		              gb_RX_No_of_byte_UART2=gb_RX_Counter_UART2 ;
 8000212:	4b07      	ldr	r3, [pc, #28]	; (8000230 <USART2_IRQHandler+0x70>)
 8000214:	781a      	ldrb	r2, [r3, #0]
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <USART2_IRQHandler+0x78>)
 8000218:	701a      	strb	r2, [r3, #0]

  			          //printf("%d",gb_rx_byte);

                 }

}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40004400 	.word	0x40004400
 8000224:	20000650 	.word	0x20000650
 8000228:	2000024c 	.word	0x2000024c
 800022c:	2000045c 	.word	0x2000045c
 8000230:	2000024e 	.word	0x2000024e
 8000234:	20000458 	.word	0x20000458
 8000238:	2000024f 	.word	0x2000024f

0800023c <GB_getchar_UART2>:

/***********Niche Ring Buffer Functions *****/
/****reading from Interrupted Ring Buffer*/
char  GB_getchar_UART2()             // <--->   Serial.read()
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	char gb_c;
	gb_c = gb_Rx_Buffer_UART2[gb_RX_Rd_Index_UART2]; /* get one from the buffer..*/
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <GB_getchar_UART2+0x44>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	461a      	mov	r2, r3
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <GB_getchar_UART2+0x48>)
 800024a:	5c9b      	ldrb	r3, [r3, r2]
 800024c:	71fb      	strb	r3, [r7, #7]
	if(++gb_RX_Rd_Index_UART2 > gb_RX_BUFFER_SIZE_UART2) /* wrap the pointer */
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <GB_getchar_UART2+0x44>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <GB_getchar_UART2+0x44>)
 8000258:	701a      	strb	r2, [r3, #0]
	gb_RX_Rd_Index_UART2 = 0;

	if(gb_RX_Counter_UART2>0)
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <GB_getchar_UART2+0x4c>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d007      	beq.n	8000272 <GB_getchar_UART2+0x36>
	gb_RX_Counter_UART2--; /* keep a count (buffer size) */
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <GB_getchar_UART2+0x4c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <GB_getchar_UART2+0x4c>)
 800026c:	701a      	strb	r2, [r3, #0]
	else return NULL ;     //return NULL if no character is received
	//GB_UART_TxChar1(gb_c);
	return gb_c ;//return char *
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	e000      	b.n	8000274 <GB_getchar_UART2+0x38>
	else return NULL ;     //return NULL if no character is received
 8000272:	2300      	movs	r3, #0
	//printString0("n \n ");
}
 8000274:	4618      	mov	r0, r3
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2000024d 	.word	0x2000024d
 8000284:	2000045c 	.word	0x2000045c
 8000288:	2000024e 	.word	0x2000024e

0800028c <GB_getstring_UART2>:
/*
 * tHIS FUNCTION WILL ALWAYS WILL UPDATE THE GB_rx_data_uart2 BUFFER WITH NEW VALUES
 *
 */
int GB_getstring_UART2()
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
//	GB_decimel1(gb_RX_No_of_byte_UART2);
//	GB_printString1("\n");
//	GB_decimel1(gb_RX_Counter_UART2);
//	GB_printString1("\n");

	int g = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
	//GB_printString1(gb_RX_DATA_UART2);
	uint8_t gb_x=0;
 8000296:	2300      	movs	r3, #0
 8000298:	70fb      	strb	r3, [r7, #3]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 800029a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800029e:	2100      	movs	r1, #0
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <GB_getstring_UART2+0x48>)
 80002a2:	f000 fea1 	bl	8000fe8 <memset>
	//memset(gb_Rx_Buffer_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
	while (gb_RX_Counter_UART2)
 80002a6:	e00b      	b.n	80002c0 <GB_getstring_UART2+0x34>
	{
		gb_RX_DATA_UART2[gb_x]= GB_getchar_UART2();
 80002a8:	78fc      	ldrb	r4, [r7, #3]
 80002aa:	f7ff ffc7 	bl	800023c <GB_getchar_UART2>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <GB_getstring_UART2+0x48>)
 80002b4:	551a      	strb	r2, [r3, r4]
		gb_x++;
 80002b6:	78fb      	ldrb	r3, [r7, #3]
 80002b8:	3301      	adds	r3, #1
 80002ba:	70fb      	strb	r3, [r7, #3]
		g = 1;
 80002bc:	2301      	movs	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
	while (gb_RX_Counter_UART2)
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <GB_getstring_UART2+0x4c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1ef      	bne.n	80002a8 <GB_getstring_UART2+0x1c>
		//return 1;
	}
	return g;
 80002c8:	687b      	ldr	r3, [r7, #4]
	//GB_printString1(gb_RX_DATA_UART2);
	//_delay_ms(1000);

}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd90      	pop	{r4, r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000264 	.word	0x20000264
 80002d8:	2000024e 	.word	0x2000024e

080002dc <GB_search_buffer>:

char* GB_search_buffer(const char* gb_search)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	char* gb_p;
	int gb_bufferlen = strlen((const char * )gb_RX_DATA_UART2);
 80002e4:	4809      	ldr	r0, [pc, #36]	; (800030c <GB_search_buffer+0x30>)
 80002e6:	f7ff ff43 	bl	8000170 <strlen>
 80002ea:	4603      	mov	r3, r0
 80002ec:	60bb      	str	r3, [r7, #8]
	if(gb_bufferlen < gb_RX_BUFFER_SIZE_UART2)
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002f4:	da04      	bge.n	8000300 <GB_search_buffer+0x24>
	gb_p= strstr ((const char *)gb_RX_DATA_UART2,gb_search);
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <GB_search_buffer+0x30>)
 80002fa:	f000 febf 	bl	800107c <strstr>
 80002fe:	60f8      	str	r0, [r7, #12]
	//printString0(p);
	return (gb_p);
 8000300:	68fb      	ldr	r3, [r7, #12]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000264 	.word	0x20000264

08000310 <GB_send_command>:
void GB_send_command(const char * gb_command)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	GB_printString2(gb_command);
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 fb79 	bl	8000a10 <GB_printString2>

}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <GB_RFR_UART2>:

int GB_RFR_UART2(const char * gb_rsp,unsigned int gb_timeout)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	unsigned long gb_timeIn = GB_millis();	// Timestamp coming into function
 8000332:	f000 f9eb 	bl	800070c <GB_millis>
 8000336:	60b8      	str	r0, [r7, #8]
	uint8_t gb_received = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 800033c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000340:	2100      	movs	r1, #0
 8000342:	4816      	ldr	r0, [pc, #88]	; (800039c <GB_RFR_UART2+0x74>)
 8000344:	f000 fe50 	bl	8000fe8 <memset>
	//printString0(" Number of characters received : ");
	//decimel0(RX_No_of_byte_UART1);
	//printString0("\n");

	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 8000348:	e015      	b.n	8000376 <GB_RFR_UART2+0x4e>
	{
		//printString0("k\n");
		if(gb_RX_Counter_UART2)
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <GB_RFR_UART2+0x78>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d011      	beq.n	8000376 <GB_RFR_UART2+0x4e>
		{
			gb_RX_DATA_UART2[gb_received]= GB_getchar_UART2();
 8000352:	7bfc      	ldrb	r4, [r7, #15]
 8000354:	f7ff ff72 	bl	800023c <GB_getchar_UART2>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <GB_RFR_UART2+0x74>)
 800035e:	551a      	strb	r2, [r3, r4]
			//decimel0(received);
			//printString0(" ");
			//UART_TxChar0(RX_DATA_UART1[received]);
			//printString0("\n");
			gb_received++;
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	3301      	adds	r3, #1
 8000364:	73fb      	strb	r3, [r7, #15]
			if(GB_search_buffer(gb_rsp)) return 1;
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f7ff ffb8 	bl	80002dc <GB_search_buffer>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <GB_RFR_UART2+0x4e>
 8000372:	2301      	movs	r3, #1
 8000374:	e00d      	b.n	8000392 <GB_RFR_UART2+0x6a>
	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 8000376:	f000 f9c9 	bl	800070c <GB_millis>
 800037a:	4602      	mov	r2, r0
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d8e1      	bhi.n	800034a <GB_RFR_UART2+0x22>

		}
	}

	//printString0(RX_DATA_UART1);
	if (gb_received > 0) // If we received any characters
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <GB_RFR_UART2+0x68>
	return gb_received; // Return unkown response error code
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	e000      	b.n	8000392 <GB_RFR_UART2+0x6a>
	else // If we haven't received any characters
	return 2; // Return the timeout error code
 8000390:	2302      	movs	r3, #2

}
 8000392:	4618      	mov	r0, r3
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bd90      	pop	{r4, r7, pc}
 800039a:	bf00      	nop
 800039c:	20000264 	.word	0x20000264
 80003a0:	2000024e 	.word	0x2000024e

080003a4 <GB_getstring_ESP8266FORSERVER>:
		uint8_t gb_x=0;

//Function to wait for client to browse Ip address on Browser
//gb_flag is Parameter which
uint32_t GB_getstring_ESP8266FORSERVER(char* gb_IP)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	//GB_decimel0(gb_flag);

//	while (gb_flag==0)
	do 
	{
		GB_printString1(gb_RX_DATA_UART2);
 80003ac:	482a      	ldr	r0, [pc, #168]	; (8000458 <GB_getstring_ESP8266FORSERVER+0xb4>)
 80003ae:	f000 fa43 	bl	8000838 <GB_printString1>
		//Gets the updates data if client is connected
		GB_getstring_UART2();
 80003b2:	f7ff ff6b 	bl	800028c <GB_getstring_UART2>

		gb_p= strstr(gb_RX_DATA_UART2,"Host");  // when using client as web browser
 80003b6:	4929      	ldr	r1, [pc, #164]	; (800045c <GB_getstring_ESP8266FORSERVER+0xb8>)
 80003b8:	4827      	ldr	r0, [pc, #156]	; (8000458 <GB_getstring_ESP8266FORSERVER+0xb4>)
 80003ba:	f000 fe5f 	bl	800107c <strstr>
 80003be:	4602      	mov	r2, r0
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <GB_getstring_ESP8266FORSERVER+0xbc>)
 80003c2:	601a      	str	r2, [r3, #0]
		 //gb_p= strstr(gb_RX_DATA_UART2,"CONNECT"); // when using client as TCP from herculus or other esp8266 node
		 GB_printString1(gb_p);
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <GB_getstring_ESP8266FORSERVER+0xbc>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fa35 	bl	8000838 <GB_printString1>
		//}
		if(gb_p)    //IF Client is connected
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <GB_getstring_ESP8266FORSERVER+0xbc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d037      	beq.n	8000446 <GB_getstring_ESP8266FORSERVER+0xa2>
		{
			gb_flag=1;
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <GB_getstring_ESP8266FORSERVER+0xc0>)
 80003d8:	2201      	movs	r2, #1
 80003da:	601a      	str	r2, [r3, #0]
 			GB_printString1(gb_RX_DATA_UART2);
 80003dc:	481e      	ldr	r0, [pc, #120]	; (8000458 <GB_getstring_ESP8266FORSERVER+0xb4>)
 80003de:	f000 fa2b 	bl	8000838 <GB_printString1>
// 			
// 			GB_printString1(gb_p);
			GB_printString1("\n*******Client Connected*******\n");
 80003e2:	4821      	ldr	r0, [pc, #132]	; (8000468 <GB_getstring_ESP8266FORSERVER+0xc4>)
 80003e4:	f000 fa28 	bl	8000838 <GB_printString1>
			//gb_q = gb_RX_DATA_UART2 - gb_p;
			//GB_printString1(gb_q);
			gb_q = strstr(gb_RX_DATA_UART2,"+IPD");
 80003e8:	4920      	ldr	r1, [pc, #128]	; (800046c <GB_getstring_ESP8266FORSERVER+0xc8>)
 80003ea:	481b      	ldr	r0, [pc, #108]	; (8000458 <GB_getstring_ESP8266FORSERVER+0xb4>)
 80003ec:	f000 fe46 	bl	800107c <strstr>
 80003f0:	4602      	mov	r2, r0
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <GB_getstring_ESP8266FORSERVER+0xcc>)
 80003f4:	601a      	str	r2, [r3, #0]
			gb_q += strlen("+IPD");
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <GB_getstring_ESP8266FORSERVER+0xcc>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3304      	adds	r3, #4
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <GB_getstring_ESP8266FORSERVER+0xcc>)
 80003fe:	6013      	str	r3, [r2, #0]
			gb_channelid = *(gb_q+1);
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <GB_getstring_ESP8266FORSERVER+0xcc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <GB_getstring_ESP8266FORSERVER+0xd0>)
 800040c:	601a      	str	r2, [r3, #0]
// 			GB_printString1(gb_RX_DATA_UART2);
// 			GB_printString1("\n");
			GB_printString1("Channel ID with Client is:");
 800040e:	481a      	ldr	r0, [pc, #104]	; (8000478 <GB_getstring_ESP8266FORSERVER+0xd4>)
 8000410:	f000 fa12 	bl	8000838 <GB_printString1>
			GB_UART_TxChar1(gb_channelid);
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <GB_getstring_ESP8266FORSERVER+0xd0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f000 f9f7 	bl	800080c <GB_UART_TxChar1>
			gb_flag=1;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <GB_getstring_ESP8266FORSERVER+0xc0>)
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
			GB_printString1("\n");
 8000424:	4815      	ldr	r0, [pc, #84]	; (800047c <GB_getstring_ESP8266FORSERVER+0xd8>)
 8000426:	f000 fa07 	bl	8000838 <GB_printString1>
// 			GB_decimel0(gb_flag);
// 			GB_printString1("\n");
			memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 800042a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800042e:	2100      	movs	r1, #0
 8000430:	4809      	ldr	r0, [pc, #36]	; (8000458 <GB_getstring_ESP8266FORSERVER+0xb4>)
 8000432:	f000 fdd9 	bl	8000fe8 <memset>
			memset(gb_Rx_Buffer_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 8000436:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800043a:	2100      	movs	r1, #0
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <GB_getstring_ESP8266FORSERVER+0xdc>)
 800043e:	f000 fdd3 	bl	8000fe8 <memset>
			return 1;
 8000442:	2301      	movs	r3, #1
 8000444:	e004      	b.n	8000450 <GB_getstring_ESP8266FORSERVER+0xac>
		}


	}while (gb_flag==0);
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <GB_getstring_ESP8266FORSERVER+0xc0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0ae      	beq.n	80003ac <GB_getstring_ESP8266FORSERVER+0x8>
		
	
	return 0;
 800044e:	2300      	movs	r3, #0
}
 8000450:	4618      	mov	r0, r3
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000264 	.word	0x20000264
 800045c:	080018ac 	.word	0x080018ac
 8000460:	20000880 	.word	0x20000880
 8000464:	20000250 	.word	0x20000250
 8000468:	080018b4 	.word	0x080018b4
 800046c:	080018d8 	.word	0x080018d8
 8000470:	20000688 	.word	0x20000688
 8000474:	20000884 	.word	0x20000884
 8000478:	080018e0 	.word	0x080018e0
 800047c:	080018fc 	.word	0x080018fc
 8000480:	2000045c 	.word	0x2000045c

08000484 <GB_esp8266_serverdatatoclientcipsend>:
//function to find length of data to send
//Function to send AT+CIPSEND command
char gb_send[50];

void GB_esp8266_serverdatatoclientcipsend()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	GB_printString1("\n****Sending details of data to be send (AT+CIPSEND)********\n");
 800048a:	4814      	ldr	r0, [pc, #80]	; (80004dc <GB_esp8266_serverdatatoclientcipsend+0x58>)
 800048c:	f000 f9d4 	bl	8000838 <GB_printString1>
	//int get_command_length = strlen(webpage);
	int gb_get_command_length = strlen(gb_signMessage);
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <GB_esp8266_serverdatatoclientcipsend+0x5c>)
 8000492:	f7ff fe6d 	bl	8000170 <strlen>
 8000496:	4603      	mov	r3, r0
 8000498:	607b      	str	r3, [r7, #4]
	sprintf(gb_send,"AT+CIPSEND=%i,%u\r\n",gb_channelid-48,gb_get_command_length+2);
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <GB_esp8266_serverdatatoclientcipsend+0x60>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3302      	adds	r3, #2
 80004a6:	4910      	ldr	r1, [pc, #64]	; (80004e8 <GB_esp8266_serverdatatoclientcipsend+0x64>)
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <GB_esp8266_serverdatatoclientcipsend+0x68>)
 80004aa:	f000 fda5 	bl	8000ff8 <siprintf>
	GB_printString1("Channel id is :");
 80004ae:	4810      	ldr	r0, [pc, #64]	; (80004f0 <GB_esp8266_serverdatatoclientcipsend+0x6c>)
 80004b0:	f000 f9c2 	bl	8000838 <GB_printString1>
	GB_UART_TxChar1(gb_channelid);
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <GB_esp8266_serverdatatoclientcipsend+0x60>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f9a7 	bl	800080c <GB_UART_TxChar1>
//	GB_printString1("\n");
//	GB_printString1(gb_send);
	//_delay_ms(10);
//	GB_printString1("\nK\n");
	GB_send_command(gb_send);
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <GB_esp8266_serverdatatoclientcipsend+0x68>)
 80004c0:	f7ff ff26 	bl	8000310 <GB_send_command>
//	GB_printString1("\nG\n");
	//_delay_ms(10);
	//GB_send_command("AT+CIPSEND=1,460\r\n");
	//GB_decimel1(GB_RFR_UART2(">",2000));
	//GB_printString1("\nY\n");
	GB_RFR_UART2(">",2000);
 80004c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <GB_esp8266_serverdatatoclientcipsend+0x70>)
 80004ca:	f7ff ff2d 	bl	8000328 <GB_RFR_UART2>
	GB_printString1(gb_RX_DATA_UART2);
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <GB_esp8266_serverdatatoclientcipsend+0x74>)
 80004d0:	f000 f9b2 	bl	8000838 <GB_printString1>
// 	GB_decimel0(gb_rsp);
// 	GB_printString1(gb_RX_DATA_UART2);
// 	if (gb_rsp==0) //printString1(RX_DATA_UART2);
// 	GB_printString1(gb_RX_DATA_UART2);
	
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	08001900 	.word	0x08001900
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000884 	.word	0x20000884
 80004e8:	08001940 	.word	0x08001940
 80004ec:	20000654 	.word	0x20000654
 80004f0:	08001954 	.word	0x08001954
 80004f4:	08001964 	.word	0x08001964
 80004f8:	20000264 	.word	0x20000264

080004fc <GB_esp8266_webpagedata>:
uint8_t webdata_debug = 0;
void GB_esp8266_webpagedata()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	webdata_debug = 1;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <GB_esp8266_webpagedata+0x74>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
	GB_printString1("\n************Sending Data to Client************\n");
 8000508:	481a      	ldr	r0, [pc, #104]	; (8000574 <GB_esp8266_webpagedata+0x78>)
 800050a:	f000 f995 	bl	8000838 <GB_printString1>
	//send_command(webpage);
	//_delay_ms(10);
	
	GB_printString1("\nZ\n");
 800050e:	481a      	ldr	r0, [pc, #104]	; (8000578 <GB_esp8266_webpagedata+0x7c>)
 8000510:	f000 f992 	bl	8000838 <GB_printString1>
	GB_send_command(gb_signMessage);
 8000514:	4819      	ldr	r0, [pc, #100]	; (800057c <GB_esp8266_webpagedata+0x80>)
 8000516:	f7ff fefb 	bl	8000310 <GB_send_command>
	GB_printString1("\nP\n");
 800051a:	4819      	ldr	r0, [pc, #100]	; (8000580 <GB_esp8266_webpagedata+0x84>)
 800051c:	f000 f98c 	bl	8000838 <GB_printString1>
	GB_decimel1(GB_RFR_UART2("SEND OK",2000));
 8000520:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000524:	4817      	ldr	r0, [pc, #92]	; (8000584 <GB_esp8266_webpagedata+0x88>)
 8000526:	f7ff feff 	bl	8000328 <GB_RFR_UART2>
 800052a:	4603      	mov	r3, r0
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f9a1 	bl	8000874 <GB_decimel1>
	GB_printString1("\nM\n");
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <GB_esp8266_webpagedata+0x8c>)
 8000534:	f000 f980 	bl	8000838 <GB_printString1>
	GB_printString1(gb_RX_DATA_UART2);
 8000538:	4814      	ldr	r0, [pc, #80]	; (800058c <GB_esp8266_webpagedata+0x90>)
 800053a:	f000 f97d 	bl	8000838 <GB_printString1>
	GB_printString1("\nO\n");
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <GB_esp8266_webpagedata+0x94>)
 8000540:	f000 f97a 	bl	8000838 <GB_printString1>
	
	//GB_printString1(gb_RX_DATA_UART2);
	int gb_rsp = GB_RFR_UART2("SEND OK",2000);
 8000544:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <GB_esp8266_webpagedata+0x88>)
 800054a:	f7ff feed 	bl	8000328 <GB_RFR_UART2>
 800054e:	6078      	str	r0, [r7, #4]
	if (gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d102      	bne.n	800055c <GB_esp8266_webpagedata+0x60>
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <GB_esp8266_webpagedata+0x90>)
 8000558:	f000 f96e 	bl	8000838 <GB_printString1>
	//printString1(RX_DATA_UART2);
	
	GB_printString1(gb_signMessage);
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <GB_esp8266_webpagedata+0x80>)
 800055e:	f000 f96b 	bl	8000838 <GB_printString1>
	webdata_debug = 0;
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <GB_esp8266_webpagedata+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000254 	.word	0x20000254
 8000574:	08001968 	.word	0x08001968
 8000578:	0800199c 	.word	0x0800199c
 800057c:	20000000 	.word	0x20000000
 8000580:	080019a0 	.word	0x080019a0
 8000584:	080019a4 	.word	0x080019a4
 8000588:	080019ac 	.word	0x080019ac
 800058c:	20000264 	.word	0x20000264
 8000590:	080019b0 	.word	0x080019b0

08000594 <GB_esp8266_webpageclose>:
void GB_esp8266_webpageclose()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
	GB_printString1(gb_RX_DATA_UART2);
 800059a:	4818      	ldr	r0, [pc, #96]	; (80005fc <GB_esp8266_webpageclose+0x68>)
 800059c:	f000 f94c 	bl	8000838 <GB_printString1>
	
	GB_printString1("\n****************Closing the session with Client**************\n");
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <GB_esp8266_webpageclose+0x6c>)
 80005a2:	f000 f949 	bl	8000838 <GB_printString1>
	char gb_cipclose[20];
	sprintf(gb_cipclose,"AT+CIPCLOSE=%u\r\n",gb_channelid-48);
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <GB_esp8266_webpageclose+0x70>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005ae:	463b      	mov	r3, r7
 80005b0:	4915      	ldr	r1, [pc, #84]	; (8000608 <GB_esp8266_webpageclose+0x74>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fd20 	bl	8000ff8 <siprintf>
	//_delay_ms(10);
	
	GB_printString1("\nT\n");
 80005b8:	4814      	ldr	r0, [pc, #80]	; (800060c <GB_esp8266_webpageclose+0x78>)
 80005ba:	f000 f93d 	bl	8000838 <GB_printString1>
	GB_send_command(gb_cipclose);
 80005be:	463b      	mov	r3, r7
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fea5 	bl	8000310 <GB_send_command>
	GB_printString1("\nL\n");
 80005c6:	4812      	ldr	r0, [pc, #72]	; (8000610 <GB_esp8266_webpageclose+0x7c>)
 80005c8:	f000 f936 	bl	8000838 <GB_printString1>
	GB_printString1(gb_cipclose);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f932 	bl	8000838 <GB_printString1>
	int gb_rsp = GB_RFR_UART2("OK",1000);
 80005d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <GB_esp8266_webpageclose+0x80>)
 80005da:	f7ff fea5 	bl	8000328 <GB_RFR_UART2>
 80005de:	6178      	str	r0, [r7, #20]
	if (gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d102      	bne.n	80005ec <GB_esp8266_webpageclose+0x58>
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <GB_esp8266_webpageclose+0x68>)
 80005e8:	f000 f926 	bl	8000838 <GB_printString1>
	GB_printString1(gb_RX_DATA_UART2);
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <GB_esp8266_webpageclose+0x68>)
 80005ee:	f000 f923 	bl	8000838 <GB_printString1>
}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000264 	.word	0x20000264
 8000600:	080019b4 	.word	0x080019b4
 8000604:	20000884 	.word	0x20000884
 8000608:	080019f4 	.word	0x080019f4
 800060c:	08001a08 	.word	0x08001a08
 8000610:	08001a0c 	.word	0x08001a0c
 8000614:	08001a10 	.word	0x08001a10

08000618 <__NVIC_SetPriorityGrouping>:
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c4:	d301      	bcc.n	80006ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00a      	b.n	80006e0 <SysTick_Config+0x2c>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <SysTick_Config+0x38>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	6053      	str	r3, [r2, #4]
//  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SysTick_Config+0x38>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x38>)
 80006da:	2207      	movs	r2, #7
 80006dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <SysTick_Handler>:
//variable for millis counter
volatile uint32_t GB_counter;


void SysTick_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	//GB_printString1("gup\n");
  GB_counter++;    // equivalent to HAL_IncTick(void)
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <SysTick_Handler+0x18>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a03      	ldr	r2, [pc, #12]	; (8000708 <SysTick_Handler+0x18>)
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000888 	.word	0x20000888

0800070c <GB_millis>:


//equivalent to  HAL_GetTick(void)
uint32_t GB_millis()
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	//GB_printString1("kun\n");
  return GB_counter;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <GB_millis+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000888 	.word	0x20000888

08000720 <systick_millis>:

void systick_millis(uint32_t clk_val)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <systick_millis+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <systick_millis+0x34>)
 800072e:	f043 0312 	orr.w	r3, r3, #18
 8000732:	6013      	str	r3, [r2, #0]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f7ff ff6f 	bl	8000618 <__NVIC_SetPriorityGrouping>
	SysTick_Config(clk_val);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffba 	bl	80006b4 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,0);
 8000740:	2100      	movs	r1, #0
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	f7ff ff8b 	bl	8000660 <__NVIC_SetPriority>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <GB_uart_pin_conf1>:

#include <GB_uart.h>
/**************STM32 UART1 ******************/
//PA10- RX, PA9-TX
void GB_uart_pin_conf1()
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <GB_uart_pin_conf1+0x48>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <GB_uart_pin_conf1+0x48>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6193      	str	r3, [r2, #24]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <GB_uart_pin_conf1+0x48>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <GB_uart_pin_conf1+0x48>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA9 as output*/
	 GPIOA->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0);
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 800077a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077e:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH |= (GPIO_CRH_CNF9_1);
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH &= ~(GPIO_CRH_CNF9_0);
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <GB_uart_pin_conf1+0x4c>)
 8000792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000796:	6053      	str	r3, [r2, #4]
	 /*
	   * PIN PA10 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010800 	.word	0x40010800

080007a8 <GB_uart_boud_rate1>:

void GB_uart_boud_rate1()
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	//DIV_Fraction = 0.36*16 = 0d5.76 = 0d6 (Nearest Whole number) = 0x6
	//DIV_Mantissa = 0d17 = 0x11
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
    // USART1->BRR = 0x116;
	USART1->BRR = 0xd05;
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <GB_uart_boud_rate1+0x14>)
 80007ae:	f640 5205 	movw	r2, #3333	; 0xd05
 80007b2:	609a      	str	r2, [r3, #8]

}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40013800 	.word	0x40013800

080007c0 <GB_uart_init1>:
void GB_uart_init1()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

	GB_uart_pin_conf1();
 80007c4:	f7ff ffc8 	bl	8000758 <GB_uart_pin_conf1>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART1->CR1 = 0x0000;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <GB_uart_init1+0x48>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART1->CR1 |= USART_CR1_UE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <GB_uart_init1+0x48>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <GB_uart_init1+0x48>)
 80007d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d8:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_M;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <GB_uart_init1+0x48>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <GB_uart_init1+0x48>)
 80007e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e4:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	//USART1->CR1 |= USART_CR1_RXNEIE;

	//enable transmitter
	USART1->CR1 |= USART_CR1_TE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <GB_uart_init1+0x48>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <GB_uart_init1+0x48>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART1->CR1 |= USART_CR1_RE;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <GB_uart_init1+0x48>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <GB_uart_init1+0x48>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate1();
 80007fe:	f7ff ffd3 	bl	80007a8 <GB_uart_boud_rate1>


}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40013800 	.word	0x40013800

0800080c <GB_UART_TxChar1>:
void GB_UART_TxChar1(uint32_t gb_byte)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	while(!(USART1->SR & USART_SR_TXE));
 8000814:	bf00      	nop
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <GB_UART_TxChar1+0x28>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f9      	beq.n	8000816 <GB_UART_TxChar1+0xa>
	USART1->DR = gb_byte;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <GB_UART_TxChar1+0x28>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6053      	str	r3, [r2, #4]

}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40013800 	.word	0x40013800

08000838 <GB_printString1>:
{
	while(!(USART2->SR & USART_SR_RXNE));
	return USART2->DR;
}
void GB_printString1(const char *gb_myString)      /////to print any string
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 8000840:	e006      	b.n	8000850 <GB_printString1+0x18>
	GB_UART_TxChar1(*gb_myString++);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffde 	bl	800080c <GB_UART_TxChar1>
	while (*gb_myString)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f4      	bne.n	8000842 <GB_printString1+0xa>
	while(!(USART1->SR & USART_SR_TC));
 8000858:	bf00      	nop
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <GB_printString1+0x38>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <GB_printString1+0x22>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40013800 	.word	0x40013800

08000874 <GB_decimel1>:
			GB_UART_TxChar1('1');
		}
	}
}
void GB_decimel1(uint32_t gb_val)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	unsigned char gb_buf[5];
	int8_t gb_ptr;
	for(gb_ptr=0;gb_ptr<5;++gb_ptr)
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e01d      	b.n	80008be <GB_decimel1+0x4a>
	{
		gb_buf[gb_ptr] = (gb_val % 10) + '0';
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <GB_decimel1+0xac>)
 8000886:	fba3 2301 	umull	r2, r3, r3, r1
 800088a:	08da      	lsrs	r2, r3, #3
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	1aca      	subs	r2, r1, r3
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089c:	3230      	adds	r2, #48	; 0x30
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	f107 0110 	add.w	r1, r7, #16
 80008a4:	440b      	add	r3, r1
 80008a6:	f803 2c08 	strb.w	r2, [r3, #-8]
		gb_val /= 10;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <GB_decimel1+0xac>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	607b      	str	r3, [r7, #4]
	for(gb_ptr=0;gb_ptr<5;++gb_ptr)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	dddd      	ble.n	8000882 <GB_decimel1+0xe>
	}
	for(gb_ptr=4;gb_ptr>0;--gb_ptr)
 80008c6:	2304      	movs	r3, #4
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e00c      	b.n	80008e6 <GB_decimel1+0x72>
	{
		if (gb_buf[gb_ptr] != '0')
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	4413      	add	r3, r2
 80008d6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008da:	2b30      	cmp	r3, #48	; 0x30
 80008dc:	d108      	bne.n	80008f0 <GB_decimel1+0x7c>
	for(gb_ptr=4;gb_ptr>0;--gb_ptr)
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dcee      	bgt.n	80008cc <GB_decimel1+0x58>
 80008ee:	e00f      	b.n	8000910 <GB_decimel1+0x9c>
		break;
 80008f0:	bf00      	nop
	}
	for(;gb_ptr>=0;--gb_ptr)
 80008f2:	e00d      	b.n	8000910 <GB_decimel1+0x9c>
	{
		GB_UART_TxChar1(gb_buf[gb_ptr]);
 80008f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	4413      	add	r3, r2
 80008fe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff82 	bl	800080c <GB_UART_TxChar1>
	for(;gb_ptr>=0;--gb_ptr)
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	3b01      	subs	r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	daed      	bge.n	80008f4 <GB_decimel1+0x80>
	}
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	cccccccd 	.word	0xcccccccd

08000924 <GB_uart_pin_conf2>:


//************************STM32- UART2 functions*******************//
//PA3- RX, PA2-TX
void GB_uart_pin_conf2()
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <GB_uart_pin_conf2+0x48>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a0f      	ldr	r2, [pc, #60]	; (800096c <GB_uart_pin_conf2+0x48>)
 800092e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000932:	61d3      	str	r3, [r2, #28]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <GB_uart_pin_conf2+0x48>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <GB_uart_pin_conf2+0x48>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA2 as output*/
	 GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 8000946:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800094a:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL |= (GPIO_CRL_CNF2_1);
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 8000952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000956:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <GB_uart_pin_conf2+0x4c>)
 800095e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000962:	6013      	str	r3, [r2, #0]
	 /*
	   * PIN PA3 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800

08000974 <GB_uart_boud_rate2>:

void GB_uart_boud_rate2()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	//usartdiv = 0d208.33
	//DIV_Fraction = 0.33*16 = 0d5.28 = 0d5(Nearest whole number) = 0x5
	//DIV_Mantissa = 0d208 = 0xd0
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
     USART2->BRR = 0x116;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <GB_uart_boud_rate2+0x14>)
 800097a:	f44f 728b 	mov.w	r2, #278	; 0x116
 800097e:	609a      	str	r2, [r3, #8]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40004400 	.word	0x40004400

0800098c <GB_uart_init2>:
void GB_uart_init2()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	GB_uart_pin_conf2();
 8000990:	f7ff ffc8 	bl	8000924 <GB_uart_pin_conf2>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART2->CR1 = 0x0000;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <GB_uart_init2+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART2->CR1 |= USART_CR1_UE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <GB_uart_init2+0x54>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <GB_uart_init2+0x54>)
 80009a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~USART_CR1_M;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <GB_uart_init2+0x54>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <GB_uart_init2+0x54>)
 80009ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009b0:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	USART2->CR1 |= USART_CR1_RXNEIE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <GB_uart_init2+0x54>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <GB_uart_init2+0x54>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	60d3      	str	r3, [r2, #12]

	//enable transmitter
	USART2->CR1 |= USART_CR1_TE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <GB_uart_init2+0x54>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <GB_uart_init2+0x54>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART2->CR1 |= USART_CR1_RE;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <GB_uart_init2+0x54>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <GB_uart_init2+0x54>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate2();
 80009d6:	f7ff ffcd 	bl	8000974 <GB_uart_boud_rate2>


}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40004400 	.word	0x40004400

080009e4 <GB_UART_TxChar2>:
void GB_UART_TxChar2(uint32_t gb_byte)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & USART_SR_TXE));
 80009ec:	bf00      	nop
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <GB_UART_TxChar2+0x28>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f9      	beq.n	80009ee <GB_UART_TxChar2+0xa>
	USART2->DR = gb_byte;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <GB_UART_TxChar2+0x28>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6053      	str	r3, [r2, #4]

}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40004400 	.word	0x40004400

08000a10 <GB_printString2>:

void GB_printString2(const char *gb_myString)      /////to print any string
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 8000a18:	e006      	b.n	8000a28 <GB_printString2+0x18>
	GB_UART_TxChar2(*gb_myString++);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ffde 	bl	80009e4 <GB_UART_TxChar2>
	while (*gb_myString)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f4      	bne.n	8000a1a <GB_printString2+0xa>
	while(!(USART2->SR & USART_SR_TC));
 8000a30:	bf00      	nop
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <GB_printString2+0x38>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f9      	beq.n	8000a32 <GB_printString2+0x22>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40004400 	.word	0x40004400

08000a4c <__NVIC_EnableIRQ>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000ade:	4b6a      	ldr	r3, [pc, #424]	; (8000c88 <main+0x1b0>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a69      	ldr	r2, [pc, #420]	; (8000c88 <main+0x1b0>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6193      	str	r3, [r2, #24]
		AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 8000aea:	4b68      	ldr	r3, [pc, #416]	; (8000c8c <main+0x1b4>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a67      	ldr	r2, [pc, #412]	; (8000c8c <main+0x1b4>)
 8000af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af4:	6053      	str	r3, [r2, #4]


		systick_millis(32000);
 8000af6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000afa:	f7ff fe11 	bl	8000720 <systick_millis>
		system_clk();
 8000afe:	f000 f909 	bl	8000d14 <system_clk>
		timer_initialise();
 8000b02:	f000 f995 	bl	8000e30 <timer_initialise>
		//terminal
		GB_uart_init1();
 8000b06:	f7ff fe5b 	bl	80007c0 <GB_uart_init1>
		GB_printString1("\nSTM32 ESP8266 Device Driver\n");
 8000b0a:	4861      	ldr	r0, [pc, #388]	; (8000c90 <main+0x1b8>)
 8000b0c:	f7ff fe94 	bl	8000838 <GB_printString1>
		GB_printString1("\nKunal Gupta\n");
 8000b10:	4860      	ldr	r0, [pc, #384]	; (8000c94 <main+0x1bc>)
 8000b12:	f7ff fe91 	bl	8000838 <GB_printString1>
		//ESP8266
		GB_uart_init2();
 8000b16:	f7ff ff39 	bl	800098c <GB_uart_init2>
		__NVIC_EnableIRQ(USART2_IRQn);
 8000b1a:	2026      	movs	r0, #38	; 0x26
 8000b1c:	f7ff ff96 	bl	8000a4c <__NVIC_EnableIRQ>
		__NVIC_SetPriority (USART2_IRQn, 1);
 8000b20:	2101      	movs	r1, #1
 8000b22:	2026      	movs	r0, #38	; 0x26
 8000b24:	f7ff ffae 	bl	8000a84 <__NVIC_SetPriority>

		int gb_c=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
     *
     * */
		while(1)
		{

			if(gb_c<1)
 8000b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	dc7b      	bgt.n	8000c2a <main+0x152>
               {
                   //Configure as Station
                   GB_send_command("AT+CWMODE=1\r\n");
 8000b32:	4859      	ldr	r0, [pc, #356]	; (8000c98 <main+0x1c0>)
 8000b34:	f7ff fbec 	bl	8000310 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b3c:	4857      	ldr	r0, [pc, #348]	; (8000c9c <main+0x1c4>)
 8000b3e:	f7ff fbf3 	bl	8000328 <GB_RFR_UART2>
                   //GB_getstring_UART2();
                   GB_printString1(gb_RX_DATA_UART2);
 8000b42:	4857      	ldr	r0, [pc, #348]	; (8000ca0 <main+0x1c8>)
 8000b44:	f7ff fe78 	bl	8000838 <GB_printString1>


                   //Start Multiple connection
                   GB_send_command("AT+CIPMUX=1\r\n");
 8000b48:	4856      	ldr	r0, [pc, #344]	; (8000ca4 <main+0x1cc>)
 8000b4a:	f7ff fbe1 	bl	8000310 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b52:	4852      	ldr	r0, [pc, #328]	; (8000c9c <main+0x1c4>)
 8000b54:	f7ff fbe8 	bl	8000328 <GB_RFR_UART2>
                   //GB_getstring_UART2();
                   GB_printString1(gb_RX_DATA_UART2);
 8000b58:	4851      	ldr	r0, [pc, #324]	; (8000ca0 <main+0x1c8>)
 8000b5a:	f7ff fe6d 	bl	8000838 <GB_printString1>

                   GB_send_command("AT+CIPSERVER=1,80\r\n");
 8000b5e:	4852      	ldr	r0, [pc, #328]	; (8000ca8 <main+0x1d0>)
 8000b60:	f7ff fbd6 	bl	8000310 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b68:	484c      	ldr	r0, [pc, #304]	; (8000c9c <main+0x1c4>)
 8000b6a:	f7ff fbdd 	bl	8000328 <GB_RFR_UART2>
                   GB_printString1(gb_RX_DATA_UART2);
 8000b6e:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <main+0x1c8>)
 8000b70:	f7ff fe62 	bl	8000838 <GB_printString1>

                   GB_send_command("AT+CWJAP?\r\n");
 8000b74:	484d      	ldr	r0, [pc, #308]	; (8000cac <main+0x1d4>)
 8000b76:	f7ff fbcb 	bl	8000310 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7e:	4847      	ldr	r0, [pc, #284]	; (8000c9c <main+0x1c4>)
 8000b80:	f7ff fbd2 	bl	8000328 <GB_RFR_UART2>
                   //GB_getstring_UART2();
                    GB_printString1(gb_RX_DATA_UART2);
 8000b84:	4846      	ldr	r0, [pc, #280]	; (8000ca0 <main+0x1c8>)
 8000b86:	f7ff fe57 	bl	8000838 <GB_printString1>

	              //  Connect To wifi
               //     GB_send_command("AT+CWJAP=\"Kunal\",\"Pottypotty12\"\r\n");
                   GB_send_command("AT+CWJAP=\"JioFiber 2.4ghz\",\"Mansi5481\"\r\n");
 8000b8a:	4849      	ldr	r0, [pc, #292]	; (8000cb0 <main+0x1d8>)
 8000b8c:	f7ff fbc0 	bl	8000310 <GB_send_command>
                  //  GB_send_command("AT+CWJAP=\"LALIT\",\"POTTYPOTTY\"\r\n");
                    GB_RFR_UART2("OK",10000);
 8000b90:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b94:	4841      	ldr	r0, [pc, #260]	; (8000c9c <main+0x1c4>)
 8000b96:	f7ff fbc7 	bl	8000328 <GB_RFR_UART2>
                    GB_printString1(gb_RX_DATA_UART2);
 8000b9a:	4841      	ldr	r0, [pc, #260]	; (8000ca0 <main+0x1c8>)
 8000b9c:	f7ff fe4c 	bl	8000838 <GB_printString1>

                    GB_send_command("AT+CIFSR\r\n");
 8000ba0:	4844      	ldr	r0, [pc, #272]	; (8000cb4 <main+0x1dc>)
 8000ba2:	f7ff fbb5 	bl	8000310 <GB_send_command>
                    GB_RFR_UART2("OK",1000);
 8000ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000baa:	483c      	ldr	r0, [pc, #240]	; (8000c9c <main+0x1c4>)
 8000bac:	f7ff fbbc 	bl	8000328 <GB_RFR_UART2>

                    //GB_printString1(gb_RX_DATA_UART2);


                      memset(gb_staip, '\0',sizeof(gb_staip));
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2214      	movs	r2, #20
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fa15 	bl	8000fe8 <memset>
                      memset(gb_stamac, '\0',sizeof(gb_stamac));
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2214      	movs	r2, #20
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fa0f 	bl	8000fe8 <memset>
                      char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 8000bca:	493b      	ldr	r1, [pc, #236]	; (8000cb8 <main+0x1e0>)
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <main+0x1c8>)
 8000bce:	f000 fa55 	bl	800107c <strstr>
 8000bd2:	6338      	str	r0, [r7, #48]	; 0x30
                      gb_p += strlen("+CWJAP:STAIP")+2;
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd6:	330e      	adds	r3, #14
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
                      char * gb_q=strchr(gb_p,'"');
 8000bda:	2122      	movs	r1, #34	; 0x22
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f000 fa2b 	bl	8001038 <strchr>
 8000be2:	62f8      	str	r0, [r7, #44]	; 0x2c
                       strncpy(gb_staip,gb_p,gb_q-gb_p);
 8000be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fa2d 	bl	8001052 <strncpy>
                      GB_printString1("IP address of Station is :");
 8000bf8:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0x1e4>)
 8000bfa:	f7ff fe1d 	bl	8000838 <GB_printString1>
                      GB_printString1(gb_staip);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fe18 	bl	8000838 <GB_printString1>

                        // GB_send_command("AT+CIPSTO?\r\n");
                         // GB_getstring_UART2();


                        gb_c++;
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34

                         GB_printString1("\n***********Waiting For Client to connect********\n");
 8000c0e:	482c      	ldr	r0, [pc, #176]	; (8000cc0 <main+0x1e8>)
 8000c10:	f7ff fe12 	bl	8000838 <GB_printString1>
                         GB_printString1("Browse IP address on the local Web-Browser:");
 8000c14:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <main+0x1ec>)
 8000c16:	f7ff fe0f 	bl	8000838 <GB_printString1>
                         GB_printString1(gb_staip);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe0a 	bl	8000838 <GB_printString1>
                         GB_printString1("\n");
 8000c24:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <main+0x1f0>)
 8000c26:	f7ff fe07 	bl	8000838 <GB_printString1>
               }

			uint8_t gb_g=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			gb_g = GB_getstring_ESP8266FORSERVER(gb_staip);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fbb5 	bl	80003a4 <GB_getstring_ESP8266FORSERVER>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			GB_printString1("gb_g =");
 8000c40:	4822      	ldr	r0, [pc, #136]	; (8000ccc <main+0x1f4>)
 8000c42:	f7ff fdf9 	bl	8000838 <GB_printString1>
			GB_decimel1(gb_g);
 8000c46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe12 	bl	8000874 <GB_decimel1>
			GB_printString1("\n");
 8000c50:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <main+0x1f0>)
 8000c52:	f7ff fdf1 	bl	8000838 <GB_printString1>
				if(gb_g==1)
 8000c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10e      	bne.n	8000c7c <main+0x1a4>
				{
					GB_esp8266_serverdatatoclientcipsend();
 8000c5e:	f7ff fc11 	bl	8000484 <GB_esp8266_serverdatatoclientcipsend>
					delay_ms(200);
 8000c62:	20c8      	movs	r0, #200	; 0xc8
 8000c64:	f000 f955 	bl	8000f12 <delay_ms>
				GB_esp8266_webpagedata();
 8000c68:	f7ff fc48 	bl	80004fc <GB_esp8266_webpagedata>
				delay_ms(200);
 8000c6c:	20c8      	movs	r0, #200	; 0xc8
 8000c6e:	f000 f950 	bl	8000f12 <delay_ms>
				GB_esp8266_webpageclose();
 8000c72:	f7ff fc8f 	bl	8000594 <GB_esp8266_webpageclose>
				delay_ms(200);
 8000c76:	20c8      	movs	r0, #200	; 0xc8
 8000c78:	f000 f94b 	bl	8000f12 <delay_ms>
				}

				delay_ms(5000);
 8000c7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c80:	f000 f947 	bl	8000f12 <delay_ms>
		{
 8000c84:	e752      	b.n	8000b2c <main+0x54>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	08001a64 	.word	0x08001a64
 8000c94:	08001a84 	.word	0x08001a84
 8000c98:	08001a94 	.word	0x08001a94
 8000c9c:	08001aa4 	.word	0x08001aa4
 8000ca0:	20000264 	.word	0x20000264
 8000ca4:	08001aa8 	.word	0x08001aa8
 8000ca8:	08001ab8 	.word	0x08001ab8
 8000cac:	08001acc 	.word	0x08001acc
 8000cb0:	08001ad8 	.word	0x08001ad8
 8000cb4:	08001b04 	.word	0x08001b04
 8000cb8:	08001b10 	.word	0x08001b10
 8000cbc:	08001b20 	.word	0x08001b20
 8000cc0:	08001b3c 	.word	0x08001b3c
 8000cc4:	08001b70 	.word	0x08001b70
 8000cc8:	08001b9c 	.word	0x08001b9c
 8000ccc:	08001ba0 	.word	0x08001ba0

08000cd0 <MCO_pin_conf>:
 * 5) Enable the PLL source and wait for it to become stable
 * 6) Enable the Clock source and wait for it to be set
 */

void MCO_pin_conf()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MCO_pin_conf+0x3c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <MCO_pin_conf+0x3c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
				 GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MCO_pin_conf+0x40>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <MCO_pin_conf+0x40>)
 8000ce6:	f023 030f 	bic.w	r3, r3, #15
 8000cea:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
				 GPIOA->CRH |= ( GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MCO_pin_conf+0x40>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <MCO_pin_conf+0x40>)
 8000cf2:	f043 0303 	orr.w	r3, r3, #3
 8000cf6:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO OUTPUT MODE AS alternate function push-pull
				 GPIOA->CRH |= ((GPIO_CRH_CNF8_1) | ~(GPIO_CRH_CNF8_0));
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MCO_pin_conf+0x40>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <MCO_pin_conf+0x40>)
 8000cfe:	f063 0304 	orn	r3, r3, #4
 8000d02:	6053      	str	r3, [r2, #4]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <system_clk>:

void system_clk()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	//ENABLE HSE & WAIT FOR HSE TO BECOME READY
	RCC->CR |= RCC_CR_HSEON ;   // HSE IS 8MHZ
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <system_clk+0x9c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <system_clk+0x9c>)
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY))
 8000d24:	bf00      	nop
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <system_clk+0x9c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f9      	beq.n	8000d26 <system_clk+0x12>
		 ;
	//configure flash prefetch and the latency related
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <system_clk+0xa0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <system_clk+0xa0>)
 8000d38:	f043 0312 	orr.w	r3, r3, #18
 8000d3c:	6013      	str	r3, [r2, #0]
	// CONFIGURE PLL AND Buses(AHB,APB1,APB2)
	//PLL SOURCE: HERE  HSE IS USED AS SOURCE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <system_clk+0x9c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <system_clk+0x9c>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d48:	6053      	str	r3, [r2, #4]
	//HSE DEVIDER FOR PLL(IF HSE IS USED AS SOURCE FOR PLL) : NOT DIVIDING CLOCK
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;  // SO INPUT TO PLL IS 8MHZ
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <system_clk+0x9c>)
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <system_clk+0x9c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6053      	str	r3, [r2, #4]
	//PLL MULTIPLIER: HERE I AM MULTIPLYING HSE OUTPUT WITH 4
	RCC->CFGR |= RCC_CFGR_PLLMULL4; //SO OUTPUT FROM PLL IS 32MHZ
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <system_clk+0x9c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <system_clk+0x9c>)
 8000d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d5c:	6053      	str	r3, [r2, #4]
	//BUS CLOCK CONFIGURE(APB1,APB2,AHB): NOT DIVIDING
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);  // all buses runs at 32MHZ
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <system_clk+0x9c>)
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <system_clk+0x9c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	6053      	str	r3, [r2, #4]
	//ENABLE THE PLL
	RCC->CR |= RCC_CR_PLLON;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <system_clk+0x9c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <system_clk+0x9c>)
 8000d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d70:	6013      	str	r3, [r2, #0]
	//WAIT FOR PLL TO SET
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8000d72:	bf00      	nop
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <system_clk+0x9c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <system_clk+0x60>
			;

	 //ENABLE SYSTEMCLK AND WAIT
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <system_clk+0x9c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <system_clk+0x9c>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6053      	str	r3, [r2, #4]
	 while(!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 8000d8c:	bf00      	nop
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <system_clk+0x9c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f9      	beq.n	8000d8e <system_clk+0x7a>
	 		 ;

	 MCO_pin_conf();
 8000d9a:	f7ff ff99 	bl	8000cd0 <MCO_pin_conf>
	 //CLOCK OUTPUT ON MCO PIN
	 RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <system_clk+0x9c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <system_clk+0x9c>)
 8000da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da8:	6053      	str	r3, [r2, #4]
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40022000 	.word	0x40022000

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f000 f8d4 	bl	8000f94 <__errno>
 8000dec:	4602      	mov	r2, r0
 8000dee:	230c      	movs	r3, #12
 8000df0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20005000 	.word	0x20005000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000258 	.word	0x20000258
 8000e20:	20000890 	.word	0x20000890

08000e24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <timer_initialise>:
 * 1 us = 1 count
 * 1ms = 1000us
 * 1 sec = 1000ms
 */
 void timer_initialise()
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6113      	str	r3, [r2, #16]

	//RESET THE TIMER2 BUS
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <timer_initialise+0xa4>)
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <timer_initialise+0xa4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <timer_initialise+0xa4>)
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <timer_initialise+0xa4>)
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	6113      	str	r3, [r2, #16]


	//Enable Timer2 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <timer_initialise+0xa4>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <timer_initialise+0xa4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	61d3      	str	r3, [r2, #28]


    TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6013      	str	r3, [r2, #0]
/**********************for example 1*******************************/
    //Timer prescaler value
    TIM2->PSC = 32;
 8000e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM2->PSC = 0;
    //Timer Auto reload register value
    TIM2->ARR = 0xffff;
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
    //65535
    //TIM2->ARR = 32;

    TIM2-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	f023 0302 	bic.w	r3, r3, #2
 8000ea8:	6013      	str	r3, [r2, #0]

   //Enable the update generation for updating the shadow register with preload register contents with new values
   TIM2->EGR |= TIM_EGR_UG;
 8000eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6153      	str	r3, [r2, #20]
   //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of my register
   TIM2->SR &= ~(TIM_SR_UIF);
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6113      	str	r3, [r2, #16]
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <delay_us>:
void delay_us(uint16_t us)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]
	//TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
	//TIM2->EGR |= TIM_EGR_UG; // SET UG bit to reinitailse the counter register with 0
	TIM2->CNT=0; // initialise counter register
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
	//while(!(TIM2->SR & (1<<TIM_SR_UIF)));
	//TIM2->SR &= ~(TIM_SR_UIF); //clear the update interrupt flag as this is set when CNT is reinitialsed with 0
	while(TIM2->CNT < us)
 8000efa:	bf00      	nop
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3f9      	bcc.n	8000efc <delay_us+0x24>
	{	//uart_tran_dec(TIM2->CNT);
	}
	//TIM2->CR1 &= ~TIM_CR1_CEN;

}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <delay_ms>:
void delay_ms(uint16_t ms)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	81fb      	strh	r3, [r7, #14]
 8000f20:	e006      	b.n	8000f30 <delay_ms+0x1e>
	delay_us(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f7ff ffd7 	bl	8000ed8 <delay_us>
	for (uint16_t i=0; i<ms; i++)
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	81fb      	strh	r3, [r7, #14]
 8000f30:	89fa      	ldrh	r2, [r7, #14]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3f4      	bcc.n	8000f22 <delay_ms+0x10>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f44:	f7ff ff6e 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6e:	f000 f817 	bl	8000fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f72:	f7ff fdb1 	bl	8000ad8 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8000f84:	08001be4 	.word	0x08001be4
  ldr r2, =_sbss
 8000f88:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8000f8c:	20000890 	.word	0x20000890

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <__errno>:
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <__errno+0x8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001cc 	.word	0x200001cc

08000fa0 <__libc_init_array>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4e0c      	ldr	r6, [pc, #48]	; (8000fd8 <__libc_init_array+0x38>)
 8000fa6:	4c0d      	ldr	r4, [pc, #52]	; (8000fdc <__libc_init_array+0x3c>)
 8000fa8:	1ba4      	subs	r4, r4, r6
 8000faa:	10a4      	asrs	r4, r4, #2
 8000fac:	42a5      	cmp	r5, r4
 8000fae:	d109      	bne.n	8000fc4 <__libc_init_array+0x24>
 8000fb0:	f000 fc70 	bl	8001894 <_init>
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	4e0a      	ldr	r6, [pc, #40]	; (8000fe0 <__libc_init_array+0x40>)
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <__libc_init_array+0x44>)
 8000fba:	1ba4      	subs	r4, r4, r6
 8000fbc:	10a4      	asrs	r4, r4, #2
 8000fbe:	42a5      	cmp	r5, r4
 8000fc0:	d105      	bne.n	8000fce <__libc_init_array+0x2e>
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc8:	4798      	blx	r3
 8000fca:	3501      	adds	r5, #1
 8000fcc:	e7ee      	b.n	8000fac <__libc_init_array+0xc>
 8000fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd2:	4798      	blx	r3
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	e7f2      	b.n	8000fbe <__libc_init_array+0x1e>
 8000fd8:	08001bdc 	.word	0x08001bdc
 8000fdc:	08001bdc 	.word	0x08001bdc
 8000fe0:	08001bdc 	.word	0x08001bdc
 8000fe4:	08001be0 	.word	0x08001be0

08000fe8 <memset>:
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4402      	add	r2, r0
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <memset+0xa>
 8000ff0:	4770      	bx	lr
 8000ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ff6:	e7f9      	b.n	8000fec <memset+0x4>

08000ff8 <siprintf>:
 8000ff8:	b40e      	push	{r1, r2, r3}
 8000ffa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ffe:	b500      	push	{lr}
 8001000:	b09c      	sub	sp, #112	; 0x70
 8001002:	ab1d      	add	r3, sp, #116	; 0x74
 8001004:	9002      	str	r0, [sp, #8]
 8001006:	9006      	str	r0, [sp, #24]
 8001008:	9107      	str	r1, [sp, #28]
 800100a:	9104      	str	r1, [sp, #16]
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <siprintf+0x38>)
 800100e:	4909      	ldr	r1, [pc, #36]	; (8001034 <siprintf+0x3c>)
 8001010:	f853 2b04 	ldr.w	r2, [r3], #4
 8001014:	9105      	str	r1, [sp, #20]
 8001016:	6800      	ldr	r0, [r0, #0]
 8001018:	a902      	add	r1, sp, #8
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f000 f8a2 	bl	8001164 <_svfiprintf_r>
 8001020:	2200      	movs	r2, #0
 8001022:	9b02      	ldr	r3, [sp, #8]
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	b01c      	add	sp, #112	; 0x70
 8001028:	f85d eb04 	ldr.w	lr, [sp], #4
 800102c:	b003      	add	sp, #12
 800102e:	4770      	bx	lr
 8001030:	200001cc 	.word	0x200001cc
 8001034:	ffff0208 	.word	0xffff0208

08001038 <strchr>:
 8001038:	b2c9      	uxtb	r1, r1
 800103a:	4603      	mov	r3, r0
 800103c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001040:	b11a      	cbz	r2, 800104a <strchr+0x12>
 8001042:	428a      	cmp	r2, r1
 8001044:	d1f9      	bne.n	800103a <strchr+0x2>
 8001046:	4618      	mov	r0, r3
 8001048:	4770      	bx	lr
 800104a:	2900      	cmp	r1, #0
 800104c:	bf18      	it	ne
 800104e:	2300      	movne	r3, #0
 8001050:	e7f9      	b.n	8001046 <strchr+0xe>

08001052 <strncpy>:
 8001052:	b570      	push	{r4, r5, r6, lr}
 8001054:	4604      	mov	r4, r0
 8001056:	3901      	subs	r1, #1
 8001058:	b902      	cbnz	r2, 800105c <strncpy+0xa>
 800105a:	bd70      	pop	{r4, r5, r6, pc}
 800105c:	4623      	mov	r3, r4
 800105e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8001062:	1e56      	subs	r6, r2, #1
 8001064:	f803 5b01 	strb.w	r5, [r3], #1
 8001068:	b92d      	cbnz	r5, 8001076 <strncpy+0x24>
 800106a:	4414      	add	r4, r2
 800106c:	42a3      	cmp	r3, r4
 800106e:	d0f4      	beq.n	800105a <strncpy+0x8>
 8001070:	f803 5b01 	strb.w	r5, [r3], #1
 8001074:	e7fa      	b.n	800106c <strncpy+0x1a>
 8001076:	461c      	mov	r4, r3
 8001078:	4632      	mov	r2, r6
 800107a:	e7ed      	b.n	8001058 <strncpy+0x6>

0800107c <strstr>:
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	7803      	ldrb	r3, [r0, #0]
 8001080:	b17b      	cbz	r3, 80010a2 <strstr+0x26>
 8001082:	4604      	mov	r4, r0
 8001084:	7823      	ldrb	r3, [r4, #0]
 8001086:	4620      	mov	r0, r4
 8001088:	1c66      	adds	r6, r4, #1
 800108a:	b17b      	cbz	r3, 80010ac <strstr+0x30>
 800108c:	1e4a      	subs	r2, r1, #1
 800108e:	1e63      	subs	r3, r4, #1
 8001090:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001094:	b14d      	cbz	r5, 80010aa <strstr+0x2e>
 8001096:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800109a:	4634      	mov	r4, r6
 800109c:	42af      	cmp	r7, r5
 800109e:	d0f7      	beq.n	8001090 <strstr+0x14>
 80010a0:	e7f0      	b.n	8001084 <strstr+0x8>
 80010a2:	780b      	ldrb	r3, [r1, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf18      	it	ne
 80010a8:	2000      	movne	r0, #0
 80010aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ac:	4618      	mov	r0, r3
 80010ae:	e7fc      	b.n	80010aa <strstr+0x2e>

080010b0 <__ssputs_r>:
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	688e      	ldr	r6, [r1, #8]
 80010b6:	4682      	mov	sl, r0
 80010b8:	429e      	cmp	r6, r3
 80010ba:	460c      	mov	r4, r1
 80010bc:	4690      	mov	r8, r2
 80010be:	4699      	mov	r9, r3
 80010c0:	d837      	bhi.n	8001132 <__ssputs_r+0x82>
 80010c2:	898a      	ldrh	r2, [r1, #12]
 80010c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80010c8:	d031      	beq.n	800112e <__ssputs_r+0x7e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	6825      	ldr	r5, [r4, #0]
 80010ce:	6909      	ldr	r1, [r1, #16]
 80010d0:	1a6f      	subs	r7, r5, r1
 80010d2:	6965      	ldr	r5, [r4, #20]
 80010d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80010dc:	f109 0301 	add.w	r3, r9, #1
 80010e0:	443b      	add	r3, r7
 80010e2:	429d      	cmp	r5, r3
 80010e4:	bf38      	it	cc
 80010e6:	461d      	movcc	r5, r3
 80010e8:	0553      	lsls	r3, r2, #21
 80010ea:	d530      	bpl.n	800114e <__ssputs_r+0x9e>
 80010ec:	4629      	mov	r1, r5
 80010ee:	f000 fb37 	bl	8001760 <_malloc_r>
 80010f2:	4606      	mov	r6, r0
 80010f4:	b950      	cbnz	r0, 800110c <__ssputs_r+0x5c>
 80010f6:	230c      	movs	r3, #12
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f8ca 3000 	str.w	r3, [sl]
 8001100:	89a3      	ldrh	r3, [r4, #12]
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	81a3      	strh	r3, [r4, #12]
 8001108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110c:	463a      	mov	r2, r7
 800110e:	6921      	ldr	r1, [r4, #16]
 8001110:	f000 fab6 	bl	8001680 <memcpy>
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111e:	81a3      	strh	r3, [r4, #12]
 8001120:	6126      	str	r6, [r4, #16]
 8001122:	443e      	add	r6, r7
 8001124:	6026      	str	r6, [r4, #0]
 8001126:	464e      	mov	r6, r9
 8001128:	6165      	str	r5, [r4, #20]
 800112a:	1bed      	subs	r5, r5, r7
 800112c:	60a5      	str	r5, [r4, #8]
 800112e:	454e      	cmp	r6, r9
 8001130:	d900      	bls.n	8001134 <__ssputs_r+0x84>
 8001132:	464e      	mov	r6, r9
 8001134:	4632      	mov	r2, r6
 8001136:	4641      	mov	r1, r8
 8001138:	6820      	ldr	r0, [r4, #0]
 800113a:	f000 faac 	bl	8001696 <memmove>
 800113e:	68a3      	ldr	r3, [r4, #8]
 8001140:	2000      	movs	r0, #0
 8001142:	1b9b      	subs	r3, r3, r6
 8001144:	60a3      	str	r3, [r4, #8]
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	441e      	add	r6, r3
 800114a:	6026      	str	r6, [r4, #0]
 800114c:	e7dc      	b.n	8001108 <__ssputs_r+0x58>
 800114e:	462a      	mov	r2, r5
 8001150:	f000 fb60 	bl	8001814 <_realloc_r>
 8001154:	4606      	mov	r6, r0
 8001156:	2800      	cmp	r0, #0
 8001158:	d1e2      	bne.n	8001120 <__ssputs_r+0x70>
 800115a:	6921      	ldr	r1, [r4, #16]
 800115c:	4650      	mov	r0, sl
 800115e:	f000 fab3 	bl	80016c8 <_free_r>
 8001162:	e7c8      	b.n	80010f6 <__ssputs_r+0x46>

08001164 <_svfiprintf_r>:
 8001164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001168:	461d      	mov	r5, r3
 800116a:	898b      	ldrh	r3, [r1, #12]
 800116c:	b09d      	sub	sp, #116	; 0x74
 800116e:	061f      	lsls	r7, r3, #24
 8001170:	4680      	mov	r8, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4616      	mov	r6, r2
 8001176:	d50f      	bpl.n	8001198 <_svfiprintf_r+0x34>
 8001178:	690b      	ldr	r3, [r1, #16]
 800117a:	b96b      	cbnz	r3, 8001198 <_svfiprintf_r+0x34>
 800117c:	2140      	movs	r1, #64	; 0x40
 800117e:	f000 faef 	bl	8001760 <_malloc_r>
 8001182:	6020      	str	r0, [r4, #0]
 8001184:	6120      	str	r0, [r4, #16]
 8001186:	b928      	cbnz	r0, 8001194 <_svfiprintf_r+0x30>
 8001188:	230c      	movs	r3, #12
 800118a:	f8c8 3000 	str.w	r3, [r8]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	e0c8      	b.n	8001326 <_svfiprintf_r+0x1c2>
 8001194:	2340      	movs	r3, #64	; 0x40
 8001196:	6163      	str	r3, [r4, #20]
 8001198:	2300      	movs	r3, #0
 800119a:	9309      	str	r3, [sp, #36]	; 0x24
 800119c:	2320      	movs	r3, #32
 800119e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011a2:	2330      	movs	r3, #48	; 0x30
 80011a4:	f04f 0b01 	mov.w	fp, #1
 80011a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011ac:	9503      	str	r5, [sp, #12]
 80011ae:	4637      	mov	r7, r6
 80011b0:	463d      	mov	r5, r7
 80011b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011b6:	b10b      	cbz	r3, 80011bc <_svfiprintf_r+0x58>
 80011b8:	2b25      	cmp	r3, #37	; 0x25
 80011ba:	d13e      	bne.n	800123a <_svfiprintf_r+0xd6>
 80011bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80011c0:	d00b      	beq.n	80011da <_svfiprintf_r+0x76>
 80011c2:	4653      	mov	r3, sl
 80011c4:	4632      	mov	r2, r6
 80011c6:	4621      	mov	r1, r4
 80011c8:	4640      	mov	r0, r8
 80011ca:	f7ff ff71 	bl	80010b0 <__ssputs_r>
 80011ce:	3001      	adds	r0, #1
 80011d0:	f000 80a4 	beq.w	800131c <_svfiprintf_r+0x1b8>
 80011d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011d6:	4453      	add	r3, sl
 80011d8:	9309      	str	r3, [sp, #36]	; 0x24
 80011da:	783b      	ldrb	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 809d 	beq.w	800131c <_svfiprintf_r+0x1b8>
 80011e2:	2300      	movs	r3, #0
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011ec:	9304      	str	r3, [sp, #16]
 80011ee:	9307      	str	r3, [sp, #28]
 80011f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011f4:	931a      	str	r3, [sp, #104]	; 0x68
 80011f6:	462f      	mov	r7, r5
 80011f8:	2205      	movs	r2, #5
 80011fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80011fe:	4850      	ldr	r0, [pc, #320]	; (8001340 <_svfiprintf_r+0x1dc>)
 8001200:	f000 fa30 	bl	8001664 <memchr>
 8001204:	9b04      	ldr	r3, [sp, #16]
 8001206:	b9d0      	cbnz	r0, 800123e <_svfiprintf_r+0xda>
 8001208:	06d9      	lsls	r1, r3, #27
 800120a:	bf44      	itt	mi
 800120c:	2220      	movmi	r2, #32
 800120e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001212:	071a      	lsls	r2, r3, #28
 8001214:	bf44      	itt	mi
 8001216:	222b      	movmi	r2, #43	; 0x2b
 8001218:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800121c:	782a      	ldrb	r2, [r5, #0]
 800121e:	2a2a      	cmp	r2, #42	; 0x2a
 8001220:	d015      	beq.n	800124e <_svfiprintf_r+0xea>
 8001222:	462f      	mov	r7, r5
 8001224:	2000      	movs	r0, #0
 8001226:	250a      	movs	r5, #10
 8001228:	9a07      	ldr	r2, [sp, #28]
 800122a:	4639      	mov	r1, r7
 800122c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001230:	3b30      	subs	r3, #48	; 0x30
 8001232:	2b09      	cmp	r3, #9
 8001234:	d94d      	bls.n	80012d2 <_svfiprintf_r+0x16e>
 8001236:	b1b8      	cbz	r0, 8001268 <_svfiprintf_r+0x104>
 8001238:	e00f      	b.n	800125a <_svfiprintf_r+0xf6>
 800123a:	462f      	mov	r7, r5
 800123c:	e7b8      	b.n	80011b0 <_svfiprintf_r+0x4c>
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <_svfiprintf_r+0x1dc>)
 8001240:	463d      	mov	r5, r7
 8001242:	1a80      	subs	r0, r0, r2
 8001244:	fa0b f000 	lsl.w	r0, fp, r0
 8001248:	4318      	orrs	r0, r3
 800124a:	9004      	str	r0, [sp, #16]
 800124c:	e7d3      	b.n	80011f6 <_svfiprintf_r+0x92>
 800124e:	9a03      	ldr	r2, [sp, #12]
 8001250:	1d11      	adds	r1, r2, #4
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	9103      	str	r1, [sp, #12]
 8001256:	2a00      	cmp	r2, #0
 8001258:	db01      	blt.n	800125e <_svfiprintf_r+0xfa>
 800125a:	9207      	str	r2, [sp, #28]
 800125c:	e004      	b.n	8001268 <_svfiprintf_r+0x104>
 800125e:	4252      	negs	r2, r2
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	9207      	str	r2, [sp, #28]
 8001266:	9304      	str	r3, [sp, #16]
 8001268:	783b      	ldrb	r3, [r7, #0]
 800126a:	2b2e      	cmp	r3, #46	; 0x2e
 800126c:	d10c      	bne.n	8001288 <_svfiprintf_r+0x124>
 800126e:	787b      	ldrb	r3, [r7, #1]
 8001270:	2b2a      	cmp	r3, #42	; 0x2a
 8001272:	d133      	bne.n	80012dc <_svfiprintf_r+0x178>
 8001274:	9b03      	ldr	r3, [sp, #12]
 8001276:	3702      	adds	r7, #2
 8001278:	1d1a      	adds	r2, r3, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	9203      	str	r2, [sp, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	bfb8      	it	lt
 8001282:	f04f 33ff 	movlt.w	r3, #4294967295
 8001286:	9305      	str	r3, [sp, #20]
 8001288:	4d2e      	ldr	r5, [pc, #184]	; (8001344 <_svfiprintf_r+0x1e0>)
 800128a:	2203      	movs	r2, #3
 800128c:	7839      	ldrb	r1, [r7, #0]
 800128e:	4628      	mov	r0, r5
 8001290:	f000 f9e8 	bl	8001664 <memchr>
 8001294:	b138      	cbz	r0, 80012a6 <_svfiprintf_r+0x142>
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	1b40      	subs	r0, r0, r5
 800129a:	fa03 f000 	lsl.w	r0, r3, r0
 800129e:	9b04      	ldr	r3, [sp, #16]
 80012a0:	3701      	adds	r7, #1
 80012a2:	4303      	orrs	r3, r0
 80012a4:	9304      	str	r3, [sp, #16]
 80012a6:	7839      	ldrb	r1, [r7, #0]
 80012a8:	2206      	movs	r2, #6
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <_svfiprintf_r+0x1e4>)
 80012ac:	1c7e      	adds	r6, r7, #1
 80012ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012b2:	f000 f9d7 	bl	8001664 <memchr>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d038      	beq.n	800132c <_svfiprintf_r+0x1c8>
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <_svfiprintf_r+0x1e8>)
 80012bc:	bb13      	cbnz	r3, 8001304 <_svfiprintf_r+0x1a0>
 80012be:	9b03      	ldr	r3, [sp, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	f023 0307 	bic.w	r3, r3, #7
 80012c6:	3308      	adds	r3, #8
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012cc:	444b      	add	r3, r9
 80012ce:	9309      	str	r3, [sp, #36]	; 0x24
 80012d0:	e76d      	b.n	80011ae <_svfiprintf_r+0x4a>
 80012d2:	fb05 3202 	mla	r2, r5, r2, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	460f      	mov	r7, r1
 80012da:	e7a6      	b.n	800122a <_svfiprintf_r+0xc6>
 80012dc:	2300      	movs	r3, #0
 80012de:	250a      	movs	r5, #10
 80012e0:	4619      	mov	r1, r3
 80012e2:	3701      	adds	r7, #1
 80012e4:	9305      	str	r3, [sp, #20]
 80012e6:	4638      	mov	r0, r7
 80012e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012ec:	3a30      	subs	r2, #48	; 0x30
 80012ee:	2a09      	cmp	r2, #9
 80012f0:	d903      	bls.n	80012fa <_svfiprintf_r+0x196>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0c8      	beq.n	8001288 <_svfiprintf_r+0x124>
 80012f6:	9105      	str	r1, [sp, #20]
 80012f8:	e7c6      	b.n	8001288 <_svfiprintf_r+0x124>
 80012fa:	fb05 2101 	mla	r1, r5, r1, r2
 80012fe:	2301      	movs	r3, #1
 8001300:	4607      	mov	r7, r0
 8001302:	e7f0      	b.n	80012e6 <_svfiprintf_r+0x182>
 8001304:	ab03      	add	r3, sp, #12
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4622      	mov	r2, r4
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_svfiprintf_r+0x1ec>)
 800130c:	a904      	add	r1, sp, #16
 800130e:	4640      	mov	r0, r8
 8001310:	f3af 8000 	nop.w
 8001314:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001318:	4681      	mov	r9, r0
 800131a:	d1d6      	bne.n	80012ca <_svfiprintf_r+0x166>
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	065b      	lsls	r3, r3, #25
 8001320:	f53f af35 	bmi.w	800118e <_svfiprintf_r+0x2a>
 8001324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001326:	b01d      	add	sp, #116	; 0x74
 8001328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132c:	ab03      	add	r3, sp, #12
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	4622      	mov	r2, r4
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_svfiprintf_r+0x1ec>)
 8001334:	a904      	add	r1, sp, #16
 8001336:	4640      	mov	r0, r8
 8001338:	f000 f882 	bl	8001440 <_printf_i>
 800133c:	e7ea      	b.n	8001314 <_svfiprintf_r+0x1b0>
 800133e:	bf00      	nop
 8001340:	08001ba7 	.word	0x08001ba7
 8001344:	08001bad 	.word	0x08001bad
 8001348:	08001bb1 	.word	0x08001bb1
 800134c:	00000000 	.word	0x00000000
 8001350:	080010b1 	.word	0x080010b1

08001354 <_printf_common>:
 8001354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001358:	4691      	mov	r9, r2
 800135a:	461f      	mov	r7, r3
 800135c:	688a      	ldr	r2, [r1, #8]
 800135e:	690b      	ldr	r3, [r1, #16]
 8001360:	4606      	mov	r6, r0
 8001362:	4293      	cmp	r3, r2
 8001364:	bfb8      	it	lt
 8001366:	4613      	movlt	r3, r2
 8001368:	f8c9 3000 	str.w	r3, [r9]
 800136c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001370:	460c      	mov	r4, r1
 8001372:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001376:	b112      	cbz	r2, 800137e <_printf_common+0x2a>
 8001378:	3301      	adds	r3, #1
 800137a:	f8c9 3000 	str.w	r3, [r9]
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	0699      	lsls	r1, r3, #26
 8001382:	bf42      	ittt	mi
 8001384:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001388:	3302      	addmi	r3, #2
 800138a:	f8c9 3000 	strmi.w	r3, [r9]
 800138e:	6825      	ldr	r5, [r4, #0]
 8001390:	f015 0506 	ands.w	r5, r5, #6
 8001394:	d107      	bne.n	80013a6 <_printf_common+0x52>
 8001396:	f104 0a19 	add.w	sl, r4, #25
 800139a:	68e3      	ldr	r3, [r4, #12]
 800139c:	f8d9 2000 	ldr.w	r2, [r9]
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	dc29      	bgt.n	80013fa <_printf_common+0xa6>
 80013a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	3300      	adds	r3, #0
 80013ae:	bf18      	it	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	0692      	lsls	r2, r2, #26
 80013b4:	d42e      	bmi.n	8001414 <_printf_common+0xc0>
 80013b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013ba:	4639      	mov	r1, r7
 80013bc:	4630      	mov	r0, r6
 80013be:	47c0      	blx	r8
 80013c0:	3001      	adds	r0, #1
 80013c2:	d021      	beq.n	8001408 <_printf_common+0xb4>
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	68e5      	ldr	r5, [r4, #12]
 80013c8:	f003 0306 	and.w	r3, r3, #6
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	bf18      	it	ne
 80013d0:	2500      	movne	r5, #0
 80013d2:	f8d9 2000 	ldr.w	r2, [r9]
 80013d6:	f04f 0900 	mov.w	r9, #0
 80013da:	bf08      	it	eq
 80013dc:	1aad      	subeq	r5, r5, r2
 80013de:	68a3      	ldr	r3, [r4, #8]
 80013e0:	6922      	ldr	r2, [r4, #16]
 80013e2:	bf08      	it	eq
 80013e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bfc4      	itt	gt
 80013ec:	1a9b      	subgt	r3, r3, r2
 80013ee:	18ed      	addgt	r5, r5, r3
 80013f0:	341a      	adds	r4, #26
 80013f2:	454d      	cmp	r5, r9
 80013f4:	d11a      	bne.n	800142c <_printf_common+0xd8>
 80013f6:	2000      	movs	r0, #0
 80013f8:	e008      	b.n	800140c <_printf_common+0xb8>
 80013fa:	2301      	movs	r3, #1
 80013fc:	4652      	mov	r2, sl
 80013fe:	4639      	mov	r1, r7
 8001400:	4630      	mov	r0, r6
 8001402:	47c0      	blx	r8
 8001404:	3001      	adds	r0, #1
 8001406:	d103      	bne.n	8001410 <_printf_common+0xbc>
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001410:	3501      	adds	r5, #1
 8001412:	e7c2      	b.n	800139a <_printf_common+0x46>
 8001414:	2030      	movs	r0, #48	; 0x30
 8001416:	18e1      	adds	r1, r4, r3
 8001418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001422:	4422      	add	r2, r4
 8001424:	3302      	adds	r3, #2
 8001426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800142a:	e7c4      	b.n	80013b6 <_printf_common+0x62>
 800142c:	2301      	movs	r3, #1
 800142e:	4622      	mov	r2, r4
 8001430:	4639      	mov	r1, r7
 8001432:	4630      	mov	r0, r6
 8001434:	47c0      	blx	r8
 8001436:	3001      	adds	r0, #1
 8001438:	d0e6      	beq.n	8001408 <_printf_common+0xb4>
 800143a:	f109 0901 	add.w	r9, r9, #1
 800143e:	e7d8      	b.n	80013f2 <_printf_common+0x9e>

08001440 <_printf_i>:
 8001440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001444:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001448:	460c      	mov	r4, r1
 800144a:	7e09      	ldrb	r1, [r1, #24]
 800144c:	b085      	sub	sp, #20
 800144e:	296e      	cmp	r1, #110	; 0x6e
 8001450:	4617      	mov	r7, r2
 8001452:	4606      	mov	r6, r0
 8001454:	4698      	mov	r8, r3
 8001456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001458:	f000 80b3 	beq.w	80015c2 <_printf_i+0x182>
 800145c:	d822      	bhi.n	80014a4 <_printf_i+0x64>
 800145e:	2963      	cmp	r1, #99	; 0x63
 8001460:	d036      	beq.n	80014d0 <_printf_i+0x90>
 8001462:	d80a      	bhi.n	800147a <_printf_i+0x3a>
 8001464:	2900      	cmp	r1, #0
 8001466:	f000 80b9 	beq.w	80015dc <_printf_i+0x19c>
 800146a:	2958      	cmp	r1, #88	; 0x58
 800146c:	f000 8083 	beq.w	8001576 <_printf_i+0x136>
 8001470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001474:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001478:	e032      	b.n	80014e0 <_printf_i+0xa0>
 800147a:	2964      	cmp	r1, #100	; 0x64
 800147c:	d001      	beq.n	8001482 <_printf_i+0x42>
 800147e:	2969      	cmp	r1, #105	; 0x69
 8001480:	d1f6      	bne.n	8001470 <_printf_i+0x30>
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	6813      	ldr	r3, [r2, #0]
 8001486:	0605      	lsls	r5, r0, #24
 8001488:	f103 0104 	add.w	r1, r3, #4
 800148c:	d52a      	bpl.n	80014e4 <_printf_i+0xa4>
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6011      	str	r1, [r2, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da03      	bge.n	800149e <_printf_i+0x5e>
 8001496:	222d      	movs	r2, #45	; 0x2d
 8001498:	425b      	negs	r3, r3
 800149a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800149e:	486f      	ldr	r0, [pc, #444]	; (800165c <_printf_i+0x21c>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	e039      	b.n	8001518 <_printf_i+0xd8>
 80014a4:	2973      	cmp	r1, #115	; 0x73
 80014a6:	f000 809d 	beq.w	80015e4 <_printf_i+0x1a4>
 80014aa:	d808      	bhi.n	80014be <_printf_i+0x7e>
 80014ac:	296f      	cmp	r1, #111	; 0x6f
 80014ae:	d020      	beq.n	80014f2 <_printf_i+0xb2>
 80014b0:	2970      	cmp	r1, #112	; 0x70
 80014b2:	d1dd      	bne.n	8001470 <_printf_i+0x30>
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6023      	str	r3, [r4, #0]
 80014bc:	e003      	b.n	80014c6 <_printf_i+0x86>
 80014be:	2975      	cmp	r1, #117	; 0x75
 80014c0:	d017      	beq.n	80014f2 <_printf_i+0xb2>
 80014c2:	2978      	cmp	r1, #120	; 0x78
 80014c4:	d1d4      	bne.n	8001470 <_printf_i+0x30>
 80014c6:	2378      	movs	r3, #120	; 0x78
 80014c8:	4865      	ldr	r0, [pc, #404]	; (8001660 <_printf_i+0x220>)
 80014ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ce:	e055      	b.n	800157c <_printf_i+0x13c>
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014d6:	1d19      	adds	r1, r3, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6011      	str	r1, [r2, #0]
 80014dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014e0:	2301      	movs	r3, #1
 80014e2:	e08c      	b.n	80015fe <_printf_i+0x1be>
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80014ea:	6011      	str	r1, [r2, #0]
 80014ec:	bf18      	it	ne
 80014ee:	b21b      	sxthne	r3, r3
 80014f0:	e7cf      	b.n	8001492 <_printf_i+0x52>
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	6825      	ldr	r5, [r4, #0]
 80014f6:	1d18      	adds	r0, r3, #4
 80014f8:	6010      	str	r0, [r2, #0]
 80014fa:	0628      	lsls	r0, r5, #24
 80014fc:	d501      	bpl.n	8001502 <_printf_i+0xc2>
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e002      	b.n	8001508 <_printf_i+0xc8>
 8001502:	0668      	lsls	r0, r5, #25
 8001504:	d5fb      	bpl.n	80014fe <_printf_i+0xbe>
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	296f      	cmp	r1, #111	; 0x6f
 800150a:	bf14      	ite	ne
 800150c:	220a      	movne	r2, #10
 800150e:	2208      	moveq	r2, #8
 8001510:	4852      	ldr	r0, [pc, #328]	; (800165c <_printf_i+0x21c>)
 8001512:	2100      	movs	r1, #0
 8001514:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001518:	6865      	ldr	r5, [r4, #4]
 800151a:	2d00      	cmp	r5, #0
 800151c:	60a5      	str	r5, [r4, #8]
 800151e:	f2c0 8095 	blt.w	800164c <_printf_i+0x20c>
 8001522:	6821      	ldr	r1, [r4, #0]
 8001524:	f021 0104 	bic.w	r1, r1, #4
 8001528:	6021      	str	r1, [r4, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d13d      	bne.n	80015aa <_printf_i+0x16a>
 800152e:	2d00      	cmp	r5, #0
 8001530:	f040 808e 	bne.w	8001650 <_printf_i+0x210>
 8001534:	4665      	mov	r5, ip
 8001536:	2a08      	cmp	r2, #8
 8001538:	d10b      	bne.n	8001552 <_printf_i+0x112>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	07db      	lsls	r3, r3, #31
 800153e:	d508      	bpl.n	8001552 <_printf_i+0x112>
 8001540:	6923      	ldr	r3, [r4, #16]
 8001542:	6862      	ldr	r2, [r4, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	bfde      	ittt	le
 8001548:	2330      	movle	r3, #48	; 0x30
 800154a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800154e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001552:	ebac 0305 	sub.w	r3, ip, r5
 8001556:	6123      	str	r3, [r4, #16]
 8001558:	f8cd 8000 	str.w	r8, [sp]
 800155c:	463b      	mov	r3, r7
 800155e:	aa03      	add	r2, sp, #12
 8001560:	4621      	mov	r1, r4
 8001562:	4630      	mov	r0, r6
 8001564:	f7ff fef6 	bl	8001354 <_printf_common>
 8001568:	3001      	adds	r0, #1
 800156a:	d14d      	bne.n	8001608 <_printf_i+0x1c8>
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	b005      	add	sp, #20
 8001572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001576:	4839      	ldr	r0, [pc, #228]	; (800165c <_printf_i+0x21c>)
 8001578:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	6821      	ldr	r1, [r4, #0]
 8001580:	1d1d      	adds	r5, r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6015      	str	r5, [r2, #0]
 8001586:	060a      	lsls	r2, r1, #24
 8001588:	d50b      	bpl.n	80015a2 <_printf_i+0x162>
 800158a:	07ca      	lsls	r2, r1, #31
 800158c:	bf44      	itt	mi
 800158e:	f041 0120 	orrmi.w	r1, r1, #32
 8001592:	6021      	strmi	r1, [r4, #0]
 8001594:	b91b      	cbnz	r3, 800159e <_printf_i+0x15e>
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	f022 0220 	bic.w	r2, r2, #32
 800159c:	6022      	str	r2, [r4, #0]
 800159e:	2210      	movs	r2, #16
 80015a0:	e7b7      	b.n	8001512 <_printf_i+0xd2>
 80015a2:	064d      	lsls	r5, r1, #25
 80015a4:	bf48      	it	mi
 80015a6:	b29b      	uxthmi	r3, r3
 80015a8:	e7ef      	b.n	800158a <_printf_i+0x14a>
 80015aa:	4665      	mov	r5, ip
 80015ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80015b0:	fb02 3311 	mls	r3, r2, r1, r3
 80015b4:	5cc3      	ldrb	r3, [r0, r3]
 80015b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80015ba:	460b      	mov	r3, r1
 80015bc:	2900      	cmp	r1, #0
 80015be:	d1f5      	bne.n	80015ac <_printf_i+0x16c>
 80015c0:	e7b9      	b.n	8001536 <_printf_i+0xf6>
 80015c2:	6813      	ldr	r3, [r2, #0]
 80015c4:	6825      	ldr	r5, [r4, #0]
 80015c6:	1d18      	adds	r0, r3, #4
 80015c8:	6961      	ldr	r1, [r4, #20]
 80015ca:	6010      	str	r0, [r2, #0]
 80015cc:	0628      	lsls	r0, r5, #24
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	d501      	bpl.n	80015d6 <_printf_i+0x196>
 80015d2:	6019      	str	r1, [r3, #0]
 80015d4:	e002      	b.n	80015dc <_printf_i+0x19c>
 80015d6:	066a      	lsls	r2, r5, #25
 80015d8:	d5fb      	bpl.n	80015d2 <_printf_i+0x192>
 80015da:	8019      	strh	r1, [r3, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	4665      	mov	r5, ip
 80015e0:	6123      	str	r3, [r4, #16]
 80015e2:	e7b9      	b.n	8001558 <_printf_i+0x118>
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	1d19      	adds	r1, r3, #4
 80015e8:	6011      	str	r1, [r2, #0]
 80015ea:	681d      	ldr	r5, [r3, #0]
 80015ec:	6862      	ldr	r2, [r4, #4]
 80015ee:	2100      	movs	r1, #0
 80015f0:	4628      	mov	r0, r5
 80015f2:	f000 f837 	bl	8001664 <memchr>
 80015f6:	b108      	cbz	r0, 80015fc <_printf_i+0x1bc>
 80015f8:	1b40      	subs	r0, r0, r5
 80015fa:	6060      	str	r0, [r4, #4]
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	6123      	str	r3, [r4, #16]
 8001600:	2300      	movs	r3, #0
 8001602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001606:	e7a7      	b.n	8001558 <_printf_i+0x118>
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	462a      	mov	r2, r5
 800160c:	4639      	mov	r1, r7
 800160e:	4630      	mov	r0, r6
 8001610:	47c0      	blx	r8
 8001612:	3001      	adds	r0, #1
 8001614:	d0aa      	beq.n	800156c <_printf_i+0x12c>
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	079b      	lsls	r3, r3, #30
 800161a:	d413      	bmi.n	8001644 <_printf_i+0x204>
 800161c:	68e0      	ldr	r0, [r4, #12]
 800161e:	9b03      	ldr	r3, [sp, #12]
 8001620:	4298      	cmp	r0, r3
 8001622:	bfb8      	it	lt
 8001624:	4618      	movlt	r0, r3
 8001626:	e7a3      	b.n	8001570 <_printf_i+0x130>
 8001628:	2301      	movs	r3, #1
 800162a:	464a      	mov	r2, r9
 800162c:	4639      	mov	r1, r7
 800162e:	4630      	mov	r0, r6
 8001630:	47c0      	blx	r8
 8001632:	3001      	adds	r0, #1
 8001634:	d09a      	beq.n	800156c <_printf_i+0x12c>
 8001636:	3501      	adds	r5, #1
 8001638:	68e3      	ldr	r3, [r4, #12]
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	42ab      	cmp	r3, r5
 8001640:	dcf2      	bgt.n	8001628 <_printf_i+0x1e8>
 8001642:	e7eb      	b.n	800161c <_printf_i+0x1dc>
 8001644:	2500      	movs	r5, #0
 8001646:	f104 0919 	add.w	r9, r4, #25
 800164a:	e7f5      	b.n	8001638 <_printf_i+0x1f8>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ac      	bne.n	80015aa <_printf_i+0x16a>
 8001650:	7803      	ldrb	r3, [r0, #0]
 8001652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800165a:	e76c      	b.n	8001536 <_printf_i+0xf6>
 800165c:	08001bb8 	.word	0x08001bb8
 8001660:	08001bc9 	.word	0x08001bc9

08001664 <memchr>:
 8001664:	b510      	push	{r4, lr}
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	4402      	add	r2, r0
 800166a:	4290      	cmp	r0, r2
 800166c:	4603      	mov	r3, r0
 800166e:	d101      	bne.n	8001674 <memchr+0x10>
 8001670:	2300      	movs	r3, #0
 8001672:	e003      	b.n	800167c <memchr+0x18>
 8001674:	781c      	ldrb	r4, [r3, #0]
 8001676:	3001      	adds	r0, #1
 8001678:	428c      	cmp	r4, r1
 800167a:	d1f6      	bne.n	800166a <memchr+0x6>
 800167c:	4618      	mov	r0, r3
 800167e:	bd10      	pop	{r4, pc}

08001680 <memcpy>:
 8001680:	b510      	push	{r4, lr}
 8001682:	1e43      	subs	r3, r0, #1
 8001684:	440a      	add	r2, r1
 8001686:	4291      	cmp	r1, r2
 8001688:	d100      	bne.n	800168c <memcpy+0xc>
 800168a:	bd10      	pop	{r4, pc}
 800168c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001694:	e7f7      	b.n	8001686 <memcpy+0x6>

08001696 <memmove>:
 8001696:	4288      	cmp	r0, r1
 8001698:	b510      	push	{r4, lr}
 800169a:	eb01 0302 	add.w	r3, r1, r2
 800169e:	d807      	bhi.n	80016b0 <memmove+0x1a>
 80016a0:	1e42      	subs	r2, r0, #1
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d00a      	beq.n	80016bc <memmove+0x26>
 80016a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80016ae:	e7f8      	b.n	80016a2 <memmove+0xc>
 80016b0:	4283      	cmp	r3, r0
 80016b2:	d9f5      	bls.n	80016a0 <memmove+0xa>
 80016b4:	1881      	adds	r1, r0, r2
 80016b6:	1ad2      	subs	r2, r2, r3
 80016b8:	42d3      	cmn	r3, r2
 80016ba:	d100      	bne.n	80016be <memmove+0x28>
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80016c6:	e7f7      	b.n	80016b8 <memmove+0x22>

080016c8 <_free_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4605      	mov	r5, r0
 80016cc:	2900      	cmp	r1, #0
 80016ce:	d043      	beq.n	8001758 <_free_r+0x90>
 80016d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d4:	1f0c      	subs	r4, r1, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bfb8      	it	lt
 80016da:	18e4      	addlt	r4, r4, r3
 80016dc:	f000 f8d0 	bl	8001880 <__malloc_lock>
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <_free_r+0x94>)
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	4610      	mov	r0, r2
 80016e6:	b933      	cbnz	r3, 80016f6 <_free_r+0x2e>
 80016e8:	6063      	str	r3, [r4, #4]
 80016ea:	6014      	str	r4, [r2, #0]
 80016ec:	4628      	mov	r0, r5
 80016ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016f2:	f000 b8c6 	b.w	8001882 <__malloc_unlock>
 80016f6:	42a3      	cmp	r3, r4
 80016f8:	d90b      	bls.n	8001712 <_free_r+0x4a>
 80016fa:	6821      	ldr	r1, [r4, #0]
 80016fc:	1862      	adds	r2, r4, r1
 80016fe:	4293      	cmp	r3, r2
 8001700:	bf01      	itttt	eq
 8001702:	681a      	ldreq	r2, [r3, #0]
 8001704:	685b      	ldreq	r3, [r3, #4]
 8001706:	1852      	addeq	r2, r2, r1
 8001708:	6022      	streq	r2, [r4, #0]
 800170a:	6063      	str	r3, [r4, #4]
 800170c:	6004      	str	r4, [r0, #0]
 800170e:	e7ed      	b.n	80016ec <_free_r+0x24>
 8001710:	4613      	mov	r3, r2
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	b10a      	cbz	r2, 800171a <_free_r+0x52>
 8001716:	42a2      	cmp	r2, r4
 8001718:	d9fa      	bls.n	8001710 <_free_r+0x48>
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	1858      	adds	r0, r3, r1
 800171e:	42a0      	cmp	r0, r4
 8001720:	d10b      	bne.n	800173a <_free_r+0x72>
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	4401      	add	r1, r0
 8001726:	1858      	adds	r0, r3, r1
 8001728:	4282      	cmp	r2, r0
 800172a:	6019      	str	r1, [r3, #0]
 800172c:	d1de      	bne.n	80016ec <_free_r+0x24>
 800172e:	6810      	ldr	r0, [r2, #0]
 8001730:	6852      	ldr	r2, [r2, #4]
 8001732:	4401      	add	r1, r0
 8001734:	6019      	str	r1, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	e7d8      	b.n	80016ec <_free_r+0x24>
 800173a:	d902      	bls.n	8001742 <_free_r+0x7a>
 800173c:	230c      	movs	r3, #12
 800173e:	602b      	str	r3, [r5, #0]
 8001740:	e7d4      	b.n	80016ec <_free_r+0x24>
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	1821      	adds	r1, r4, r0
 8001746:	428a      	cmp	r2, r1
 8001748:	bf01      	itttt	eq
 800174a:	6811      	ldreq	r1, [r2, #0]
 800174c:	6852      	ldreq	r2, [r2, #4]
 800174e:	1809      	addeq	r1, r1, r0
 8001750:	6021      	streq	r1, [r4, #0]
 8001752:	6062      	str	r2, [r4, #4]
 8001754:	605c      	str	r4, [r3, #4]
 8001756:	e7c9      	b.n	80016ec <_free_r+0x24>
 8001758:	bd38      	pop	{r3, r4, r5, pc}
 800175a:	bf00      	nop
 800175c:	2000025c 	.word	0x2000025c

08001760 <_malloc_r>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	1ccd      	adds	r5, r1, #3
 8001764:	f025 0503 	bic.w	r5, r5, #3
 8001768:	3508      	adds	r5, #8
 800176a:	2d0c      	cmp	r5, #12
 800176c:	bf38      	it	cc
 800176e:	250c      	movcc	r5, #12
 8001770:	2d00      	cmp	r5, #0
 8001772:	4606      	mov	r6, r0
 8001774:	db01      	blt.n	800177a <_malloc_r+0x1a>
 8001776:	42a9      	cmp	r1, r5
 8001778:	d903      	bls.n	8001782 <_malloc_r+0x22>
 800177a:	230c      	movs	r3, #12
 800177c:	6033      	str	r3, [r6, #0]
 800177e:	2000      	movs	r0, #0
 8001780:	bd70      	pop	{r4, r5, r6, pc}
 8001782:	f000 f87d 	bl	8001880 <__malloc_lock>
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <_malloc_r+0xac>)
 8001788:	6814      	ldr	r4, [r2, #0]
 800178a:	4621      	mov	r1, r4
 800178c:	b991      	cbnz	r1, 80017b4 <_malloc_r+0x54>
 800178e:	4c20      	ldr	r4, [pc, #128]	; (8001810 <_malloc_r+0xb0>)
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	b91b      	cbnz	r3, 800179c <_malloc_r+0x3c>
 8001794:	4630      	mov	r0, r6
 8001796:	f000 f863 	bl	8001860 <_sbrk_r>
 800179a:	6020      	str	r0, [r4, #0]
 800179c:	4629      	mov	r1, r5
 800179e:	4630      	mov	r0, r6
 80017a0:	f000 f85e 	bl	8001860 <_sbrk_r>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	d124      	bne.n	80017f2 <_malloc_r+0x92>
 80017a8:	230c      	movs	r3, #12
 80017aa:	4630      	mov	r0, r6
 80017ac:	6033      	str	r3, [r6, #0]
 80017ae:	f000 f868 	bl	8001882 <__malloc_unlock>
 80017b2:	e7e4      	b.n	800177e <_malloc_r+0x1e>
 80017b4:	680b      	ldr	r3, [r1, #0]
 80017b6:	1b5b      	subs	r3, r3, r5
 80017b8:	d418      	bmi.n	80017ec <_malloc_r+0x8c>
 80017ba:	2b0b      	cmp	r3, #11
 80017bc:	d90f      	bls.n	80017de <_malloc_r+0x7e>
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	18cc      	adds	r4, r1, r3
 80017c2:	50cd      	str	r5, [r1, r3]
 80017c4:	4630      	mov	r0, r6
 80017c6:	f000 f85c 	bl	8001882 <__malloc_unlock>
 80017ca:	f104 000b 	add.w	r0, r4, #11
 80017ce:	1d23      	adds	r3, r4, #4
 80017d0:	f020 0007 	bic.w	r0, r0, #7
 80017d4:	1ac3      	subs	r3, r0, r3
 80017d6:	d0d3      	beq.n	8001780 <_malloc_r+0x20>
 80017d8:	425a      	negs	r2, r3
 80017da:	50e2      	str	r2, [r4, r3]
 80017dc:	e7d0      	b.n	8001780 <_malloc_r+0x20>
 80017de:	684b      	ldr	r3, [r1, #4]
 80017e0:	428c      	cmp	r4, r1
 80017e2:	bf16      	itet	ne
 80017e4:	6063      	strne	r3, [r4, #4]
 80017e6:	6013      	streq	r3, [r2, #0]
 80017e8:	460c      	movne	r4, r1
 80017ea:	e7eb      	b.n	80017c4 <_malloc_r+0x64>
 80017ec:	460c      	mov	r4, r1
 80017ee:	6849      	ldr	r1, [r1, #4]
 80017f0:	e7cc      	b.n	800178c <_malloc_r+0x2c>
 80017f2:	1cc4      	adds	r4, r0, #3
 80017f4:	f024 0403 	bic.w	r4, r4, #3
 80017f8:	42a0      	cmp	r0, r4
 80017fa:	d005      	beq.n	8001808 <_malloc_r+0xa8>
 80017fc:	1a21      	subs	r1, r4, r0
 80017fe:	4630      	mov	r0, r6
 8001800:	f000 f82e 	bl	8001860 <_sbrk_r>
 8001804:	3001      	adds	r0, #1
 8001806:	d0cf      	beq.n	80017a8 <_malloc_r+0x48>
 8001808:	6025      	str	r5, [r4, #0]
 800180a:	e7db      	b.n	80017c4 <_malloc_r+0x64>
 800180c:	2000025c 	.word	0x2000025c
 8001810:	20000260 	.word	0x20000260

08001814 <_realloc_r>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	4607      	mov	r7, r0
 8001818:	4614      	mov	r4, r2
 800181a:	460e      	mov	r6, r1
 800181c:	b921      	cbnz	r1, 8001828 <_realloc_r+0x14>
 800181e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001822:	4611      	mov	r1, r2
 8001824:	f7ff bf9c 	b.w	8001760 <_malloc_r>
 8001828:	b922      	cbnz	r2, 8001834 <_realloc_r+0x20>
 800182a:	f7ff ff4d 	bl	80016c8 <_free_r>
 800182e:	4625      	mov	r5, r4
 8001830:	4628      	mov	r0, r5
 8001832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001834:	f000 f826 	bl	8001884 <_malloc_usable_size_r>
 8001838:	42a0      	cmp	r0, r4
 800183a:	d20f      	bcs.n	800185c <_realloc_r+0x48>
 800183c:	4621      	mov	r1, r4
 800183e:	4638      	mov	r0, r7
 8001840:	f7ff ff8e 	bl	8001760 <_malloc_r>
 8001844:	4605      	mov	r5, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	d0f2      	beq.n	8001830 <_realloc_r+0x1c>
 800184a:	4631      	mov	r1, r6
 800184c:	4622      	mov	r2, r4
 800184e:	f7ff ff17 	bl	8001680 <memcpy>
 8001852:	4631      	mov	r1, r6
 8001854:	4638      	mov	r0, r7
 8001856:	f7ff ff37 	bl	80016c8 <_free_r>
 800185a:	e7e9      	b.n	8001830 <_realloc_r+0x1c>
 800185c:	4635      	mov	r5, r6
 800185e:	e7e7      	b.n	8001830 <_realloc_r+0x1c>

08001860 <_sbrk_r>:
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	2300      	movs	r3, #0
 8001864:	4c05      	ldr	r4, [pc, #20]	; (800187c <_sbrk_r+0x1c>)
 8001866:	4605      	mov	r5, r0
 8001868:	4608      	mov	r0, r1
 800186a:	6023      	str	r3, [r4, #0]
 800186c:	f7ff faa4 	bl	8000db8 <_sbrk>
 8001870:	1c43      	adds	r3, r0, #1
 8001872:	d102      	bne.n	800187a <_sbrk_r+0x1a>
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	b103      	cbz	r3, 800187a <_sbrk_r+0x1a>
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	2000088c 	.word	0x2000088c

08001880 <__malloc_lock>:
 8001880:	4770      	bx	lr

08001882 <__malloc_unlock>:
 8001882:	4770      	bx	lr

08001884 <_malloc_usable_size_r>:
 8001884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001888:	1f18      	subs	r0, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	bfbc      	itt	lt
 800188e:	580b      	ldrlt	r3, [r1, r0]
 8001890:	18c0      	addlt	r0, r0, r3
 8001892:	4770      	bx	lr

08001894 <_init>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr

080018a0 <_fini>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	bf00      	nop
 80018a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a6:	bc08      	pop	{r3}
 80018a8:	469e      	mov	lr, r3
 80018aa:	4770      	bx	lr
